services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
      target: ${BUILD_TARGET:-production}
    environment:
      # Основные настройки
      - DEBUG=${DEBUG:-false}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - ENVIRONMENT=${ENVIRONMENT:-production}

      # Telegram Bot
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - BOT_LINK=${BOT_LINK}
      - INVITE_LINK=${INVITE_LINK}
      - GROUP_ID=${GROUP_ID}
      - FOR_LOGS=${FOR_LOGS}

      # Безопасность
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_JWT=${SECRET_KEY_JWT}
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

      # API URLs - зависят от окружения
      - API_BASE_URL=${API_BASE_URL_INTERNAL:-http://web:8000}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}

      # Backup настройки
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL_HOURS=${BACKUP_INTERVAL_HOURS:-6}
      - BACKUP_DIR=/app/data/backups
      - COMPRESS_BACKUPS=${COMPRESS_BACKUPS:-true}
      - KEEP_HOURLY_BACKUPS=${KEEP_HOURLY_BACKUPS:-48}
      - KEEP_DAILY_BACKUPS=${KEEP_DAILY_BACKUPS:-30}
      - KEEP_WEEKLY_BACKUPS=${KEEP_WEEKLY_BACKUPS:-12}
      - KEEP_MONTHLY_BACKUPS=${KEEP_MONTHLY_BACKUPS:-6}
      - MAX_BACKUP_SIZE_MB=${MAX_BACKUP_SIZE_MB:-1000}

      # Логирование
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - LOG_TO_FILE=${LOG_TO_FILE:-true}
      - TELEGRAM_LOGGING_ENABLED=${TELEGRAM_LOGGING_ENABLED:-true}
      - TELEGRAM_LOG_MIN_LEVEL=${TELEGRAM_LOG_MIN_LEVEL:-ERROR}
      - TELEGRAM_LOG_RATE_LIMIT=${TELEGRAM_LOG_RATE_LIMIT:-5}

      # Кэширование
      - REDIS_URL=redis://redis:6379/0

      # Внешние URL
      - ADMIN_URL=${ADMIN_URL}
      - RULES_URL=${RULES_URL}
    volumes:
      - ./data:/app/data
      - ./avatars:/app/avatars
      - ./ticket_photos:/app/ticket_photos
      - ./newsletter_photos:/app/newsletter_photos
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/app/data/bot_initialized"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - coworking_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: ${BUILD_TARGET:-production}
    environment:
      # Основные настройки
      - DEBUG=${DEBUG:-false}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - APP_NAME=${APP_NAME:-"Coworking API"}
      - APP_VERSION=${APP_VERSION:-"1.0.0"}

      # URL конфигурация
      - API_BASE_URL=${API_BASE_URL_EXTERNAL}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}

      # Безопасность
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_JWT=${SECRET_KEY_JWT}
      - ACCESS_TOKEN_EXPIRE_HOURS=${ACCESS_TOKEN_EXPIRE_HOURS:-24}
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

      # Telegram Bot
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - BOT_LINK=${BOT_LINK}
      - INVITE_LINK=${INVITE_LINK}
      - GROUP_ID=${GROUP_ID}
      - FOR_LOGS=${FOR_LOGS}

      # Платежные системы
      - YOKASSA_ACCOUNT_ID=${YOKASSA_ACCOUNT_ID}
      - YOKASSA_SECRET_KEY=${YOKASSA_SECRET_KEY}

      # Rubitime
      - RUBITIME_API_KEY=${RUBITIME_API_KEY}
      - RUBITIME_BASE_URL=${RUBITIME_BASE_URL}
      - RUBITIME_BRANCH_ID=${RUBITIME_BRANCH_ID}
      - RUBITIME_COOPERATOR_ID=${RUBITIME_COOPERATOR_ID}

      # Backup настройки
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL_HOURS=${BACKUP_INTERVAL_HOURS:-6}
      - BACKUP_DIR=/app/data/backups
      - COMPRESS_BACKUPS=${COMPRESS_BACKUPS:-true}
      - KEEP_HOURLY_BACKUPS=${KEEP_HOURLY_BACKUPS:-48}
      - KEEP_DAILY_BACKUPS=${KEEP_DAILY_BACKUPS:-30}
      - KEEP_WEEKLY_BACKUPS=${KEEP_WEEKLY_BACKUPS:-12}
      - KEEP_MONTHLY_BACKUPS=${KEEP_MONTHLY_BACKUPS:-6}
      - MAX_BACKUP_SIZE_MB=${MAX_BACKUP_SIZE_MB:-1000}

      # Логирование
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - LOG_TO_FILE=${LOG_TO_FILE:-true}
      - TELEGRAM_LOGGING_ENABLED=${TELEGRAM_LOGGING_ENABLED:-true}
      - TELEGRAM_LOG_MIN_LEVEL=${TELEGRAM_LOG_MIN_LEVEL:-ERROR}
      - TELEGRAM_LOG_RATE_LIMIT=${TELEGRAM_LOG_RATE_LIMIT:-5}

      # Кэширование
      - REDIS_URL=redis://redis:6379/0
      - CACHE_DEFAULT_TTL=${CACHE_DEFAULT_TTL:-600}
      - CACHE_DASHBOARD_TTL=${CACHE_DASHBOARD_TTL:-120}
      - CACHE_USER_DATA_TTL=${CACHE_USER_DATA_TTL:-1200}
      - CACHE_STATIC_DATA_TTL=${CACHE_STATIC_DATA_TTL:-3600}

      # Внешние URL
      - ADMIN_URL=${ADMIN_URL}
      - RULES_URL=${RULES_URL}
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      - ./data:/app/data
      - ./avatars:/app/avatars
      - ./ticket_photos:/app/ticket_photos
      - ./newsletter_photos:/app/newsletter_photos
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - coworking_network
    deploy:
      resources:
        limits:
          memory: ${WEB_MEMORY_LIMIT:-1G}
        reservations:
          memory: ${WEB_MEMORY_RESERVATION:-512M}

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: ${BUILD_TARGET:-production}
      args:
        - REACT_APP_API_BASE_URL=${API_BASE_URL_EXTERNAL}
        - REACT_APP_FRONTEND_URL=${FRONTEND_URL}
    environment:
      - API_BASE_URL=${API_BASE_URL_EXTERNAL}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DOMAIN_NAME=${DOMAIN_NAME}
    ports:
      - "${FRONTEND_HTTP_PORT:-80}:80"
      - "${FRONTEND_HTTPS_PORT:-443}:443"
    volumes:
      # SSL сертификаты (только для production)
      - ${SSL_CERTS_PATH:-/dev/null}:/etc/letsencrypt:ro
      - ${SSL_WEBROOT_PATH:-/dev/null}:/var/www/certbot
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
    networks:
      - coworking_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --maxmemory ${REDIS_MAXMEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - coworking_network
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${REDIS_MEMORY_RESERVATION:-256M}

  # Certbot для автообновления SSL сертификатов (только для production)
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ${SSL_CERTS_PATH:-/dev/null}:/etc/letsencrypt
      - ${SSL_WEBROOT_PATH:-/dev/null}:/var/www/certbot
    command: >
      sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL:-noreply@example.com} --agree-tos --no-eff-email; sleep 12h; done'
    depends_on:
      - frontend
    profiles:
      - production

volumes:
  data_volume:
  avatars_volume:
  ticket_photos_volume:
  newsletter_photos_volume:
  logs_volume:
  config_volume:
  redis_data:

networks:
  coworking_network:
    driver: bridge