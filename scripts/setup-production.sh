#!/bin/bash

# üöÄ –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ù–ê–°–¢–†–û–ô–ö–ò PRODUCTION –°–ï–†–í–ï–†–ê
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Coworking Management System –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ..."
echo "   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å environment-specific —Å–∫—Ä–∏–ø—Ç–∞–º–∏"
echo ""

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç scripts)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -eq 0 ]]; then
   print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ root!"
   print_status "–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
   print_status "  adduser coworking"
   print_status "  usermod -aG sudo coworking" 
   print_status "  usermod -aG docker coworking"
   print_status "  su - coworking"
   print_status "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./setup-production.sh"
   exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo –¥–æ—Å—Ç—É–ø–∞
if ! sudo -n true 2>/dev/null; then
    print_error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –Ω–µ –∏–º–µ–µ—Ç sudo –¥–æ—Å—Ç—É–ø–∞!"
    print_status "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É sudo:"
    print_status "  sudo usermod -aG sudo $USER"
    print_status "–ó–∞—Ç–µ–º –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã
check_command() {
    if ! command -v $1 &> /dev/null; then
        return 1
    fi
    return 0
}

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
if check_command apt; then
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y curl wget git nano htop unzip software-properties-common openssl
elif check_command yum; then
    sudo yum update -y
    sudo yum install -y curl wget git nano htop unzip openssl
elif check_command dnf; then
    sudo dnf update -y
    sudo dnf install -y curl wget git nano htop unzip openssl
else
    print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–∫–µ—Ç–æ–≤!"
    exit 1
fi

# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
if ! check_command docker; then
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    rm get-docker.sh
    print_status "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–ù–ò–ú–ê–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã docker!"
else
    print_status "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
fi

# 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
if ! check_command docker-compose; then
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
else
    print_status "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker-compose --version)"
fi

# 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è production
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è production..."
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json > /dev/null <<EOF
{
  "dns": ["8.8.8.8", "8.8.4.4", "1.1.1.1"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2"
}
EOF

sudo systemctl restart docker || true
sudo systemctl enable docker || true

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –≤ Docker Hub
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Docker Hub..."
if ! docker info >/dev/null 2>&1; then
    print_warning "Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã docker)"
    print_status "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker login"
elif docker pull hello-world:latest >/dev/null 2>&1; then
    docker rmi hello-world:latest >/dev/null 2>&1
    print_status "–î–æ—Å—Ç—É–ø –∫ Docker Hub —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_warning "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å Docker Hub. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker login"
fi

# 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
if check_command ufw; then
    sudo ufw allow ssh
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 8000/tcp
    sudo ufw --force enable
    print_status "UFW firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ—Ä—Ç—ã: SSH, 80, 443, 8000)"
elif check_command firewall-cmd; then
    sudo firewall-cmd --permanent --add-service=ssh
    sudo firewall-cmd --permanent --add-port=80/tcp
    sudo firewall-cmd --permanent --add-port=443/tcp
    sudo firewall-cmd --permanent --add-port=8000/tcp
    sudo firewall-cmd --reload
    print_status "Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ—Ä—Ç—ã: SSH, 80, 443, 8000)"
else
    print_warning "Firewall –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç—ã 80, 443, 8000 –æ—Ç–∫—Ä—ã—Ç—ã!"
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.yml" ] || [ ! -f ".env" ]; then
    print_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
    print_status "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ docker-compose.yml –∏ .env"
    print_status "–ù–∞–ø—Ä–∏–º–µ—Ä:"
    print_status "  git clone <your-repo-url> coworking"
    print_status "  cd coworking"
    print_status "  ./setup-production.sh"
    exit 1
fi

PROJECT_DIR=$(pwd)
print_status "–†–∞–±–æ—Ç–∞–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $PROJECT_DIR"

# 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ —ç—Ç–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
if [ -d ".git" ]; then
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    git pull origin main || print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"
else
    print_status "–ü—Ä–æ–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
fi

# 8. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
mkdir -p data avatars ticket_photos newsletter_photos logs config
chmod -R 755 data avatars ticket_photos newsletter_photos logs config
print_status "–°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: data/, avatars/, ticket_photos/, newsletter_photos/, logs/, config/"

# 9. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ .env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ -f ".env" ]; then
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    print_status "–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è .env —Ñ–∞–π–ª–∞"
fi

# –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–∞ –∏ email
echo ""
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∏ –¥–æ–º–µ–Ω–∞..."
read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è localhost): " DOMAIN_NAME
if [ -n "$DOMAIN_NAME" ]; then
    read -p "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " SSL_EMAIL
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOMAIN_NAME –≤ .env
if [ -n "$DOMAIN_NAME" ]; then
    if grep -q "^DOMAIN_NAME=" .env; then
        sed -i "s/^DOMAIN_NAME=.*/DOMAIN_NAME=$DOMAIN_NAME/" .env
    else
        echo "DOMAIN_NAME=$DOMAIN_NAME" >> .env
    fi
    print_status "–î–æ–º–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $DOMAIN_NAME"
else
    DOMAIN_NAME="localhost"
    print_status "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localhost (–±–µ–∑ SSL)"
fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
if grep -q "your-super-secret-key-change-in-production" .env; then
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π..."
    SECRET_KEY=$(openssl rand -hex 32)
    SECRET_JWT_KEY=$(openssl rand -hex 32)
    
    sed -i "s/your-super-secret-key-change-in-production/$SECRET_KEY/" .env
    sed -i "s/your-super-secret-key-change-in-production/$SECRET_JWT_KEY/" .env
    print_status "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

# 10. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
echo ""
print_warning "–í–ê–ñ–ù–û! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
print_warning "- BOT_TOKEN (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)"
print_warning "- ADMIN_TELEGRAM_ID (—É–∑–Ω–∞–π—Ç–µ —É @userinfobot)" 
print_warning "- ADMIN_PASSWORD (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å)"
print_warning "- YOKASSA_* (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)"
print_warning "- RUBITIME_* (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)"
echo ""

# 11. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã..."
chmod +x scripts/*.sh
print_status "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö .sh —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ scripts/"

# 12. –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
print_status "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
sudo tee /etc/systemd/system/coworking.service > /dev/null <<EOF
[Unit]
Description=Coworking Management System
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PROJECT_DIR
ExecStart=$PROJECT_DIR/scripts/start-prod.sh
ExecStop=$PROJECT_DIR/scripts/stop.sh
TimeoutStartSec=0
User=$USER
Group=$USER

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable coworking.service
print_status "Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"

# 13. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
# –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –≤ 2:00
(crontab -l 2>/dev/null | grep -v "coworking backup"; echo "0 2 * * * cd $PROJECT_DIR && docker-compose exec -T web python -c \"import sys; sys.path.append('/app'); from utils.backup_manager import create_backup; import asyncio; asyncio.run(create_backup())\" >> $PROJECT_DIR/logs/backup.log 2>&1") | crontab - || true
print_status "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00)"

# 14. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
if groups $USER | grep -q docker; then
    print_status "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
else
    print_warning "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –ù–ï –≤ –≥—Ä—É–ø–ø–µ docker. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è!"
    print_status "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo usermod -aG docker $USER && su - $USER"
fi

if groups $USER | grep -q sudo; then
    print_status "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –∏–º–µ–µ—Ç sudo –ø—Ä–∞–≤–∞"
else
    print_warning "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –ù–ï –∏–º–µ–µ—Ç sudo –ø—Ä–∞–≤–∞"
fi

# 15. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
echo ""
echo "üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ"
print_status "       –ù–ê–°–¢–†–û–ô–ö–ê PRODUCTION –°–ï–†–í–ï–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
echo "üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ"
echo ""
echo "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
echo ""
echo "1. üìù –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª:"
echo "   nano .env"
echo ""
echo "2. üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env:"
echo "   ‚úì BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather"
echo "   ‚úì ADMIN_TELEGRAM_ID=–≤–∞—à_telegram_id"
echo "   ‚úì ADMIN_PASSWORD=–Ω–∞–¥–µ–∂–Ω—ã–π_–ø–∞—Ä–æ–ª—å"
echo "   ‚úì SECRET_KEY (—É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)"
echo "   ‚úì SECRET_KEY_JWT (—É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)"
echo "   ‚úì DOMAIN_NAME=$DOMAIN_NAME"
echo ""

if [ "$DOMAIN_NAME" != "localhost" ]; then
    echo "3. üîí –ü–æ–ª—É—á–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
    echo "   ./scripts/setup-ssl.sh"
    echo ""
fi

echo "4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:"
echo "   ./scripts/start-prod.sh"
echo ""
echo "5. üè• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å:"
echo "   ./scripts/status.sh"
echo ""
echo "üìÅ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:"
echo "   ./scripts/start-prod.sh       - –∑–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ"
echo "   ./scripts/start-local.sh      - –∑–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"
echo "   ./scripts/stop.sh             - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "   ./scripts/restart.sh          - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "   ./scripts/status.sh           - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"
echo "   ./scripts/logs.sh [service]   - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "   ./scripts/cleanup.sh          - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
echo ""
echo "üåê –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–ê –ë–£–î–ï–¢ –î–û–°–¢–£–ü–ù–ê –ù–ê:"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if [ "$DOMAIN_NAME" != "localhost" ] && [ -n "$DOMAIN_NAME" ]; then
    if [ -n "$SSL_EMAIL" ]; then
        echo "   üîí Frontend: https://$DOMAIN_NAME"
        echo "   üîí API: https://$DOMAIN_NAME/api"
        echo "   üîí Docs: https://$DOMAIN_NAME/docs"
        echo ""
        print_warning "   –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ./scripts/setup-ssl.sh"
    else
        echo "   üì± Frontend: http://$DOMAIN_NAME"
        echo "   üîß API: http://$DOMAIN_NAME:8000/api"
        echo "   üìö Docs: http://$DOMAIN_NAME:8000/docs"
    fi
else
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP
    EXTERNAL_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipecho.net/plain 2>/dev/null || echo "your_server_ip")
    echo "   üì± Frontend: http://$EXTERNAL_IP"
    echo "   üîß API: http://$EXTERNAL_IP:8000/api"
    echo "   üìö Docs: http://$EXTERNAL_IP:8000/docs"
fi

echo ""
echo "‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:"
if ! groups $USER | grep -q docker; then
    print_warning "   üîÑ –ü–ï–†–ï–õ–û–ì–ò–ù–¨–¢–ï–°–¨ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –≥—Ä—É–ø–ø—ã docker:"
    print_warning "      exit && ssh user@server"
fi
print_warning "   üê≥ –í—ã–ø–æ–ª–Ω–∏—Ç–µ docker login –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –æ–±—Ä–∞–∑–∞–º"
print_warning "   üîê –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ .env —Ñ–∞–π–ª–µ"
print_warning "   üî• –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backup —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
echo ""
echo "üéØ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø:"
echo "   ‚úÖ Systemd —Å–µ—Ä–≤–∏—Å: sudo systemctl start coworking"
echo "   ‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: –≤–∫–ª—é—á–µ–Ω"  
echo "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (2:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)"
echo ""
print_status "‚ú® –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—é! –£–¥–∞—á–∏! ‚ú®"
echo ""