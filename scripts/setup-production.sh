#!/bin/bash

# üöÄ –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ù–ê–°–¢–†–û–ô–ö–ò PRODUCTION –°–ï–†–í–ï–†–ê
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Coworking Management System –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -eq 0 ]]; then
   print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ root!"
   print_status "–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
   print_status "  adduser coworking"
   print_status "  usermod -aG sudo coworking" 
   print_status "  su - coworking"
   print_status "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./setup-production.sh"
   exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo –¥–æ—Å—Ç—É–ø–∞
if ! sudo -n true 2>/dev/null; then
    print_error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –Ω–µ –∏–º–µ–µ—Ç sudo –¥–æ—Å—Ç—É–ø–∞!"
    print_status "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É sudo:"
    print_status "  usermod -aG sudo $USER"
    print_status "–ó–∞—Ç–µ–º –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã
check_command() {
    if ! command -v $1 &> /dev/null; then
        return 1
    fi
    return 0
}

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
if check_command apt; then
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y curl wget git nano htop unzip software-properties-common
elif check_command yum; then
    sudo yum update -y
    sudo yum install -y curl wget git nano htop unzip
elif check_command dnf; then
    sudo dnf update -y
    sudo dnf install -y curl wget git nano htop unzip
else
    print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–∫–µ—Ç–æ–≤!"
    exit 1
fi

# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
if ! check_command docker; then
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    rm get-docker.sh
    print_status "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–ù–ò–ú–ê–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã docker!"
else
    print_status "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
fi

# 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
if ! check_command docker-compose; then
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
else
    print_status "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker-compose --version)"
fi

# 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è production
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è production..."
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json > /dev/null <<EOF
{
  "dns": ["8.8.8.8", "8.8.4.4", "1.1.1.1"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2"
}
EOF

sudo systemctl restart docker || true
sudo systemctl enable docker || true

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –≤ Docker Hub
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Docker Hub..."
if ! docker info >/dev/null 2>&1; then
    print_warning "Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã docker)"
elif docker pull hello-world:latest >/dev/null 2>&1; then
    docker rmi hello-world:latest >/dev/null 2>&1
    print_status "–î–æ—Å—Ç—É–ø –∫ Docker Hub —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_warning "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å Docker Hub. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker login"
fi

# 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
if check_command ufw; then
    sudo ufw allow ssh
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 8000/tcp
    sudo ufw --force enable
elif check_command firewall-cmd; then
    sudo firewall-cmd --permanent --add-service=ssh
    sudo firewall-cmd --permanent --add-port=80/tcp
    sudo firewall-cmd --permanent --add-port=443/tcp
    sudo firewall-cmd --permanent --add-port=8000/tcp
    sudo firewall-cmd --reload
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.production.yml" ] || [ ! -f ".env.production.example" ]; then
    print_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
    print_status "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ docker-compose.production.yml –∏ .env.production.example"
    print_status "–ù–∞–ø—Ä–∏–º–µ—Ä: cd ~/co-work_spa && ./scripts/setup-production.sh"
    exit 1
fi

PROJECT_DIR=$(pwd)
print_status "–†–∞–±–æ—Ç–∞–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $PROJECT_DIR"

# 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ —ç—Ç–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
if [ -d ".git" ]; then
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    git pull origin main || print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"
else
    print_status "–ü—Ä–æ–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
fi

# 8. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
mkdir -p data avatars ticket_photos newsletter_photos logs config
chmod -R 755 data avatars ticket_photos newsletter_photos logs config

# 9. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -f ".env.production" ]; then
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    if [ -f ".env.production.example" ]; then
        cp .env.production.example .env.production
    else
        print_error "–§–∞–π–ª .env.production.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–∞
    echo ""
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com): " DOMAIN_NAME
    read -p "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " SSL_EMAIL
    
    if [ -n "$DOMAIN_NAME" ] && [ -n "$SSL_EMAIL" ]; then
        sed -i "s/your-domain.com/$DOMAIN_NAME/g" .env.production
        sed -i "s/your-email@example.com/$SSL_EMAIL/g" .env.production
        sed -i "s|/opt/coworking|$PROJECT_DIR|g" .env.production
        print_status "–î–æ–º–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $DOMAIN_NAME"
        print_status "Email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $SSL_EMAIL"
    else
        print_warning "–î–æ–º–µ–Ω –∏–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env.production –≤—Ä—É—á–Ω—É—é."
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π
    SECRET_KEY=$(openssl rand -hex 32)
    SECRET_JWT_KEY=$(openssl rand -hex 32)
    
    sed -i "s/your-super-secret-key-here/$SECRET_KEY/g" .env.production
    sed -i "s/your-jwt-secret-key-here/$SECRET_JWT_KEY/g" .env.production
    
    print_status "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    print_warning "–í–ê–ñ–ù–û! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env.production —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ:"
    print_warning "- BOT_TOKEN (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)"
    print_warning "- ADMIN_TELEGRAM_ID (—É–∑–Ω–∞–π—Ç–µ —É @userinfobot)" 
    print_warning "- ADMIN_PASSWORD (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å)"
    print_warning "- –î—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏"
else
    print_status "–§–∞–π–ª .env.production —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# 10. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
cat > check-status.sh << 'EOF'
#!/bin/bash
echo "üè• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker-compose -f docker-compose.production.yml --env-file .env.production ps

echo -e "\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"

echo -e "\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (ERROR/CRITICAL):"
docker-compose -f docker-compose.production.yml --env-file .env.production logs --tail=20 | grep -E "(ERROR|CRITICAL)" || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

echo -e "\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"
curl -s -o /dev/null -w "API Health: %{http_code}\n" http://localhost:8000/ || echo "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
curl -s -o /dev/null -w "Frontend: %{http_code}\n" http://localhost/ || echo "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω
if [ -f ".env.production" ]; then
    DOMAIN=$(grep "DOMAIN_NAME=" .env.production | cut -d'=' -f2)
    if [ -n "$DOMAIN" ] && [ "$DOMAIN" != "your-domain.com" ]; then
        echo -e "\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:"
        curl -s -o /dev/null -w "HTTPS Status: %{http_code}\n" https://$DOMAIN || echo "HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        echo "SSL cert expires: $(openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d'=' -f2 || echo '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')"
    fi
fi
EOF

chmod +x check-status.sh

# –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞
cat > backup-system.sh << 'EOF'
#!/bin/bash
BACKUP_DIR="\$PROJECT_DIR/backups"
DATE=$(date +"%Y%m%d_%H%M%S")

mkdir -p $BACKUP_DIR

echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å–∏—Å—Ç–µ–º—ã..."

# –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
cp .env $BACKUP_DIR/env_backup_$DATE

# –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
tar -czf $BACKUP_DIR/data_backup_$DATE.tar.gz \
    data/ logs/ config/ \
    --exclude='*.log' \
    --exclude='logs/app.log.*' 2>/dev/null || true

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
docker-compose -f docker-compose.production.yml --env-file .env.production exec -T web python -c "
import sys
sys.path.append('/app')
try:
    from utils.backup_manager import create_backup
    import asyncio
    asyncio.run(create_backup())
    print('‚úÖ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –ë–î: {e}')
" 2>/dev/null || echo "‚ö†Ô∏è –ë—ç–∫–∞–ø –ë–î –ø—Ä–æ–ø—É—â–µ–Ω (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)"

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find $BACKUP_DIR -name "*_backup_*.tar.gz" -mtime +30 -delete 2>/dev/null || true

echo "‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω: $BACKUP_DIR/data_backup_$DATE.tar.gz"
ls -lh $BACKUP_DIR/data_backup_$DATE.tar.gz 2>/dev/null || true
EOF

chmod +x backup-system.sh

# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
cat > update-system.sh << 'EOF'
#!/bin/bash
echo "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
./backup-system.sh

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.production.yml --env-file .env.production down

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
echo "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
git stash push -m "Pre-update stash $(date)"
git pull origin main
git stash pop || echo "‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
docker-compose -f docker-compose.production.yml --env-file .env.production build --no-cache

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.production.yml --env-file .env.production up -d

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15
./check-status.sh

echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
EOF

chmod +x update-system.sh

# –°–∫—Ä–∏–ø—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
cat > start.sh << 'EOF'
#!/bin/bash
echo "üöÄ –ó–∞–ø—É—Å–∫ Coworking Management System..."
docker-compose -f docker-compose.production.yml --env-file .env.production up -d
echo "‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10
./check-status.sh
EOF

cat > stop.sh << 'EOF'
#!/bin/bash
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Coworking Management System..."
docker-compose -f docker-compose.production.yml --env-file .env.production down
echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
EOF

cat > restart.sh << 'EOF'
#!/bin/bash
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Coworking Management System..."
./stop.sh
sleep 5
./start.sh
EOF

cat > logs.sh << 'EOF'
#!/bin/bash
if [ "$1" = "" ]; then
    echo "üìã –í—Å–µ –ª–æ–≥–∏:"
    docker-compose -f docker-compose.production.yml --env-file .env.production logs -f
else
    echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ $1:"
    docker-compose -f docker-compose.production.yml --env-file .env.production logs -f $1
fi
EOF

chmod +x start.sh stop.sh restart.sh logs.sh

# 11. –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
print_status "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
sudo tee /etc/systemd/system/coworking.service > /dev/null <<EOF
[Unit]
Description=Coworking Management System
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/local/bin/docker-compose -f docker-compose.production.yml --env-file .env.production up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.production.yml --env-file .env.production down
TimeoutStartSec=0
User=$USER
Group=$USER

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable coworking.service

# 12. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
(crontab -l 2>/dev/null | grep -v "backup-system.sh"; echo "0 2 * * * $PROJECT_DIR/backup-system.sh >> $PROJECT_DIR/logs/backup.log 2>&1") | crontab - || true

# 13. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Docker –≥—Ä—É–ø–ø—ã..."
if groups $USER | grep -q docker; then
    print_status "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
else
    print_warning "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –ù–ï –≤ –≥—Ä—É–ø–ø–µ docker. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è!"
fi

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
echo ""
print_status "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
echo "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env.production:"
echo "   nano .env.production"
echo ""
echo "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≤ .env.production:"
echo "   - BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"
echo "   - ADMIN_TELEGRAM_ID=–≤–∞—à_telegram_id"
echo "   - ADMIN_PASSWORD=–Ω–∞–¥–µ–∂–Ω—ã–π_–ø–∞—Ä–æ–ª—å"
echo ""
echo "3. –ü–æ–ª—É—á–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–æ–º–µ–Ω):"
echo "   ./setup-ssl.sh"
echo ""
echo "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:"
echo "   docker-compose -f docker-compose.production.yml --env-file .env.production up -d"
echo ""
echo "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å:"
echo "   ./check-status.sh"
echo ""
echo "üìÅ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   ./start.sh            - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
echo "   ./stop.sh             - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
echo "   ./restart.sh          - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
echo "   ./check-status.sh     - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
echo "   ./logs.sh [service]   - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "   ./backup-system.sh    - —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
echo "   ./update-system.sh    - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
echo ""
print_status "üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞:"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if [ -f ".env.production" ] && grep -q "DOMAIN_NAME=" .env.production; then
    DOMAIN=$(grep "DOMAIN_NAME=" .env.production | cut -d'=' -f2)
    if [ -n "$DOMAIN" ] && [ "$DOMAIN" != "your-domain.com" ]; then
        echo "   Frontend: https://$DOMAIN"
        echo "   API: https://$DOMAIN/api"
        echo "   Docs: https://$DOMAIN/docs"
        echo ""
        print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ./setup-ssl.sh"
    else
        if [ -n "$EXTERNAL_IP" ]; then
            echo "   Frontend: http://$EXTERNAL_IP"
            echo "   API: http://$EXTERNAL_IP:8000"
            echo "   Docs: http://$EXTERNAL_IP:8000/docs"
        else
            echo "   Frontend: http://your_server_ip"
            echo "   API: http://your_server_ip:8000"
            echo "   Docs: http://your_server_ip:8000/docs"
        fi
    fi
else
    if [ -n "$EXTERNAL_IP" ]; then
        echo "   Frontend: http://$EXTERNAL_IP"
        echo "   API: http://$EXTERNAL_IP:8000"
        echo "   Docs: http://$EXTERNAL_IP:8000/docs"
    else
        echo "   Frontend: http://your_server_ip"
        echo "   API: http://your_server_ip:8000"
        echo "   Docs: http://your_server_ip:8000/docs"
    fi
fi
echo ""
print_warning "‚ö†Ô∏è –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker - –ü–ï–†–ï–õ–û–ì–ò–ù–¨–¢–ï–°–¨ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
echo ""
print_status "‚ú® –£–¥–∞—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è!"