#!/bin/bash

# =============================================================================
# –ü–†–û–î–ê–ö–®–ù –ó–ê–ü–£–°–ö —Å SSL –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
# =============================================================================

set -e

echo "üåê –ó–∞–ø—É—Å–∫ Coworking Management System –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –æ—Ç root
if [[ $EUID -eq 0 ]]; then
   echo "‚ùå –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root!"
   echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ docker"
   exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç scripts)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f ".env" ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–æ–∑–¥–∞–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"
    exit 1
fi

# –ß–∏—Ç–∞–µ–º DOMAIN_NAME –∏–∑ .env
DOMAIN_NAME=$(grep "^DOMAIN_NAME=" .env | cut -d'=' -f2 | tr -d '"' | tr -d "'")
if [ -z "$DOMAIN_NAME" ]; then
    echo "‚ùå DOMAIN_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
    echo "–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: DOMAIN_NAME=your-domain.com"
    exit 1
fi

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
export BUILD_TARGET="production"
export ENVIRONMENT="production"
export DEBUG="false"

# URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
export API_BASE_URL_INTERNAL="http://web:8000"
export API_BASE_URL_EXTERNAL="https://$DOMAIN_NAME/api"
export FRONTEND_URL="https://$DOMAIN_NAME"
export CORS_ORIGINS="https://$DOMAIN_NAME"

# –ü–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
export WEB_PORT="8000"
export FRONTEND_HTTP_PORT="80"
export FRONTEND_HTTPS_PORT="443"

# –ü—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ SSL
export PROJECT_DIR="$PROJECT_DIR"
export SSL_CERTS_PATH="/etc/letsencrypt"
export SSL_WEBROOT_PATH="/var/www/certbot"
export DOMAIN_NAME="$DOMAIN_NAME"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
export LOG_LEVEL="INFO"
export LOG_FORMAT="json"
export CACHE_DEFAULT_TTL="600"
export BACKUP_ENABLED="true"

# –†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–±–æ–ª—å—à–µ)
export WEB_MEMORY_LIMIT="1G"
export WEB_MEMORY_RESERVATION="512M"
export REDIS_MAXMEMORY="512mb"
export REDIS_MEMORY_LIMIT="512M"
export REDIS_MEMORY_RESERVATION="256M"

echo "üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–∞:"
echo "  BUILD_TARGET: $BUILD_TARGET"
echo "  DOMAIN_NAME: $DOMAIN_NAME"
echo "  API_BASE_URL: $API_BASE_URL_EXTERNAL"
echo "  FRONTEND_URL: $FRONTEND_URL"
echo "  PROJECT_DIR: $PROJECT_DIR"
echo "  SSL_CERTS: $SSL_CERTS_PATH"
echo ""

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
mkdir -p data avatars ticket_photos newsletter_photos logs config
chmod -R 755 data avatars ticket_photos newsletter_photos logs config

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
if [ ! -d "$SSL_CERTS_PATH/live/$DOMAIN_NAME" ]; then
    echo "‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN_NAME"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: ./setup-ssl.sh"
    echo "–ò–ª–∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–µ–∑ SSL, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ SSL? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫"
        exit 1
    fi
    
    echo "‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –ë–ï–ó SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
    export SSL_CERTS_PATH="/dev/null"
    export SSL_WEBROOT_PATH="/dev/null"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Docker Compose —Å –ø—Ä–æ—Ñ–∏–ª–µ–º production (–≤–∫–ª—é—á–∞–µ—Ç certbot)
echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose --profile production up -d --build

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker-compose ps

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ || echo "FAIL")
if [ "$API_STATUS" = "200" ]; then
    echo "  ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 200)"
else
    echo "  ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $API_STATUS)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend HTTP
FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ || echo "FAIL")
if [ "$FRONTEND_STATUS" = "301" ] || [ "$FRONTEND_STATUS" = "200" ]; then
    echo "  ‚úÖ Frontend HTTP –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $FRONTEND_STATUS)"
else
    echo "  ‚ùå Frontend HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $FRONTEND_STATUS)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS –µ—Å–ª–∏ –µ—Å—Ç—å SSL
if [ -d "$SSL_CERTS_PATH/live/$DOMAIN_NAME" ] && [ "$SSL_CERTS_PATH" != "/dev/null" ]; then
    HTTPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN_NAME/ || echo "FAIL")
    if [ "$HTTPS_STATUS" = "200" ]; then
        echo "  ‚úÖ HTTPS –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $HTTPS_STATUS)"
    else
        echo "  ‚ùå HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $HTTPS_STATUS)"
    fi
fi

echo ""
echo "‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
if [ -d "$SSL_CERTS_PATH/live/$DOMAIN_NAME" ] && [ "$SSL_CERTS_PATH" != "/dev/null" ]; then
    echo "  üîí Frontend:        https://$DOMAIN_NAME"
    echo "  üîí API:             https://$DOMAIN_NAME/api"
    echo "  üîí API Docs:        https://$DOMAIN_NAME/docs"
else
    echo "  üì± Frontend:        http://$DOMAIN_NAME (–∏–ª–∏ http://YOUR_SERVER_IP)"
    echo "  üîß API:             http://$DOMAIN_NAME:8000/api"
    echo "  üìö API Docs:        http://$DOMAIN_NAME:8000/docs"
fi
echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  docker-compose logs -f                    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  docker-compose --profile production ps    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  docker-compose --profile production down  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo "  ./setup-ssl.sh                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL"
echo ""
echo "üè† –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./start-local.sh"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
if [ -d "$SSL_CERTS_PATH/live/$DOMAIN_NAME" ] && [ "$SSL_CERTS_PATH" != "/dev/null" ]; then
    echo ""
    echo "üîí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:"
    CERT_EXPIRY=$(openssl x509 -enddate -noout -in "$SSL_CERTS_PATH/live/$DOMAIN_NAME/cert.pem" 2>/dev/null | cut -d'=' -f2 || echo "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    echo "   –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: $CERT_EXPIRY"
fi