// utils/notifications.js - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

class BrowserNotificationManager {
  constructor() {
    this.permission = Notification.permission;
    this.isEnabled = false;
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermission() {
    if (this.permission === 'granted') {
      this.isEnabled = true;
      return true;
    }

    if (this.permission === 'denied') {
      return false;
    }

    try {
      const permission = await Notification.requestPermission();
      this.permission = permission;
      this.isEnabled = permission === 'granted';
      return this.isEnabled;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞
  playSound(type = 'default') {
    try {
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();

      let frequency = 800; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

      // –†–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
      switch (type) {
        case 'success': frequency = 659; break; // –ú–∏
        case 'warning': frequency = 440; break; // –õ—è
        case 'error': frequency = 349; break;   // –§–∞
        case 'message': frequency = 523; break; // –î–æ
      }

      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      oscillator.frequency.value = frequency;
      oscillator.type = 'sine';

      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);

      oscillator.start();
      oscillator.stop(audioContext.currentTime + 0.2);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(title, options = {}) {
    if (!this.isEnabled || this.permission !== 'granted') {
      return null;
    }

    const defaultOptions = {
      icon: '/static/favicon.ico',
      badge: '/static/apple-touch-icon.png',
      dir: 'auto',
      lang: 'ru',
      requireInteraction: false,
      silent: false,
      ...options
    };

    try {
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω
      if (options.soundType && !defaultOptions.silent) {
        this.playSound(options.soundType);
      }

      const notification = new Notification(title, defaultOptions);

      notification.onclick = (event) => {
        event.preventDefault();
        window.focus();

        if (options.onClick) {
          options.onClick(event);
        }

        notification.close();
      };

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      if (!options.requireInteraction) {
        setTimeout(() => notification.close(), options.autoClose || 5000);
      }

      return notification;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  handleNotification(notificationData) {
    const { message, target_url } = notificationData;

    let title = 'Coworking Admin';
    let soundType = 'default';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (target_url?.includes('/tickets')) {
      title = 'üé´ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ';
      soundType = 'warning';
    } else if (target_url?.includes('/bookings')) {
      title = 'üìÖ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ';
      soundType = 'success';
    } else if (target_url?.includes('/users')) {
      title = 'üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      soundType = 'message';
    }

    return this.showNotification(title, {
      body: message,
      soundType: soundType,
      tag: `notification-${notificationData.id}`
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  getStatus() {
    return {
      permission: this.permission,
      isEnabled: this.isEnabled,
      isSupported: 'Notification' in window
    };
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  disable() {
    this.isEnabled = false;
  }

  enable() {
    if (this.permission === 'granted') {
      this.isEnabled = true;
      return true;
    }
    return false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async init() {
    if (!('Notification' in window)) {
      console.warn('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    const savedSetting = localStorage.getItem('notificationsEnabled');
    if (savedSetting === 'true' && this.permission === 'granted') {
      this.isEnabled = true;
    }

    return true;
  }
}

const notificationManager = new BrowserNotificationManager();

export default notificationManager;