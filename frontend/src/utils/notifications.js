// utils/notifications.js - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

class BrowserNotificationManager {
  constructor() {
    this.permission = Notification.permission;
    this.audioContext = null;
    this.notificationSounds = new Map();
    this.isEnabled = false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (!('Notification' in window)) {
      console.warn('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Service Workers –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if ('serviceWorker' in navigator) {
      try {
        await navigator.serviceWorker.register('/sw.js');
        console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Service Worker:', error);
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–≤—É–∫–æ–≤
    this.initAudioContext();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await this.loadNotificationSounds();

    return true;
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermission() {
    if (this.permission === 'granted') {
      this.isEnabled = true;
      return true;
    }

    if (this.permission === 'denied') {
      return false;
    }

    try {
      const permission = await Notification.requestPermission();
      this.permission = permission;
      this.isEnabled = permission === 'granted';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ localStorage
      localStorage.setItem('notificationsEnabled', this.isEnabled);

      return this.isEnabled;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  initAudioContext() {
    try {
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async loadNotificationSounds() {
    const sounds = {
      default: this.generateNotificationSound(800, 0.1), // –ü—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      success: this.generateNotificationSound([523, 659, 784], 0.15), // –î–æ, –ú–∏, –°–æ–ª—å
      warning: this.generateNotificationSound([440, 440], 0.2), // –õ—è-–õ—è
      error: this.generateNotificationSound([349, 294], 0.25), // –§–∞, –†–µ
      message: this.generateNotificationSound([659, 523], 0.1) // –ú–∏, –î–æ
    };

    for (const [type, audioBuffer] of Object.entries(sounds)) {
      this.notificationSounds.set(type, audioBuffer);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  generateNotificationSound(frequencies, duration = 0.2) {
    if (!this.audioContext) return null;

    const freqArray = Array.isArray(frequencies) ? frequencies : [frequencies];
    const sampleRate = this.audioContext.sampleRate;
    const frameCount = sampleRate * duration;
    const audioBuffer = this.audioContext.createBuffer(1, frameCount, sampleRate);
    const channelData = audioBuffer.getChannelData(0);

    for (let i = 0; i < frameCount; i++) {
      let sample = 0;
      for (const freq of freqArray) {
        sample += Math.sin(2 * Math.PI * freq * i / sampleRate);
      }
      sample /= freqArray.length;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥–∏–±–∞—é—â—É—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞—Ç—É—Ö–∞–Ω–∏—è
      const envelope = Math.max(0, 1 - (i / frameCount));
      channelData[i] = sample * envelope * 0.1; // –£–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    }

    return audioBuffer;
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
  playSound(type = 'default') {
    if (!this.audioContext || !this.notificationSounds.has(type)) return;

    try {
      const source = this.audioContext.createBufferSource();
      const gainNode = this.audioContext.createGain();

      source.buffer = this.notificationSounds.get(type);
      source.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
      gainNode.gain.value = 0.3;

      source.start();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(title, options = {}) {
    if (!this.isEnabled || this.permission !== 'granted') {
      console.warn('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
      return null;
    }

    const defaultOptions = {
      icon: '/static/favicon.ico',
      badge: '/static/apple-touch-icon.png',
      dir: 'auto',
      lang: 'ru',
      renotify: true,
      requireInteraction: false,
      silent: false, // –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é
      timestamp: Date.now(),
      ...options
    };

    try {
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫
      if (options.soundType && !defaultOptions.silent) {
        this.playSound(options.soundType);
      }

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = new Notification(title, defaultOptions);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      notification.onclick = (event) => {
        event.preventDefault();
        window.focus();

        if (options.onClick) {
          options.onClick(event);
        }

        notification.close();
      };

      notification.onerror = (error) => {
        console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      };

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
      if (!options.requireInteraction) {
        setTimeout(() => notification.close(), options.autoClose || 5000);
      }

      return notification;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  handleNotification(notificationData) {
    const { message, target_url, notification_type } = notificationData;

    let title = 'Coworking Admin';
    let soundType = 'default';
    let icon = '/static/favicon.ico';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ URL –∏–ª–∏ —Ç–∏–ø—É
    if (target_url?.includes('/tickets')) {
      title = 'üé´ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ';
      soundType = 'warning';
      icon = '/static/favicon.ico';
    } else if (target_url?.includes('/bookings')) {
      title = 'üìÖ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ';
      soundType = 'success';
      icon = '/static/favicon.ico';
    } else if (target_url?.includes('/users')) {
      title = 'üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      soundType = 'message';
      icon = '/static/favicon.ico';
    }

    return this.showNotification(title, {
      body: message,
      soundType: soundType,
      icon: icon,
      tag: `notification-${notificationData.id}`, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      data: notificationData,
      onClick: () => {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (target_url) {
          const urlParts = target_url.split('/');
          if (urlParts.length > 1) {
            // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–∞—à–∏–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º
            window.location.hash = `#${urlParts[1]}`;
          }
        }
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  getStatus() {
    return {
      permission: this.permission,
      isEnabled: this.isEnabled,
      isSupported: 'Notification' in window,
      hasServiceWorker: 'serviceWorker' in navigator
    };
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  disable() {
    this.isEnabled = false;
    localStorage.setItem('notificationsEnabled', 'false');
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
  enable() {
    if (this.permission === 'granted') {
      this.isEnabled = true;
      localStorage.setItem('notificationsEnabled', 'true');
      return true;
    }
    return false;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const notificationManager = new BrowserNotificationManager();

export default notificationManager;