// components/NotificationPermission.jsx - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π

import React, { useState, useEffect } from 'react';
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  Text,
  VStack,
  HStack,
  Icon,
  useColorModeValue,
  Switch,
  FormControl,
  FormLabel,
  Alert,
  AlertIcon,
  Box
} from '@chakra-ui/react';
import { FiBell, FiBellOff, FiVolume2 } from 'react-icons/fi';
import notificationManager from '../utils/notifications';

const NotificationPermissionModal = ({ isOpen, onClose, onPermissionGranted }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [permissionDenied, setPermissionDenied] = useState(false);

  const handleRequestPermission = async () => {
    setIsLoading(true);
    setPermissionDenied(false);

    try {
      const granted = await notificationManager.requestPermission();

      if (granted) {
        onPermissionGranted?.();
        onClose();
      } else {
        setPermissionDenied(true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
      setPermissionDenied(true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestSound = () => {
    notificationManager.playSound('success');
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} isCentered size="md">
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>
          <HStack>
            <Icon as={FiBell} color="purple.500" />
            <Text>–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
          </HStack>
        </ModalHeader>

        <ModalBody>
          <VStack spacing={4} align="stretch">
            <Text>
              –†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö
              –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö, –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.
            </Text>

            <Box p={4} bg={useColorModeValue('gray.50', 'gray.700')} rounded="md">
              <VStack spacing={3}>
                <Text fontSize="sm" fontWeight="bold">–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</Text>
                <VStack spacing={2} align="start" fontSize="sm">
                  <Text>üé´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö</Text>
                  <Text>üìÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö</Text>
                  <Text>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</Text>
                  <Text>üîä –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</Text>
                </VStack>
              </VStack>
            </Box>

            {permissionDenied && (
              <Alert status="warning" rounded="md">
                <AlertIcon />
                <VStack align="start" spacing={1}>
                  <Text fontSize="sm" fontWeight="bold">
                    –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
                  </Text>
                  <Text fontSize="xs">
                    –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞:
                    –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
                  </Text>
                </VStack>
              </Alert>
            )}

            <HStack justify="center">
              <Button
                size="sm"
                variant="outline"
                leftIcon={<FiVolume2 />}
                onClick={handleTestSound}
              >
                –¢–µ—Å—Ç –∑–≤—É–∫–∞
              </Button>
            </HStack>
          </VStack>
        </ModalBody>

        <ModalFooter>
          <HStack>
            <Button variant="ghost" onClick={onClose}>
              –ù–µ —Å–µ–π—á–∞—Å
            </Button>
            <Button
              colorScheme="purple"
              isLoading={isLoading}
              loadingText="–ó–∞–ø—Ä–æ—Å..."
              onClick={handleRequestPermission}
            >
              –†–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </Button>
          </HStack>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –Ω–∞–≤–±–∞—Ä–µ
export const NotificationSettings = ({ notifications, markNotificationRead, markAllNotificationsRead }) => {
  const [isPermissionModalOpen, setPermissionModalOpen] = useState(false);
  const [notificationStatus, setNotificationStatus] = useState(null);
  const [soundEnabled, setSoundEnabled] = useState(true);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const initNotifications = async () => {
      await notificationManager.init();
      const status = notificationManager.getStatus();
      setNotificationStatus(status);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const hasAsked = localStorage.getItem('notificationPermissionAsked');
      const isEnabled = localStorage.getItem('notificationsEnabled');

      if (!hasAsked && status.isSupported && status.permission === 'default') {
        setTimeout(() => {
          setPermissionModalOpen(true);
          localStorage.setItem('notificationPermissionAsked', 'true');
        }, 3000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      } else if (isEnabled === 'true' && status.permission === 'granted') {
        notificationManager.enable();
      }
    };

    initNotifications();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–≤—É–∫–∞
    const savedSoundSetting = localStorage.getItem('notificationSoundEnabled');
    setSoundEnabled(savedSoundSetting !== 'false');
  }, []);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  useEffect(() => {
    if (!notificationStatus?.isEnabled || !notifications.length) return;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const latestUnread = notifications.find(n => !n.is_read);

    if (latestUnread) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const shownNotifications = JSON.parse(localStorage.getItem('shownNotifications') || '[]');

      if (!shownNotifications.includes(latestUnread.id)) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –∑–≤—É–∫–∏
        if (soundEnabled) {
          notificationManager.handleNotification(latestUnread);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        shownNotifications.push(latestUnread.id);
        localStorage.setItem('shownNotifications', JSON.stringify(shownNotifications.slice(-50))); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
      }
    }
  }, [notifications, notificationStatus, soundEnabled]);

  const handlePermissionGranted = () => {
    const status = notificationManager.getStatus();
    setNotificationStatus(status);
  };

  const handleToggleSound = (enabled) => {
    setSoundEnabled(enabled);
    localStorage.setItem('notificationSoundEnabled', enabled.toString());

    if (enabled) {
      notificationManager.enable();
    } else {
      notificationManager.disable();
    }
  };

  const handleTestNotification = () => {
    if (notificationStatus?.isEnabled) {
      notificationManager.showNotification('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', {
        body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã',
        soundType: 'success',
        autoClose: 3000
      });
    }
  };

  if (!notificationStatus?.isSupported) {
    return null; // –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }

  return (
    <>
      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–µ–Ω—é) */}
      <VStack spacing={2} p={2}>
        <FormControl display="flex" alignItems="center" size="sm">
          <FormLabel htmlFor="sound-notifications" mb="0" fontSize="sm">
            <HStack>
              <Icon as={soundEnabled ? FiVolume2 : FiBellOff} />
              <Text>–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
            </HStack>
          </FormLabel>
          <Switch
            id="sound-notifications"
            isChecked={soundEnabled && notificationStatus?.permission === 'granted'}
            onChange={(e) => handleToggleSound(e.target.checked)}
            isDisabled={notificationStatus?.permission !== 'granted'}
            size="sm"
          />
        </FormControl>

        {notificationStatus?.permission === 'granted' && (
          <Button size="xs" variant="outline" onClick={handleTestNotification}>
            –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </Button>
        )}

        {notificationStatus?.permission === 'denied' && (
          <Text fontSize="xs" color="orange.500" textAlign="center">
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –†–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.
          </Text>
        )}
      </VStack>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π */}
      <NotificationPermissionModal
        isOpen={isPermissionModalOpen}
        onClose={() => setPermissionModalOpen(false)}
        onPermissionGranted={handlePermissionGranted}
      />
    </>
  );
};

export default NotificationPermissionModal;