import asyncio
import os
import time
from pathlib import Path
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from models.models import init_db, create_admin
from config import (
    APP_NAME,
    APP_VERSION,
    DEBUG,
    HOST,
    PORT,
    ADMIN_LOGIN,
    ADMIN_PASSWORD,
    CORS_ORIGINS,
    DATA_DIR,
    AVATARS_DIR,
    TICKET_PHOTOS_DIR,
    NEWSLETTER_PHOTOS_DIR,
)
from dependencies import init_bot, close_bot, start_cache_cleanup, stop_cache_cleanup
from models.models import cleanup_database
from utils.logger import get_logger, log_startup_info
from utils.database_maintenance import start_maintenance_tasks
from utils.backup_manager import start_backup_scheduler, stop_backup_scheduler

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
from routes.auth import router as auth_router
from routes.users import router as users_router
from routes.bookings import router as bookings_router
from routes.tariffs import router as tariffs_router
from routes.promocodes import router as promocodes_router
from routes.tickets import router as tickets_router
from routes.payments import router as payments_router
from routes.notifications import router as notifications_router
from routes.newsletters import router as newsletters_router
from routes.dashboard import router as dashboard_router
from routes.health import router as health_router
from routes.monitoring import router as monitoring_router
from routes.api_keys import router as api_keys_router
from routes.rubitime import router as rubitime_router
from routes.backups import router as backups_router
from routes import admins
from routes.frontend_logs import router as frontend_logs_router
from routes.optimization import router as optimization_router
from routes.cache import router as cache_router
from routes.logging import router as logging_router

logger = get_logger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    log_startup_info()
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ Telegram
    try:
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ Telegram...")
        from utils.telegram_logger import send_startup_notification
        result = await send_startup_notification()
        logger.info(f"üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {result}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {traceback.format_exc()}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        from pathlib import Path
        import json
        import os
        config_file = Path("config") / "logging_config.json"
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file.absolute()}")
        
        if config_file.exists():
            with open(config_file, 'r') as f:
                saved_config = json.load(f)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {list(saved_config.keys())}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            for key, value in saved_config.items():
                old_value = os.getenv(key)
                os.environ[key] = str(value)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {key}: {old_value} -> {value}")
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if 'LOG_LEVEL' in saved_config:
                try:
                    from utils.logger import update_loggers_level
                    new_level = saved_config['LOG_LEVEL'].upper()
                    update_loggers_level(new_level)
                    logger.info(f"üîÑ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_level} –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–≥–µ—Ä–æ–≤: {e}")
        else:
            logger.info("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [DATA_DIR, AVATARS_DIR, TICKET_PHOTOS_DIR, NEWSLETTER_PHOTOS_DIR]

    for directory in directories:
        try:
            directory.mkdir(exist_ok=True, parents=True)
            logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (DatabaseManager –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    try:
        create_admin(ADMIN_LOGIN, ADMIN_PASSWORD)
        logger.info("–ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    try:
        init_bot()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ë–î
    try:
        start_maintenance_tasks()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
    try:
        await start_cache_cleanup()
        logger.info("–ö—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–∞–ø–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        from pathlib import Path
        import json
        import os
        backup_config_file = Path("config") / "backup_config.json"
        logger.info(f"üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ç–∫–∞–ø–æ–≤: {backup_config_file.absolute()}")
        
        if backup_config_file.exists():
            with open(backup_config_file, 'r') as f:
                backup_settings = json.load(f)
            
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ç–∫–∞–ø–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {list(backup_settings.keys())}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            for key, value in backup_settings.items():
                old_value = os.getenv(key)
                os.environ[key] = str(value)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–æ–≤ {key}: {old_value} -> {value}")
            
            logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–∞–ø–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            logger.info("üìÇ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—ç–∫–∞–ø–æ–≤: {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º backup_manager —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    try:
        from utils.backup_manager import backup_manager, DatabaseBackupManager
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        import utils.backup_manager
        utils.backup_manager.backup_manager = DatabaseBackupManager()
        logger.info("üìÇ Backup manager recreated with updated settings")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è backup manager: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
    try:
        await start_backup_scheduler()
        logger.info("üìÇ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ç–∫–∞–ø–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}")

    yield

    # Shutdown
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ Telegram
    try:
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ Telegram...")
        from utils.telegram_logger import send_shutdown_notification
        result = await send_shutdown_notification()
        logger.info(f"üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {result}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {traceback.format_exc()}")

    try:
        await stop_cache_cleanup()
        logger.info("–ö—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ç–∫–∞–ø–æ–≤
    try:
        await stop_backup_scheduler()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ç–∫–∞–ø–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}")

    try:
        await cleanup_database()
        logger.info("Connection pool –æ—á–∏—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ connection pool: {e}")

    try:
        await close_bot()
        logger.info("–ë–æ—Ç –∑–∞–∫—Ä—ã—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title=APP_NAME,
    version=APP_VERSION,
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–æ–º",
    debug=DEBUG,
    lifespan=lifespan,
    docs_url="/docs" if DEBUG else None,  # –¢–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
    redoc_url="/redoc" if DEBUG else None,  # –¢–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
from utils.middleware import (
    RateLimitMiddleware,
    RequestLoggingMiddleware,
    SecurityHeadersMiddleware,
    PerformanceMiddleware,
)

# –ü–æ—Ä—è–¥–æ–∫ middleware –≤–∞–∂–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
app.add_middleware(PerformanceMiddleware, enabled=True)
app.add_middleware(SecurityHeadersMiddleware, enabled=True)
app.add_middleware(RequestLoggingMiddleware, enabled=True)
app.add_middleware(RateLimitMiddleware, enabled=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö middleware)
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=[
        "Authorization",
        "Content-Type",
        "Accept",
        "Origin",
        "X-Requested-With",
        "X-Request-ID",  # –î–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    ],
)


# –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API."""
    return {
        "message": f"{APP_NAME} is running",
        "version": APP_VERSION,
        "status": "healthy",
    }


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
try:
    if AVATARS_DIR.exists():
        app.mount("/avatars", StaticFiles(directory=str(AVATARS_DIR)), name="avatars")
        logger.info("–ê–≤–∞—Ç–∞—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

    if TICKET_PHOTOS_DIR.exists():
        app.mount(
            "/ticket_photos",
            StaticFiles(directory=str(TICKET_PHOTOS_DIR)),
            name="ticket_photos",
        )
        logger.info("–§–æ—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
routers = [
    (auth_router, "auth"),
    (users_router, "users"),
    (bookings_router, "bookings"),
    (tariffs_router, "tariffs"),
    (promocodes_router, "promocodes"),
    (tickets_router, "tickets"),
    (payments_router, "payments"),
    (notifications_router, "notifications"),
    (newsletters_router, "newsletters"),
    (dashboard_router, "dashboard"),
    (health_router, "health"),
    (monitoring_router, "monitoring"),
    (api_keys_router, "api_keys"),
    (backups_router, "backups"),
    (rubitime_router, "rubitime"),
    (admins.router, "admins"),
    (frontend_logs_router, "frontend_logs"),
    (optimization_router, "optimization"),
    (cache_router, "cache"),
    (logging_router, "logging"),
]

for router, name in routers:
    try:
        app.include_router(router)
        logger.debug(f"–†–æ—É—Ç–µ—Ä {name} –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ {name}: {e}")

logger.info("–í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")


# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ auth.py —Ä–æ—É—Ç–µ—Ä


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "main:app",
        host=HOST,
        port=PORT,
        reload=DEBUG,
        log_level="debug" if DEBUG else "info",
    )
