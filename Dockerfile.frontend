# Многоступенчатая сборка для фронтенда
# Этап 1: Сборка фронтенда
FROM node:18-alpine AS builder

WORKDIR /app

# Устанавливаем системные зависимости для Alpine
RUN apk add --no-cache git

# Копируем package.json и package-lock.json
COPY frontend/package.json frontend/package-lock.json ./

# Устанавливаем зависимости (включая dev для сборки)
RUN npm install && npm cache clean --force

# Копируем исходный код
COPY frontend/ ./

# Собираем приложение
RUN npm run build

# Этап 3: Финальный образ с Nginx
FROM nginx:1.29-alpine AS production

# Устанавливаем curl для health checks
RUN apk add --no-cache curl

# Удаляем дефолтную конфигурацию Nginx
RUN rm -rf /usr/share/nginx/html/*

# Копируем собранное приложение
COPY --from=builder /app/dist /usr/share/nginx/html

# Копируем конфигурацию Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Создаем непривилегированного пользователя для Nginx
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Настраиваем права доступа
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Создаем директории для PID файлов
RUN touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Открываем порт
EXPOSE 80

# Переключаемся на непривилегированного пользователя
USER nginx

# Команда запуска
CMD ["nginx", "-g", "daemon off;"]