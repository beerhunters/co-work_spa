# Многоступенчатая сборка для фронтенда
# Этап 1: Сборка фронтенда
FROM node:18-alpine AS builder

WORKDIR /app

# Устанавливаем системные зависимости для Alpine
RUN apk add --no-cache git

# Копируем package.json и package-lock.json
COPY frontend/package.json frontend/package-lock.json ./

# Устанавливаем зависимости (включая dev для сборки)
RUN npm install && npm cache clean --force

# Копируем исходный код
COPY frontend/ ./

# Собираем приложение
RUN npm run build

# Базовый образ для локальной разработки
FROM nginx:1.29-alpine AS development

# Устанавливаем curl для health checks
RUN apk add --no-cache curl

# Удаляем дефолтную конфигурацию Nginx
RUN rm -rf /usr/share/nginx/html/*

# Копируем собранное приложение
COPY --from=builder /app/dist /usr/share/nginx/html

# Копируем локальную конфигурацию Nginx
COPY nginx.local.conf /etc/nginx/conf.d/default.conf

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Открываем порт
EXPOSE 80

# Команда запуска
CMD ["nginx", "-g", "daemon off;"]

# Финальный образ для продакшена
FROM nginx:1.29-alpine AS production

# Устанавливаем curl для health checks и gettext для envsubst
RUN apk add --no-cache curl gettext

# Удаляем дефолтную конфигурацию Nginx
RUN rm -rf /usr/share/nginx/html/* && \
    rm -f /etc/nginx/conf.d/default.conf

# Копируем собранное приложение
COPY --from=builder /app/dist /usr/share/nginx/html

# Копируем продакшенскую конфигурацию как шаблон
COPY nginx.production.conf /etc/nginx/templates/default.conf.template

# Health check для продакшена (проверяем HTTPS если доступен)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Открываем порты
EXPOSE 80 443

# Nginx автоматически обработает шаблоны в /etc/nginx/templates/
CMD ["nginx", "-g", "daemon off;"]