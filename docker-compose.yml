services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
      target: ${BUILD_TARGET:-production}
    environment:
      # Основные настройки
      - DEBUG=${DEBUG:-false}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - ENVIRONMENT=${ENVIRONMENT:-development}

      # Telegram Bot
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - BOT_LINK=${BOT_LINK}
      - INVITE_LINK=${INVITE_LINK}
      - GROUP_ID=${GROUP_ID}
      - FOR_LOGS=${FOR_LOGS}

      # Безопасность
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_JWT=${SECRET_KEY_JWT}
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

      # API
      - API_BASE_URL=http://web:8000

      # Backup настройки
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL_HOURS=${BACKUP_INTERVAL_HOURS:-6}
      - BACKUP_DIR=/app/data/backups
      - COMPRESS_BACKUPS=${COMPRESS_BACKUPS:-true}
      - KEEP_HOURLY_BACKUPS=${KEEP_HOURLY_BACKUPS:-48}
      - KEEP_DAILY_BACKUPS=${KEEP_DAILY_BACKUPS:-30}
      - KEEP_WEEKLY_BACKUPS=${KEEP_WEEKLY_BACKUPS:-12}
      - KEEP_MONTHLY_BACKUPS=${KEEP_MONTHLY_BACKUPS:-6}
      - MAX_BACKUP_SIZE_MB=${MAX_BACKUP_SIZE_MB:-1000}

      # Логирование
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-text}
      - LOG_TO_FILE=${LOG_TO_FILE:-true}

      # Кэширование
      - REDIS_URL=redis://redis:6379/0

      # Внешние URL
      - ADMIN_URL=${ADMIN_URL:-https://t.me/partacoworking}
      - RULES_URL=${RULES_URL:-https://parta-works.ru/main_rules}
    volumes:
      - data_volume:/app/data
      - avatars_volume:/app/avatars
      - ticket_photos_volume:/app/ticket_photos
      - newsletter_photos_volume:/app/newsletter_photos
      - logs_volume:/app/logs
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/app/data/bot_initialized"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    networks:
      - coworking_network

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: ${BUILD_TARGET:-production}
    environment:
      # Основные настройки
      - DEBUG=${DEBUG:-false}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - APP_NAME=${APP_NAME:-Coworking API}
      - APP_VERSION=${APP_VERSION:-1.0.0}

      # Сетевые настройки
      - API_BASE_URL=${API_BASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}

      # Безопасность
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_JWT=${SECRET_KEY_JWT}
      - ACCESS_TOKEN_EXPIRE_HOURS=${ACCESS_TOKEN_EXPIRE_HOURS:-24}
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

      # Telegram Bot
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - BOT_LINK=${BOT_LINK}
      - INVITE_LINK=${INVITE_LINK}
      - GROUP_ID=${GROUP_ID}
      - FOR_LOGS=${FOR_LOGS}

      # Платежные системы
      - YOKASSA_ACCOUNT_ID=${YOKASSA_ACCOUNT_ID}
      - YOKASSA_SECRET_KEY=${YOKASSA_SECRET_KEY}

      # Rubitime
      - RUBITIME_API_KEY=${RUBITIME_API_KEY}
      - RUBITIME_BASE_URL=${RUBITIME_BASE_URL:-https://rubitime.ru/api2/}
      - RUBITIME_BRANCH_ID=${RUBITIME_BRANCH_ID:-12595}
      - RUBITIME_COOPERATOR_ID=${RUBITIME_COOPERATOR_ID:-25786}

      # База данных
      - DB_TIMEOUT=${DB_TIMEOUT:-60}
      - DB_RETRY_ATTEMPTS=${DB_RETRY_ATTEMPTS:-3}
      - DB_RETRY_DELAY=${DB_RETRY_DELAY:-0.1}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-5}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-10}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-3600}

      # Backup настройки
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL_HOURS=${BACKUP_INTERVAL_HOURS:-6}
      - BACKUP_DIR=/app/data/backups
      - COMPRESS_BACKUPS=${COMPRESS_BACKUPS:-true}
      - KEEP_HOURLY_BACKUPS=${KEEP_HOURLY_BACKUPS:-48}
      - KEEP_DAILY_BACKUPS=${KEEP_DAILY_BACKUPS:-30}
      - KEEP_WEEKLY_BACKUPS=${KEEP_WEEKLY_BACKUPS:-12}
      - KEEP_MONTHLY_BACKUPS=${KEEP_MONTHLY_BACKUPS:-6}
      - MAX_BACKUP_SIZE_MB=${MAX_BACKUP_SIZE_MB:-1000}

      # Файлы и лимиты
      - FILE_RETENTION_DAYS=${FILE_RETENTION_DAYS:-30}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-10}
      - NEWSLETTER_MAX_PHOTOS=${NEWSLETTER_MAX_PHOTOS:-10}
      - NEWSLETTER_MAX_FILE_SIZE_MB=${NEWSLETTER_MAX_FILE_SIZE_MB:-20}
      - NEWSLETTER_RATE_LIMIT_DELAY=${NEWSLETTER_RATE_LIMIT_DELAY:-0.05}

      # Логирование
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-text}
      - LOG_TO_FILE=${LOG_TO_FILE:-true}

      # Кэширование
      - REDIS_URL=redis://redis:6379/0
      - CACHE_DEFAULT_TTL=${CACHE_DEFAULT_TTL:-300}
      - CACHE_DASHBOARD_TTL=${CACHE_DASHBOARD_TTL:-60}
      - CACHE_USER_DATA_TTL=${CACHE_USER_DATA_TTL:-600}
      - CACHE_STATIC_DATA_TTL=${CACHE_STATIC_DATA_TTL:-1800}

      # Внешние URL
      - ADMIN_URL=${ADMIN_URL:-https://t.me/partacoworking}
      - RULES_URL=${RULES_URL:-https://parta-works.ru/main_rules}

      # Email (опционально)
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-true}
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - data_volume:/app/data
      - avatars_volume:/app/avatars
      - ticket_photos_volume:/app/ticket_photos
      - newsletter_photos_volume:/app/newsletter_photos
      - logs_volume:/app/logs
    working_dir: /app
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}
    deploy:
      resources:
        limits:
          memory: ${WEB_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${WEB_MEMORY_RESERVATION:-256M}
    networks:
      - coworking_network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    environment:
      - HOST=${HOST:-localhost}
      - API_BASE_URL=${API_BASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
    networks:
      - coworking_network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --maxmemory ${REDIS_MAXMEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - coworking_network
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${REDIS_MEMORY_RESERVATION:-128M}

volumes:
  data_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  avatars_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/avatars
  ticket_photos_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/ticket_photos
  newsletter_photos_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/newsletter_photos
  logs_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
  redis_data:
    driver: local

networks:
  coworking_network:
    driver: bridge