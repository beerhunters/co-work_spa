import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import json
from pathlib import Path

from config import FOR_LOGS, BOT_TOKEN, ENVIRONMENT
from utils.bot_instance import get_bot

# –ö—ç—à –¥–ª—è rate limiting
_last_sent: Dict[str, datetime] = {}
_rate_limit_cache_file = Path("telegram_log_cache.json")

logger = logging.getLogger(__name__)


class TelegramLogHandler(logging.Handler):
    """Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –≤ Telegram"""
    
    def __init__(self, min_level: str = "ERROR", rate_limit_minutes: int = 5):
        super().__init__()
        self.min_level = getattr(logging, min_level.upper())
        self.rate_limit_minutes = rate_limit_minutes
        self.setLevel(self.min_level)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à rate limiting
        self._load_rate_limit_cache()
    
    def emit(self, record):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥-–∑–∞–ø–∏—Å—å –≤ Telegram"""
        try:
            if not self._should_send(record):
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            asyncio.create_task(self._send_log_async(record))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ TelegramLogHandler: {e}")
    
    def _should_send(self, record) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if record.levelno < self.min_level:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not _is_telegram_logging_enabled():
            return False
        
        # Rate limiting
        cache_key = f"{record.module}_{record.funcName}_{record.getMessage()[:50]}"
        
        if cache_key in _last_sent:
            time_diff = datetime.now() - _last_sent[cache_key]
            if time_diff < timedelta(minutes=self.rate_limit_minutes):
                return False
        
        _last_sent[cache_key] = datetime.now()
        self._save_rate_limit_cache()
        
        return True
    
    async def _send_log_async(self, record):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞"""
        try:
            message = self._format_message(record)
            await send_log_message(message, record.levelname)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")
    
    def _format_message(self, record) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
        level_emoji = {
            "ERROR": "üî¥",
            "CRITICAL": "üí•",
            "WARNING": "‚ö†Ô∏è"
        }
        
        emoji = level_emoji.get(record.levelname, "üìù")
        env_text = "üè≠ PROD" if ENVIRONMENT == "production" else "üß™ DEV"
        
        message = f"{emoji} {env_text} [{record.levelname}]\n\n"
        message += f"üìç **–ú–æ–¥—É–ª—å**: {record.module}\n"
        message += f"‚öôÔ∏è **–§—É–Ω–∫—Ü–∏—è**: {record.funcName}\n"
        message += f"üìÑ **–°—Ç—Ä–æ–∫–∞**: {record.lineno}\n"
        message += f"üïê **–í—Ä–µ–º—è**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        message += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ**:\n```\n{record.getMessage()}\n```"
        
        # –î–æ–±–∞–≤–ª—è–µ–º stack trace –¥–ª—è –æ—à–∏–±–æ–∫
        if record.exc_info:
            exc_text = self.format(record)
            if len(exc_text) > 500:
                exc_text = exc_text[:500] + "... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            message += f"\n\nüìã **Stack Trace**:\n```\n{exc_text}\n```"
        
        return message
    
    def _load_rate_limit_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à rate limiting –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if _rate_limit_cache_file.exists():
                with open(_rate_limit_cache_file, 'r') as f:
                    cache_data = json.load(f)
                    for key, timestamp_str in cache_data.items():
                        _last_sent[key] = datetime.fromisoformat(timestamp_str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ rate limiting: {e}")
    
    def _save_rate_limit_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à rate limiting –≤ —Ñ–∞–π–ª"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            cutoff_time = datetime.now() - timedelta(hours=24)
            _last_sent.clear()
            for key, timestamp in list(_last_sent.items()):
                if timestamp < cutoff_time:
                    del _last_sent[key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            cache_data = {
                key: timestamp.isoformat()
                for key, timestamp in _last_sent.items()
            }
            
            with open(_rate_limit_cache_file, 'w') as f:
                json.dump(cache_data, f, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ rate limiting: {e}")


def _is_telegram_logging_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram"""
    telegram_enabled = os.getenv("TELEGRAM_LOGGING_ENABLED", "false").lower() == "true"
    has_for_logs = bool(FOR_LOGS)
    has_bot_token = bool(BOT_TOKEN)
    
    logger.debug(f"Telegram logging check: enabled={telegram_enabled}, for_logs={has_for_logs}, bot_token={has_bot_token}")
    
    return telegram_enabled and has_for_logs and has_bot_token


async def send_log_message(message: str, level: str = "INFO") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤"""
    if not _is_telegram_logging_enabled():
        logger.debug("Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        return False
    
    try:
        bot = get_bot()
        if not bot:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
            return False
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 4000:
            message = message[:4000] + "\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        await bot.send_message(
            chat_id=FOR_LOGS,
            text=message,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        logger.debug(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {level}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")
        return False


async def send_critical_alert(message: str, context: Optional[Dict[str, Any]] = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ Telegram"""
    try:
        env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
        
        alert_message = f"üí• **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê** {env_text}\n\n"
        alert_message += f"üïê **–í—Ä–µ–º—è**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        alert_message += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ**:\n{message}\n"
        
        if context:
            alert_message += f"\nüìã **–ö–æ–Ω—Ç–µ–∫—Å—Ç**:\n```json\n{json.dumps(context, indent=2, ensure_ascii=False)}\n```"
        
        return await send_log_message(alert_message, "CRITICAL")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
        return False


async def send_test_notification(level: str = "TEST", admin_login: str = "admin") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
    try:
        env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        level_config = {
            "TEST": {"emoji": "üß™", "title": "–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï"},
            "DEBUG": {"emoji": "üîç", "title": "DEBUG –°–û–û–ë–©–ï–ù–ò–ï"}, 
            "INFO": {"emoji": "‚ÑπÔ∏è", "title": "–ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï"},
            "WARNING": {"emoji": "‚ö†Ô∏è", "title": "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"},
            "ERROR": {"emoji": "üî¥", "title": "–û–®–ò–ë–ö–ê"},
            "CRITICAL": {"emoji": "üí•", "title": "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê"}
        }
        
        config = level_config.get(level, level_config["TEST"])
        
        message = f"{config['emoji']} **{config['title']}** {env_text}\n\n"
        message += f"üïê **–í—Ä–µ–º—è**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        message += f"üë§ **–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä**: {admin_login}\n"
        message += f"üìä **–°—Ä–µ–¥–∞**: {ENVIRONMENT}\n"
        message += f"üîß **–£—Ä–æ–≤–µ–Ω—å**: {level}\n\n"
        
        if level == "TEST":
            message += "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            message += "üîß –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else:
            message += f"üìù –ü—Ä–∏–º–µ—Ä {level.lower()} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        
        return await send_log_message(message, level)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


async def send_startup_notification() -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if not _is_telegram_logging_enabled():
            logger.warning("Telegram logging disabled - startup notification not sent")
            return False
        
        env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        from config import MOSCOW_TZ
        moscow_time = datetime.now(MOSCOW_TZ)
        
        message = f"üöÄ **–ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø** {env_text}\n\n"
        message += f"üïê **–í—Ä–µ–º—è**: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"
        message += f"üìä **–°—Ä–µ–¥–∞**: {ENVIRONMENT}\n"
        message += f"üìù **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ**: –≤–∫–ª—é—á–µ–Ω–æ\n"
        
        return await send_log_message(message, "INFO")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
        return False


async def send_shutdown_notification() -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if not _is_telegram_logging_enabled():
            logger.warning("Telegram logging disabled - shutdown notification not sent")
            return False
        
        env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        from config import MOSCOW_TZ
        moscow_time = datetime.now(MOSCOW_TZ)
        
        message = f"‚èπÔ∏è **–û–°–¢–ê–ù–û–í–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø** {env_text}\n\n"
        message += f"üïê **–í—Ä–µ–º—è**: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"
        message += f"üìä **–°—Ä–µ–¥–∞**: {ENVIRONMENT}\n"
        
        return await send_log_message(message, "INFO")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        return False


def setup_telegram_logging(
    min_level: str = "ERROR",
    rate_limit_minutes: int = 5
) -> Optional[TelegramLogHandler]:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        if not _is_telegram_logging_enabled():
            logger.info("Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return None
        
        # –°–æ–∑–¥–∞–µ–º handler
        telegram_handler = TelegramLogHandler(
            min_level=min_level,
            rate_limit_minutes=rate_limit_minutes
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ root logger
        root_logger = logging.getLogger()
        root_logger.addHandler(telegram_handler)
        
        logger.info(f"Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (min_level={min_level}, rate_limit={rate_limit_minutes}min)")
        return telegram_handler
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None


def remove_telegram_logging():
    """–£–¥–∞–ª—è–µ—Ç Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        root_logger = logging.getLogger()
        handlers_to_remove = [
            handler for handler in root_logger.handlers
            if isinstance(handler, TelegramLogHandler)
        ]
        
        for handler in handlers_to_remove:
            root_logger.removeHandler(handler)
            
        logger.info("Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
async def update_telegram_logging_config(
    enabled: bool,
    min_level: str = "ERROR",
    rate_limit_minutes: int = 5
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ handlers
        remove_telegram_logging()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["TELEGRAM_LOGGING_ENABLED"] = "true" if enabled else "false"
        
        if enabled:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
            handler = setup_telegram_logging(min_level, rate_limit_minutes)
            if handler:
                logger.info("Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –≤–∫–ª—é—á–µ–Ω–æ")
                return True
        else:
            logger.info("Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
        
    return False