import re
from datetime import datetime
from typing import Optional

from config import MOSCOW_TZ
from utils.logger import get_logger

logger = get_logger(__name__)


def format_phone_for_rubitime(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Rubitime API
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    if not phone:
        return ""

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r"[^0-9]", "", phone)

    if not digits:
        return ""

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if digits.startswith("8") and len(digits) == 11:
        # 8XXXXXXXXXX -> +7XXXXXXXXXX
        digits = "7" + digits[1:]
    elif digits.startswith("7") and len(digits) == 11:
        # 7XXXXXXXXXX -> +7XXXXXXXXXX
        pass
    elif len(digits) == 10:
        # XXXXXXXXXX -> +7XXXXXXXXXX
        digits = "7" + digits
    else:
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
        return ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if len(digits) != 11 or not digits.startswith("7"):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {digits}")
        return ""

    return "+" + digits


def format_booking_notification(user, tariff, booking_data) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞

    Args:
        user: –æ–±—ä–µ–∫—Ç User –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff: –æ–±—ä–µ–∫—Ç Tariff –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞
        booking_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    tariff_emojis = {
        "coworking": "üè¢",
        "meeting": "ü§ù",
        "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è": "ü§ù",
        "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥": "üè¢",
    }

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(user, "full_name"):
        user_name = user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_phone = user.phone or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_username = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        telegram_id = user.telegram_id
    else:
        # –ï—Å–ª–∏ user - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        user_name = user.get("full_name") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_phone = user.get("phone") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_username = (
            f"@{user.get('username')}" if user.get("username") else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        )
        telegram_id = user.get("telegram_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞
    if hasattr(tariff, "name"):
        tariff_name = tariff.name
        tariff_purpose = tariff.purpose or ""
        tariff_price = tariff.price
    else:
        # –ï—Å–ª–∏ tariff - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        tariff_name = tariff.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        tariff_purpose = tariff.get("purpose", "")
        tariff_price = tariff.get("price", 0)

    purpose = tariff_purpose.lower() if tariff_purpose else ""
    tariff_emoji = tariff_emojis.get(purpose, "üìã")

    visit_date = booking_data.get("visit_date")
    visit_time = booking_data.get("visit_time")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if visit_time:
        if hasattr(visit_date, "strftime"):
            date_str = visit_date.strftime("%d.%m.%Y")
        else:
            # –ï—Å–ª–∏ visit_date - —Å—Ç—Ä–æ–∫–∞
            try:
                date_obj = datetime.strptime(str(visit_date), "%Y-%m-%d").date()
                date_str = date_obj.strftime("%d.%m.%Y")
            except:
                date_str = str(visit_date)

        if hasattr(visit_time, "strftime"):
            time_str = visit_time.strftime("%H:%M")
        else:
            # –ï—Å–ª–∏ visit_time - —Å—Ç—Ä–æ–∫–∞
            try:
                time_obj = datetime.strptime(str(visit_time), "%H:%M:%S").time()
                time_str = time_obj.strftime("%H:%M")
            except:
                time_str = str(visit_time)

        datetime_str = f"{date_str} –≤ {time_str}"
    else:
        if hasattr(visit_date, "strftime"):
            date_str = visit_date.strftime("%d.%m.%Y")
        else:
            try:
                date_obj = datetime.strptime(str(visit_date), "%Y-%m-%d").date()
                date_str = date_obj.strftime("%d.%m.%Y")
            except:
                date_str = str(visit_date)
        datetime_str = f"{date_str} (–≤–µ—Å—å –¥–µ–Ω—å)"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    discount_info = ""
    promocode_name = booking_data.get("promocode_name")
    if promocode_name:
        discount = booking_data.get("discount", 0)
        discount_info = f"\nüéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode_name} (-{discount}%)"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    duration_info = ""
    duration = booking_data.get("duration")
    if duration:
        duration_info = f"\n‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration} —á–∞—Å(–æ–≤)"

    # –°—É–º–º–∞
    amount = booking_data.get("amount", 0)

    message = f"""üéØ <b>–ù–û–í–ê–Ø –ë–†–û–ù–¨!</b> {tariff_emoji}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_phone}
üí¨ <b>Telegram:</b> {user_username}
üÜî <b>ID:</b> {telegram_id}

üìã <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}
üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime_str}{duration_info}{discount_info}

üí∞ <b>–°—É–º–º–∞:</b> {amount:.0f} ‚ÇΩ
‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –û–ø–ª–∞—á–µ–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""

    return message


def format_payment_notification(user, booking_data, status="SUCCESS") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    status_emojis = {
        "SUCCESS": "‚úÖ",
        "FAILED": "‚ùå",
        "PENDING": "‚è≥",
        "CANCELLED": "üö´",
    }

    status_emoji = status_emojis.get(status, "‚ùì")

    status_texts = {
        "SUCCESS": "–ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ï–ù",
        "FAILED": "–ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù",
        "PENDING": "–ü–õ–ê–¢–ï–ñ –í –û–ñ–ò–î–ê–ù–ò–ò",
        "CANCELLED": "–ü–õ–ê–¢–ï–ñ –û–¢–ú–ï–ù–ï–ù",
    }

    status_text = status_texts.get(status, "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –°–¢–ê–¢–£–°")

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    visit_date = booking_data.get("visit_date")
    visit_time = booking_data.get("visit_time")

    if visit_date:
        if hasattr(visit_date, "strftime"):
            date_str = visit_date.strftime("%d.%m.%Y")
        else:
            try:
                if isinstance(visit_date, str):
                    date_obj = datetime.strptime(visit_date, "%Y-%m-%d").date()
                    date_str = date_obj.strftime("%d.%m.%Y")
                else:
                    date_str = str(visit_date)
            except:
                date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if visit_time:
        if hasattr(visit_time, "strftime"):
            time_str = f" –≤ {visit_time.strftime('%H:%M')}"
        else:
            try:
                if isinstance(visit_time, str):
                    time_obj = datetime.strptime(visit_time, "%H:%M:%S").time()
                    time_str = f" –≤ {time_obj.strftime('%H:%M')}"
                else:
                    time_str = ""
            except:
                time_str = ""
    else:
        time_str = ""

    full_date_str = date_str + time_str

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    duration = booking_data.get("duration")
    duration_str = f" ({duration}—á)" if duration else ""

    message = f"""üí≥ <b>{status_text}</b> {status_emoji}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.get('full_name') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.get('phone') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üí∞ <b>–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:</b>
‚îú <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ
‚îú <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚îú <b>–î–∞—Ç–∞ –±—Ä–æ–Ω–∏:</b> {full_date_str}{duration_str}
‚îî <b>Payment ID:</b> <code>{booking_data.get('payment_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>

‚è∞ <i>–í—Ä–µ–º—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    return message


def format_user_booking_notification(user, booking_data, confirmed: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    tariff_emojis = {
        "–æ–ø–µ–Ω—Å–ø–µ–π—Å": "üè¢",
        "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è": "üèõ",
        "meeting": "üèõ",
        "openspace": "üè¢",
        "coworking": "üè¢",
    }

    purpose = booking_data.get("tariff_purpose", "").lower()
    tariff_emoji = tariff_emojis.get(purpose, "üìã")

    visit_date = booking_data.get("visit_date")
    visit_time = booking_data.get("visit_time")

    if isinstance(visit_date, str):
        visit_date = datetime.fromisoformat(visit_date).date()

    if visit_time and isinstance(visit_time, str):
        visit_time = datetime.strptime(visit_time, "%H:%M:%S").time()

    if visit_time:
        datetime_str = (
            f"{visit_date.strftime('%d.%m.%Y')} –≤ {visit_time.strftime('%H:%M')}"
        )
    else:
        datetime_str = f"{visit_date.strftime('%d.%m.%Y')} (–≤–µ—Å—å –¥–µ–Ω—å)"

    discount_info = ""
    if booking_data.get("promocode_name"):
        promocode_name = booking_data.get("promocode_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        discount = booking_data.get("discount", 0)
        discount_info = f"\nüéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode_name} (-{discount}%)"

    duration_info = ""
    if booking_data.get("duration"):
        duration_info = f"\n‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {booking_data['duration']} —á–∞—Å(–æ–≤)"

    status_text = "–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if confirmed else "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥"
    status_instruction = (
        "\n\nüí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b> –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        if confirmed
        else "\n\nüí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )

    message = f"""üéâ <b>–í–∞—à–∞ –±—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞!</b> {tariff_emoji}

üìã <b>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏:</b>
‚îú <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚îú <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime_str}{duration_info}
‚îî <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ{discount_info}

üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{status_instruction}

‚è∞ <i>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    return message


def validate_phone_number(phone: str) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    Returns:
        tuple: (is_valid, formatted_phone)
    """
    if not phone:
        return False, ""

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
    cleaned = re.sub(r"[^\d+]", "", phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if re.match(r"^(\+7|8|7)\d{10}$", cleaned):
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +7
        if cleaned.startswith("8"):
            formatted = "+7" + cleaned[1:]
        elif cleaned.startswith("7"):
            formatted = "+" + cleaned
        else:
            formatted = cleaned
        return True, formatted

    return False, phone


def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞."""
    if not email:
        return False

    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return bool(re.match(pattern, email.strip().lower()))


def format_datetime_moscow(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."""
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=MOSCOW_TZ)
    else:
        dt = dt.astimezone(MOSCOW_TZ)

    return dt.strftime("%d.%m.%Y %H:%M:%S")


def parse_duration_string(duration_str: str) -> Optional[int]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å—ã."""
    if not duration_str:
        return None

    # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    numbers = re.findall(r"\d+", duration_str)
    if numbers:
        return int(numbers[0])

    return None


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    if not text:
        return ""

    if len(text) <= max_length:
        return text

    return text[: max_length - len(suffix)] + suffix


def safe_int(value, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int."""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default


def safe_float(value, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float."""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default
