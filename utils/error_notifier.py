"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è Telegram
"""

import asyncio
import hashlib
import json
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import traceback

from config import FOR_LOGS, BOT_TOKEN, ENVIRONMENT, MOSCOW_TZ
from utils.bot_instance import get_bot

logger = logging.getLogger(__name__)

class ErrorNotifier:
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    
    def __init__(self):
        self._sent_errors: Dict[str, datetime] = {}  # –•—ç—à -> –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self._block_duration = 300  # 5 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
        self._lock = asyncio.Lock()  # –î–ª—è thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π
        
    def _is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return (
            os.getenv("TELEGRAM_LOGGING_ENABLED", "false").lower() == "true" and
            bool(FOR_LOGS) and
            bool(BOT_TOKEN)
        )
    
    def _create_error_hash(self, error_type: str, message: str, module: str, function: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è –æ—à–∏–±–∫–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏, –º–æ–¥—É–ª—å –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ù–ï –≤–∫–ª—é—á–∞–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ö–æ–∂–∏–µ –æ—à–∏–±–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–ª–∏—Å—å
        content = f"{error_type}:{module}:{function}"
        return hashlib.md5(content.encode()).hexdigest()[:8]
    
    def _should_send_notification(self, error_hash: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        now = datetime.now()
        
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ
        if error_hash not in self._sent_errors:
            self._sent_errors[error_hash] = now
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        last_sent = self._sent_errors[error_hash]
        if (now - last_sent).total_seconds() > self._block_duration:
            self._sent_errors[error_hash] = now
            return True
        
        logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ö—ç—à–∞ {error_hash}")
        return False
    
    def _format_message(self, 
                       error_type: str,
                       message: str,
                       module: str,
                       function: str,
                       line_number: int,
                       stack_trace: Optional[str] = None,
                       context: Optional[Dict[str, Any]] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        level_emoji = {
            "ERROR": "üî¥",
            "CRITICAL": "üí•", 
            "WARNING": "‚ö†Ô∏è"
        }
        
        emoji = level_emoji.get("ERROR", "üî¥")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ERROR
        env_text = "üè≠ PROD" if ENVIRONMENT == "production" else "üß™ DEV"
        
        moscow_time = datetime.now(MOSCOW_TZ)
        
        message_text = f"{emoji} {env_text} ERROR\n\n"
        message_text += f"üìç <b>–ú–æ–¥—É–ª—å:</b> {module}\n"
        message_text += f"‚öôÔ∏è <b>–§—É–Ω–∫—Ü–∏—è:</b> {function}\n"
        message_text += f"üìÑ <b>–°—Ç—Ä–æ–∫–∞:</b> {line_number}\n"
        message_text += f"üïê <b>–í—Ä–µ–º—è:</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if error_type == "ZeroDivisionError":
            message_text += "üßÆ <b>–¢–∏–ø:</b> –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n"
            message_text += "‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å\n"
        elif "TelegramNetworkError" in error_type or "ConnectionError" in error_type:
            message_text += "üåê <b>–¢–∏–ø:</b> –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞\n"
            message_text += "üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
        elif "bot handler" in message.lower():
            message_text += "ü§ñ <b>–¢–∏–ø:</b> Bot handler –æ—à–∏–±–∫–∞\n"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "callback_query" in message:
                message_text += "üì® <b>–°–æ–±—ã—Ç–∏–µ:</b> callback_query\n"
            elif "message" in message:
                message_text += "üì® <b>–°–æ–±—ã—Ç–∏–µ:</b> message\n"
        elif "frontend" in message.lower():
            message_text += "üñ•Ô∏è <b>–¢–∏–ø:</b> Frontend –æ—à–∏–±–∫–∞\n"
        else:
            message_text += f"‚ö° <b>–¢–∏–ø:</b> {error_type}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            if "user_id" in context:
                message_text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {context['user_id']}\n"
            if "event_type" in context:
                message_text += f"üì® <b>–°–æ–±—ã—Ç–∏–µ:</b> {context['event_type']}\n"
        
        message_text += f"\nüí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<code>{message}</code>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º stack trace –µ—Å–ª–∏ –µ—Å—Ç—å
        if stack_trace:
            if len(stack_trace) > 800:
                stack_trace = stack_trace[:800] + "... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            message_text += f"\n\nüìã <b>Traceback:</b>\n<code>{stack_trace}</code>"
        
        return message_text
    
    async def send_error_notification(self,
                                    error_type: str,
                                    message: str,
                                    module: str = "unknown",
                                    function: str = "unknown", 
                                    line_number: int = 0,
                                    stack_trace: Optional[str] = None,
                                    context: Optional[Dict[str, Any]] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram (–ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        """
        if not self._is_enabled():
            logger.debug("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
        
        async with self._lock:
            # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            error_hash = self._create_error_hash(error_type, message, module, function)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            if not self._should_send_notification(error_hash):
                return False
            
            try:
                bot = get_bot()
                if not bot:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                    return False
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                telegram_message = self._format_message(
                    error_type=error_type,
                    message=message,
                    module=module,
                    function=function,
                    line_number=line_number,
                    stack_trace=stack_trace,
                    context=context
                )
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                if len(telegram_message) > 4000:
                    telegram_message = telegram_message[:4000] + "\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                await bot.send_message(
                    chat_id=FOR_LOGS,
                    text=telegram_message,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—ç—à–∞ {error_hash}")
                return True
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                return False

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_error_notifier = ErrorNotifier()

def notify_error(exc_info: tuple = None, 
                message: str = None,
                context: Dict[str, Any] = None) -> None:
    """
    –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    
    Args:
        exc_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ sys.exc_info()
        message: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (user_id, event_type –∏ —Ç.–¥.)
    """
    try:
        if exc_info:
            error_type = exc_info[1].__class__.__name__
            error_message = str(exc_info[1])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –æ—à–∏–±–∫–∏
            tb = exc_info[2]
            frame = tb.tb_frame
            module_name = frame.f_globals.get('__name__', 'unknown')
            function_name = frame.f_code.co_name
            line_number = tb.tb_lineno
            
            # –ü–æ–ª—É—á–∞–µ–º stack trace
            stack_trace = ''.join(traceback.format_exception(*exc_info))
            
        else:
            error_type = "MANUAL"
            error_message = message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            module_name = "manual"
            function_name = "manual"
            line_number = 0
            stack_trace = None
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if message and exc_info:
            error_message = f"{message}: {error_message}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        asyncio.create_task(_error_notifier.send_error_notification(
            error_type=error_type,
            message=error_message,
            module=module_name,
            function=function_name,
            line_number=line_number,
            stack_trace=stack_trace,
            context=context
        ))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_error: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
_startup_notification_sent = False

async def send_startup_notification() -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)"""
    global _startup_notification_sent
    
    # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if _startup_notification_sent:
        logger.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    
    if not _error_notifier._is_enabled():
        return False
    
    try:
        bot = get_bot()
        if not bot:
            return False
        
        env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
        moscow_time = datetime.now(MOSCOW_TZ)
        
        message = f"üöÄ <b>–ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø</b> {env_text}\n\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"
        message += f"üìä <b>–°—Ä–µ–¥–∞:</b> {ENVIRONMENT}\n"
        message += f"üìù <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –≤–∫–ª—é—á–µ–Ω—ã\n"
        
        await bot.send_message(
            chat_id=FOR_LOGS,
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        _startup_notification_sent = True
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
        return False

async def send_shutdown_notification() -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if not _error_notifier._is_enabled():
        return False
    
    try:
        bot = get_bot()
        if not bot:
            return False
        
        env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
        moscow_time = datetime.now(MOSCOW_TZ)
        
        message = f"‚èπÔ∏è <b>–û–°–¢–ê–ù–û–í–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø</b> {env_text}\n\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"
        message += f"üìä <b>–°—Ä–µ–¥–∞:</b> {ENVIRONMENT}\n"
        
        await bot.send_message(
            chat_id=FOR_LOGS,
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        return False

async def send_test_notification(level: str = "TEST") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    return await _error_notifier.send_error_notification(
        error_type="TEST",
        message=f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {level}",
        module="test",
        function="send_test_notification",
        line_number=1,
        context={"test": True}
    )