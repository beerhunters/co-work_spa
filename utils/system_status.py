"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
"""

import asyncio
import json
import os
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
from config import ENVIRONMENT, MOSCOW_TZ, FOR_LOGS, BOT_TOKEN
from utils.bot_instance import get_bot

logger = logging.getLogger(__name__)

class SystemStatusManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if os.path.exists("/app/data"):
            # –ü—Ä–æ–¥–∞–∫—à–Ω/Docker –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            self.status_file = Path("/app/data/system_status.json")
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            base_dir = Path(__file__).parent.parent
            data_dir = base_dir / "data"
            data_dir.mkdir(exist_ok=True)
            self.status_file = data_dir / "system_status.json"
            
        self.components = ["web", "bot"]  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.startup_timeout = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
    def _load_status(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not self.status_file.exists():
            return {
                "startup_time": datetime.now().isoformat(),
                "components": {},
                "notification_sent": False,
                "all_ready": False
            }
        
        try:
            with open(self.status_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "startup_time": datetime.now().isoformat(),
                "components": {},
                "notification_sent": False,
                "all_ready": False
            }
    
    def _save_status(self, status: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.status_file.parent.mkdir(parents=True, exist_ok=True)
            
            with open(self.status_file, 'w', encoding='utf-8') as f:
                json.dump(status, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def register_component_ready(self, component_name: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        status = self._load_status()
        
        status["components"][component_name] = {
            "ready": True,
            "timestamp": datetime.now().isoformat(),
            "pid": os.getpid()
        }
        
        logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π")
        self._save_status(status)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        asyncio.create_task(self._check_and_notify_if_all_ready())
    
    def _is_telegram_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return (
            os.getenv("TELEGRAM_LOGGING_ENABLED", "false").lower() == "true" and
            bool(FOR_LOGS) and
            bool(BOT_TOKEN)
        )
    
    async def _check_and_notify_if_all_ready(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        status = self._load_status()
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
        if status.get("notification_sent", False):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        ready_components = []
        for component in self.components:
            if component in status["components"] and status["components"][component].get("ready", False):
                ready_components.append(component)
        
        logger.info(f"–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {ready_components} –∏–∑ {self.components}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
        if len(ready_components) == len(self.components):
            await self._send_system_ready_notification(status, ready_components)
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            status["notification_sent"] = True
            status["all_ready"] = True
            status["ready_time"] = datetime.now().isoformat()
            self._save_status(status)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        elif self._is_startup_timeout(status):
            await self._send_partial_ready_notification(status, ready_components)
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
            status["notification_sent"] = True
            self._save_status(status)
    
    def _is_startup_timeout(self, status: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞"""
        startup_time = datetime.fromisoformat(status["startup_time"])
        return (datetime.now() - startup_time).total_seconds() > self.startup_timeout
    
    async def _send_system_ready_notification(self, status: Dict, ready_components: List[str]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        if not self._is_telegram_enabled():
            return
        
        try:
            bot = get_bot()
            if not bot:
                return
            
            env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
            moscow_time = datetime.now(MOSCOW_TZ)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
            startup_time = datetime.fromisoformat(status["startup_time"])
            startup_duration = datetime.now() - startup_time
            
            message = f"‚úÖ <b>–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï</b> {env_text}\n\n"
            message += f"üïê <b>–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"
            message += f"‚è±Ô∏è <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {int(startup_duration.total_seconds())} —Å–µ–∫\n"
            message += f"üìä <b>–°—Ä–µ–¥–∞:</b> {ENVIRONMENT}\n\n"
            
            message += f"üü¢ <b>–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n"
            for component in ready_components:
                comp_data = status["components"][component]
                comp_time = datetime.fromisoformat(comp_data["timestamp"])
                comp_duration = comp_time - startup_time
                
                if component == "web":
                    icon = "üåê"
                    name = "Web API"
                elif component == "bot":
                    icon = "ü§ñ"
                    name = "Telegram Bot"
                else:
                    icon = "‚öôÔ∏è"
                    name = component.title()
                
                message += f"  {icon} {name} ({int(comp_duration.total_seconds())}s)\n"
            
            message += f"\nüìù <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –≤–∫–ª—é—á–µ–Ω—ã"
            
            await bot.send_message(
                chat_id=FOR_LOGS,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def _send_partial_ready_notification(self, status: Dict, ready_components: List[str]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Å—Ç–∏—á–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–ø–æ —Ç–∞–π–º–∞—É—Ç—É)"""
        if not self._is_telegram_enabled():
            return
        
        try:
            bot = get_bot()
            if not bot:
                return
            
            env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
            moscow_time = datetime.now(MOSCOW_TZ)
            
            not_ready = [c for c in self.components if c not in ready_components]
            
            message = f"‚ö†Ô∏è <b>–ß–ê–°–¢–ò–ß–ù–´–ô –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´</b> {env_text}\n\n"
            message += f"üïê <b>–í—Ä–µ–º—è:</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"
            message += f"üìä <b>–°—Ä–µ–¥–∞:</b> {ENVIRONMENT}\n\n"
            
            if ready_components:
                message += f"‚úÖ <b>–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n"
                for component in ready_components:
                    icon = "üåê" if component == "web" else "ü§ñ" if component == "bot" else "‚öôÔ∏è"
                    name = "Web API" if component == "web" else "Telegram Bot" if component == "bot" else component.title()
                    message += f"  {icon} {name}\n"
            
            if not_ready:
                message += f"\n‚ùå <b>–ù–µ –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n"
                for component in not_ready:
                    icon = "üåê" if component == "web" else "ü§ñ" if component == "bot" else "‚öôÔ∏è"
                    name = "Web API" if component == "web" else "Telegram Bot" if component == "bot" else component.title()
                    message += f"  {icon} {name}\n"
            
            message += f"\n‚è∞ <b>–¢–∞–π–º–∞—É—Ç:</b> {self.startup_timeout}s"
            
            await bot.send_message(
                chat_id=FOR_LOGS,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            logger.warning("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Å—Ç–∏—á–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á–∞—Å—Ç–∏—á–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
    
    def cleanup_old_status(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        if self.status_file.exists():
            try:
                self.status_file.unlink()
                logger.info("–û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_system_manager = SystemStatusManager()

def register_component_startup(component_name: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
    _system_manager.register_component_ready(component_name)

def cleanup_system_status():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"""
    _system_manager.cleanup_old_status()

async def send_system_shutdown_notification() -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
    if not _system_manager._is_telegram_enabled():
        return False
    
    try:
        bot = get_bot()
        if not bot:
            return False
        
        env_text = "üè≠ PRODUCTION" if ENVIRONMENT == "production" else "üß™ DEVELOPMENT"
        moscow_time = datetime.now(MOSCOW_TZ)
        
        message = f"‚èπÔ∏è <b>–û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´</b> {env_text}\n\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"
        message += f"üìä <b>–°—Ä–µ–¥–∞:</b> {ENVIRONMENT}\n"
        
        await bot.send_message(
            chat_id=FOR_LOGS,
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        _system_manager.cleanup_old_status()
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False