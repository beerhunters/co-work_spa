# Production версия docker-compose с оптимизированными настройками
version: '3.8'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
      target: production
    environment:
      # Основные настройки
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000

      # Telegram Bot
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - BOT_LINK=${BOT_LINK}
      - INVITE_LINK=${INVITE_LINK}
      - GROUP_ID=${GROUP_ID}
      - FOR_LOGS=${FOR_LOGS}

      # Безопасность
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_JWT=${SECRET_KEY_JWT}
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

      # API
      - API_BASE_URL=http://web:8000

      # Логирование
      - LOG_LEVEL=INFO

      # Внешние URL
      - ADMIN_URL=${ADMIN_URL:-https://t.me/partacoworking}
      - RULES_URL=${RULES_URL:-https://parta-works.ru/main_rules}
    volumes:
      - data_volume:/app/data
      - avatars_volume:/app/avatars
      - ticket_photos_volume:/app/ticket_photos
      - newsletter_photos_volume:/app/newsletter_photos
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/app/data/bot_initialized"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - coworking_network

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: production
    environment:
      # Основные настройки
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - APP_NAME=Coworking API
      - APP_VERSION=1.0.0

      # Сетевые настройки
      - API_BASE_URL=${API_BASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}

      # Безопасность
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_JWT=${SECRET_KEY_JWT}
      - ACCESS_TOKEN_EXPIRE_HOURS=24
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

      # Telegram Bot
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - BOT_LINK=${BOT_LINK}
      - INVITE_LINK=${INVITE_LINK}
      - GROUP_ID=${GROUP_ID}
      - FOR_LOGS=${FOR_LOGS}

      # Платежные системы
      - YOKASSA_ACCOUNT_ID=${YOKASSA_ACCOUNT_ID}
      - YOKASSA_SECRET_KEY=${YOKASSA_SECRET_KEY}

      # Rubitime
      - RUBITIME_API_KEY=${RUBITIME_API_KEY}
      - RUBITIME_BASE_URL=${RUBITIME_BASE_URL:-https://rubitime.ru/api2/}
      - RUBITIME_BRANCH_ID=${RUBITIME_BRANCH_ID:-12595}
      - RUBITIME_COOPERATOR_ID=${RUBITIME_COOPERATOR_ID:-25786}

      # База данных
      - DB_TIMEOUT=60
      - DB_RETRY_ATTEMPTS=3
      - DB_RETRY_DELAY=0.1
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_POOL_TIMEOUT=60
      - DB_POOL_RECYCLE=3600

      # Файлы и лимиты
      - FILE_RETENTION_DAYS=30
      - MAX_FILE_SIZE_MB=10
      - NEWSLETTER_MAX_PHOTOS=10
      - NEWSLETTER_MAX_FILE_SIZE_MB=20
      - NEWSLETTER_RATE_LIMIT_DELAY=0.05

      # Логирование
      - LOG_LEVEL=INFO

      # Внешние URL
      - ADMIN_URL=${ADMIN_URL:-https://t.me/partacoworking}
      - RULES_URL=${RULES_URL:-https://parta-works.ru/main_rules}

      # Email (опционально)
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-true}
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - data_volume:/app/data
      - avatars_volume:/app/avatars
      - ticket_photos_volume:/app/ticket_photos
      - newsletter_photos_volume:/app/newsletter_photos
    working_dir: /app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - coworking_network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    environment:
      - HOST=0.0.0.0
      - API_BASE_URL=${API_BASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=INFO
    ports:
      - "80:80"
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
    networks:
      - coworking_network

volumes:
  data_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  avatars_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/avatars
  ticket_photos_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/ticket_photos
  newsletter_photos_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/newsletter_photos

networks:
  coworking_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16