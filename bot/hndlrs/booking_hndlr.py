import asyncio
import os
import re
from datetime import datetime, date, timedelta
from typing import Optional

import pytz
from aiogram import Router, Bot, Dispatcher, F
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from dotenv import load_dotenv
from yookassa import Payment, Refund

from bot.config import (
    create_payment,
    rubitime,
    check_payment_status,
    create_user_keyboard,
    create_back_keyboard,
)
from models.models import (
    get_active_tariffs,
    create_booking,
    User,
    get_user_by_telegram_id,
    get_promocode_by_name,
    Promocode,
    format_booking_notification,
    Tariff,
)

from utils.logger import get_logger

# –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
load_dotenv()

router = Router()
MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
logger = get_logger(__name__)


class Booking(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""

    SELECT_TARIFF = State()
    ENTER_DATE = State()
    ENTER_TIME = State()
    ENTER_DURATION = State()
    ENTER_PROMOCODE = State()
    PAYMENT = State()
    STATUS_PAYMENT = State()


def format_payment_notification(user, booking_data, status="SUCCESS"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–∞.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        booking_data: –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–ª–æ–≤–∞—Ä—å —Å tariff_name, visit_date, amount, payment_id).
        status: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ("SUCCESS", "FAILED", "PENDING", "CANCELLED").

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    status_emojis = {
        "SUCCESS": "‚úÖ",
        "FAILED": "‚ùå",
        "PENDING": "‚è≥",
        "CANCELLED": "üö´",
    }

    status_emoji = status_emojis.get(status, "‚ùì")
    status_texts = {
        "SUCCESS": "–£–°–ü–ï–®–ù–û –û–ü–õ–ê–ß–ï–ù–û",
        "FAILED": "–û–®–ò–ë–ö–ê –û–ü–õ–ê–¢–´",
        "PENDING": "–û–ñ–ò–î–ê–ï–¢ –û–ü–õ–ê–¢–´",
        "CANCELLED": "–û–ü–õ–ê–¢–ê –û–¢–ú–ï–ù–ï–ù–ê",
    }
    status_text = status_texts.get(status, "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –°–¢–ê–¢–£–°")

    message = f"""üí≥ <b>{status_text}</b> {status_emoji}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üí∞ <b>–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:</b>
‚îú <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ
‚îú <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚îú <b>–î–∞—Ç–∞ –±—Ä–æ–Ω–∏:</b> {booking_data.get('visit_date', '').strftime('%d.%m.%Y') if booking_data.get('visit_date') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚îî <b>Payment ID:</b> <code>{booking_data.get('payment_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>

‚è∞ <i>–í—Ä–µ–º—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    return message.strip()


def format_user_booking_notification(user, booking_data, confirmed: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        booking_data: –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–ª–æ–≤–∞—Ä—å —Å tariff_name, tariff_purpose, visit_date, visit_time, duration, amount, discount, promocode_name).
        confirmed: –§–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ (True –¥–ª—è "–û–ø–µ–Ω—Å–ø–µ–π—Å", False –¥–ª—è "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π").

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    tariff_emojis = {
        "meeting": "ü§ù",
        "workspace": "üíº",
        "event": "üéâ",
        "office": "üè¢",
        "coworking": "üíª",
    }

    purpose = booking_data.get("tariff_purpose", "").lower()
    tariff_emoji = tariff_emojis.get(purpose, "üìã")
    visit_date = booking_data.get("visit_date")
    visit_time = booking_data.get("visit_time")

    if visit_time:
        datetime_str = (
            f"{visit_date.strftime('%d.%m.%Y')} –≤ {visit_time.strftime('%H:%M')}"
        )
    else:
        datetime_str = f"{visit_date.strftime('%d.%m.%Y')} (–≤–µ—Å—å –¥–µ–Ω—å)"

    discount_info = ""
    if booking_data.get("discount", 0) > 0:
        promocode_name = booking_data.get("promocode_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        discount = booking_data.get("discount", 0)
        discount_info = (
            f"\nüí∞ <b>–°–∫–∏–¥–∫–∞:</b> {discount}% (–ø—Ä–æ–º–æ–∫–æ–¥: <code>{promocode_name}</code>)"
        )

    duration_info = ""
    if booking_data.get("duration"):
        duration_info = f"\n‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {booking_data['duration']} —á–∞—Å(–æ–≤)"

    status_text = "–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if confirmed else "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥"
    status_instruction = (
        "" if confirmed else "\nüì© –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏."
    )

    message = f"""üéâ <b>–í–∞—à–∞ –±—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞!</b> {tariff_emoji}

üìã <b>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏:</b>
‚îú <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚îú <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime_str}{duration_info}
‚îî <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ{discount_info}

üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{status_instruction}

‚è∞ <i>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    return message.strip()


def create_tariff_keyboard(telegram_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏, –∏—Å–∫–ª—é—á–∞—è '–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏.

    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    try:
        user = get_user_by_telegram_id(telegram_id)
        successful_bookings = user.successful_bookings
        tariffs = get_active_tariffs()
        buttons = []
        for tariff in tariffs:
            if tariff.service_id == 47890 and successful_bookings > 0:
                continue
            buttons.append(
                [
                    InlineKeyboardButton(
                        text=f"{tariff.name} ({tariff.price} {'‚ÇΩ/—á' if tariff.purpose == '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è' else '‚ÇΩ'})",
                        callback_data=f"tariff_{tariff.id}",
                    )
                ]
            )
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏")
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∞—Ä–∏—Ñ–æ–≤: {str(e)}")
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
        )


def create_date_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ (—Å–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π).

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    today = datetime.now(MOSCOW_TZ).date()
    buttons = []
    for i in range(8):  # –°–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π
        date = today + timedelta(days=i)
        buttons.append(
            [
                InlineKeyboardButton(
                    text=date.strftime("%d.%m.%Y"),
                    callback_data=f"date_{date.strftime('%Y-%m-%d')}",
                )
            ]
        )
    buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏")
    return keyboard


def create_payment_keyboard(
    confirmation_url: str, amount: float
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã.

    Args:
        confirmation_url: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa.
        amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã.
    """
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã, —Å—É–º–º–∞: {amount}")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount:.2f} ‚ÇΩ", url=confirmation_url
                ),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_payment"),
            ]
        ]
    )
    return keyboard


@router.callback_query(F.data == "booking")
async def start_booking(
    callback_query: CallbackQuery, state: FSMContext, bot: Bot
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    tariffs = get_active_tariffs()
    if not tariffs:
        await callback_query.message.edit_text(
            # await callback_query.message.answer(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=create_back_keyboard(),
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, "
            f"–Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"
        )
        # try:
        #     await callback_query.message.delete()
        # except TelegramBadRequest as e:
        #     logger.warning(
        #         f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}: {str(e)}"
        #     )
        await callback_query.answer()
        return

    await state.set_state(Booking.SELECT_TARIFF)
    await callback_query.message.edit_text(
        # await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=create_tariff_keyboard(callback_query.from_user.id),
    )
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    # try:
    #     await callback_query.message.delete()
    # except TelegramBadRequest as e:
    #     logger.warning(
    #         f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}: {str(e)}"
    #     )
    await callback_query.answer()


@router.callback_query(Booking.SELECT_TARIFF, F.data.startswith("tariff_"))
async def process_tariff_selection(
    callback_query: CallbackQuery, state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    tariff_id = int(callback_query.data.split("_")[1])
    tariffs = get_active_tariffs()
    tariff = next((t for t in tariffs if t.id == tariff_id), None)
    if not tariff:
        await callback_query.message.edit_text(
            text="–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_tariff_keyboard(callback_query.from_user.id),
        )
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ: {tariff_id}"
        )
        await callback_query.answer()
        return

    await state.update_data(
        tariff_id=tariff.id,
        tariff_name=tariff.name,
        tariff_purpose=tariff.purpose.lower(),
        tariff_service_id=tariff.service_id,
        tariff_price=tariff.price,
    )
    await state.set_state(Booking.ENTER_DATE)
    await callback_query.message.edit_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {tariff.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–∏–∑–∏—Ç–∞:",
        reply_markup=create_date_keyboard(),
    )
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ {tariff.name}"
    )
    await callback_query.answer()


@router.callback_query(Booking.ENTER_DATE, F.data.startswith("date_"))
async def process_date_selection(
    callback_query: CallbackQuery, state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        visit_date = datetime.strptime(
            callback_query.data.split("_")[1], "%Y-%m-%d"
        ).date()
        today = datetime.now(MOSCOW_TZ).date()
        if visit_date < today:
            await callback_query.message.edit_text(
                text="–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=create_date_keyboard(),
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É: {visit_date}"
            )
            await callback_query.answer()
            return

        data = await state.get_data()
        tariff_purpose = data["tariff_purpose"]
        tariff_name = data["tariff_name"]
        await state.update_data(visit_date=visit_date)
        if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è":
            await state.set_state(Booking.ENTER_TIME)
            await callback_query.message.edit_text(
                text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ (—á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                reply_markup=create_back_keyboard(),
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É {visit_date} –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff_name} —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
            )
        else:
            await state.set_state(Booking.ENTER_PROMOCODE)
            await callback_query.message.edit_text(
                text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
                reply_markup=create_back_keyboard(),
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É {visit_date} –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff_name} —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
            )
        await callback_query.answer()
    except ValueError as e:
        await callback_query.message.edit_text(
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=create_date_keyboard(),
        )
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}: {str(e)}"
        )
        await callback_query.answer()


@router.message(Booking.ENTER_DATE)
async def process_date(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π' –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        visit_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        today = datetime.now(MOSCOW_TZ).date()
        if visit_date < today:
            await message.answer(
                text="–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–≥–≥–≥–≥-–º–º-–¥–¥) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
                reply_markup=create_date_keyboard(),
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É: {message.text}"
            )
            return
    except ValueError:
        await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-25) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
            reply_markup=create_date_keyboard(),
        )
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {message.text}"
        )
        return

    data = await state.get_data()
    tariff_purpose = data["tariff_purpose"]
    tariff_name = data["tariff_name"]
    await state.update_data(visit_date=visit_date)
    if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è":
        await state.set_state(Booking.ENTER_TIME)
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ (—á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
            reply_markup=create_back_keyboard(),
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∞—Ç—É {visit_date} –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff_name} —Ç–µ–∫—Å—Ç–æ–º"
        )
    else:
        await state.set_state(Booking.ENTER_PROMOCODE)
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
            reply_markup=create_back_keyboard(),
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∞—Ç—É {visit_date} –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff_name} —Ç–µ–∫—Å—Ç–æ–º"
        )


@router.message(Booking.ENTER_TIME)
async def process_time(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        visit_time = datetime.strptime(message.text, "%H:%M").time()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
            reply_markup=create_back_keyboard(),
        )
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {message.text}"
        )
        return

    await state.update_data(visit_time=visit_time)
    await state.set_state(Booking.ENTER_DURATION)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):",
        reply_markup=create_back_keyboard(),
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –≤—Ä–µ–º—è {visit_time}")


@router.message(Booking.ENTER_DURATION)
async def process_duration(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        duration = int(message.text)
        if duration <= 0:
            await message.answer(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=create_back_keyboard(),
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {message.text}"
            )
            return
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):",
            reply_markup=create_back_keyboard(),
        )
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {message.text}"
        )
        return

    await state.update_data(duration=duration)
    await state.set_state(Booking.ENTER_PROMOCODE)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=create_back_keyboard(),
    )
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —á"
    )


@router.message(Booking.ENTER_PROMOCODE)
async def process_promocode(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ –µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞. –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –∏–ª–∏ –±—Ä–æ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    data = await state.get_data()
    tariff_purpose = data["tariff_purpose"]
    tariff_name = data["tariff_name"]
    tariff_price = data["tariff_price"]
    promocode_id: Optional[int] = None
    promocode_name: Optional[str] = None
    discount: float = 0

    if message.text != "/skip":
        promocode_name = message.text.strip()
        promocode = get_promocode_by_name(promocode_name)

        if not promocode:
            await message.answer(
                "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                reply_markup=create_back_keyboard(),
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {promocode_name}"
            )
            return

        if promocode.expiration_date and promocode.expiration_date < datetime.now(
            MOSCOW_TZ
        ):
            await message.answer(
                "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                reply_markup=create_back_keyboard(),
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {promocode_name}"
            )
            return

        if promocode.usage_quantity <= 0:
            await message.answer(
                "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                reply_markup=create_back_keyboard(),
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {promocode_name}"
            )
            return

        discount = promocode.discount
        promocode_id = promocode.id
        await message.answer(
            f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promocode_name}' –ø—Ä–∏–º–µ–Ω—ë–Ω! –°–∫–∏–¥–∫–∞: {discount}%",
            reply_markup=create_back_keyboard(),
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏–º–µ–Ω–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥ {promocode_name} —Å–æ —Å–∫–∏–¥–∫–æ–π {discount}%"
        )
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥")

    duration = data.get("duration")
    if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è" and duration:
        amount = tariff_price * duration
        if duration >= 3:
            additional_discount = 10
            total_discount = min(100, discount + additional_discount)
            amount *= 1 - total_discount / 100
            logger.info(
                f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ {total_discount}% (–ø—Ä–æ–º–æ–∫–æ–¥: {discount}%, "
                f"–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional_discount}%) –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {duration} —á, "
                f"–∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {amount:.2f}"
            )
        else:
            amount *= 1 - discount / 100
            logger.info(
                f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ {discount}% –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {duration} —á, "
                f"–∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {amount:.2f}"
            )
    else:
        amount = tariff_price * (1 - discount / 100)
        logger.info(
            f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ {discount}% –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff_name}, "
            f"–∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {amount:.2f}"
        )

    description = f"–ë—Ä–æ–Ω—å: {tariff_name}, –¥–∞—Ç–∞: {data['visit_date']}"
    if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è":
        description += f", –≤—Ä–µ–º—è: {data.get('visit_time')}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á, —Å—É–º–º–∞: {amount:.2f} ‚ÇΩ"
    else:
        description += f", —Å—É–º–º–∞: {amount:.2f} ‚ÇΩ"
    if promocode_name:
        description += f", –ø—Ä–æ–º–æ–∫–æ–¥: {promocode_name} ({discount}%)"

    await state.update_data(
        amount=amount,
        promocode_id=promocode_id,
        promocode_name=promocode_name,
        discount=discount,
    )

    if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è":
        await handle_free_booking(message, state, bot=message.bot, paid=False)
    elif amount == 0:
        await handle_free_booking(message, state, bot=message.bot, paid=True)
    else:
        payment_id, confirmation_url = await create_payment(description, amount)
        if not payment_id or not confirmation_url:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_user_keyboard(),
            )
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
            )
            await state.clear()
            return

        await state.update_data(payment_id=payment_id)
        payment_message = await message.answer(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n{description}",
            reply_markup=create_payment_keyboard(confirmation_url, amount),
        )
        await state.update_data(payment_message_id=payment_message.message_id)
        await state.set_state(Booking.STATUS_PAYMENT)

        task = asyncio.create_task(poll_payment_status(message, state, bot=message.bot))
        await state.update_data(payment_task=task)
        logger.info(
            f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, "
            f"—Å—É–º–º–∞: {amount:.2f}"
        )


def format_phone_for_rubitime(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Rubitime –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********.

    Args:
        phone: –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ", –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
    """
    if not phone or phone == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    digits = re.sub(r"[^0-9]", "", phone)
    if digits.startswith("8") or digits.startswith("+7"):
        if len(digits) >= 11:
            return f"+7{digits[-10:]}"
    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


async def handle_free_booking(
    message: Message, state: FSMContext, bot: Bot, paid: bool = True
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ–ø–ª–∞—Ç—ã (–¥–ª—è "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π" –∏–ª–∏ –µ—Å–ª–∏ —Å—É–º–º–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏ = 0).

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        paid: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ –±—Ä–æ–Ω—å (True –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö, False –¥–ª—è "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π").
    """
    data = await state.get_data()
    tariff_id = data["tariff_id"]
    tariff_name = data["tariff_name"]
    tariff_purpose = data["tariff_purpose"]
    tariff_service_id = data["tariff_service_id"]
    visit_date = data["visit_date"]
    visit_time = data.get("visit_time")
    duration = data.get("duration")
    amount = data["amount"]
    promocode_id = data.get("promocode_id")
    promocode_name = data.get("promocode_name", "-")
    discount = data.get("discount", 0)

    booking, admin_message, session = create_booking(
        telegram_id=message.from_user.id,
        tariff_id=tariff_id,
        visit_date=visit_date,
        visit_time=visit_time,
        duration=duration,
        promocode_id=promocode_id,
        amount=amount,
        paid=paid,
        confirmed=(False if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è" else True),
    )
    if not booking:
        if session:
            session.close()
        await message.answer(
            admin_message or "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏.",
            reply_markup=create_user_keyboard(),
        )
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
        )
        await state.clear()
        return

    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω
        if promocode_id:
            promocode = session.query(Promocode).filter_by(id=promocode_id).first()
            if promocode:
                promocode.usage_quantity -= 1
                session.add(promocode)
                logger.info(
                    f"–ü—Ä–æ–º–æ–∫–æ–¥ {promocode_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, "
                    f"–æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promocode.usage_quantity}"
                )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ "–û–ø–µ–Ω—Å–ø–µ–π—Å" –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –±—Ä–æ–Ω–∏
        if tariff_purpose == "–æ–ø–µ–Ω—Å–ø–µ–π—Å" and booking.confirmed:
            user.successful_bookings += 1
            logger.info(
                f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ successful_bookings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} "
                f"–¥–æ {user.successful_bookings}"
            )

        session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è Rubitime
        if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è" and visit_time and duration:
            rubitime_date = datetime.combine(visit_date, visit_time).strftime(
                "%Y-%m-%d %H:%M:%S"
            )
            rubitime_duration = duration * 60
        else:
            rubitime_date = visit_date.strftime("%Y-%m-%d") + " 09:00:00"
            rubitime_duration = None

        formatted_phone = format_phone_for_rubitime(user.phone or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        rubitime_params = {
            "service_id": tariff_service_id,
            "name": user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "email": user.email or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "phone": formatted_phone,
            "record": rubitime_date,
            "comment": f"–ü—Ä–æ–º–æ–∫–æ–¥: {promocode_name}, —Å–∫–∏–¥–∫–∞: {discount}%",
            "coupon": promocode_name,
            "coupon_discount": f"{discount}%",
            "price": amount,
        }
        if rubitime_duration:
            rubitime_params["duration"] = rubitime_duration

        rubitime_id = await rubitime("create_record", rubitime_params)
        if rubitime_id:
            booking.rubitime_id = rubitime_id
            session.commit()
            logger.info(
                f"–ó–∞–ø–∏—Å—å –≤ Rubitime —Å–æ–∑–¥–∞–Ω–∞: ID {rubitime_id}, date={rubitime_date}, "
                f"duration={rubitime_duration}, price={amount}"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º admin_message —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º rubitime_id
            updated_booking_data = {
                **data,
                "rubitime_id": rubitime_id,
            }
            admin_message = format_booking_notification(
                user,
                session.query(Tariff).filter_by(id=tariff_id).first(),
                updated_booking_data,
            )

        await bot.send_message(
            ADMIN_TELEGRAM_ID,
            admin_message,
            parse_mode="HTML",
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response_text = format_user_booking_notification(
            user,
            {**data, "rubitime_id": rubitime_id or "–ù–µ —Å–æ–∑–¥–∞–Ω–æ"},
            confirmed=(tariff_purpose != "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è"),
        )
        await message.answer(
            response_text,
            parse_mode="HTML",
            reply_markup=create_user_keyboard(),
        )
        logger.info(
            f"–ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, "
            f"ID –±—Ä–æ–Ω–∏ {booking.id}, paid={paid}, amount={amount}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ–Ω–∏: {str(e)}")
        session.rollback()
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_user_keyboard(),
        )
    finally:
        if session:
            session.close()
        await state.clear()


async def poll_payment_status(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    data = await state.get_data()
    payment_id = data["payment_id"]
    payment_message_id = data["payment_message_id"]
    tariff_id = data["tariff_id"]
    tariff_name = data["tariff_name"]
    tariff_purpose = data["tariff_purpose"]
    tariff_service_id = data["tariff_service_id"]
    visit_date = data["visit_date"]
    visit_time = data.get("visit_time")
    duration = data.get("duration")
    amount = data["amount"]
    promocode_id = data.get("promocode_id")
    promocode_name = data.get("promocode_name", "-")
    discount = data.get("discount", 0)

    max_attempts = 60
    delay = 5
    user = None
    for _ in range(max_attempts):
        status = await check_payment_status(payment_id)
        if status == "succeeded":
            booking, admin_message, session = create_booking(
                telegram_id=message.from_user.id,
                tariff_id=tariff_id,
                visit_date=visit_date,
                visit_time=visit_time,
                duration=duration,
                promocode_id=promocode_id,
                amount=amount,
                paid=True,
                confirmed=(True if duration is None else False),
                payment_id=payment_id,
            )
            if not booking:
                if session:
                    session.close()
                await bot.edit_message_text(
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=message.chat.id,
                    message_id=payment_message_id,
                    reply_markup=create_user_keyboard(),
                )
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
                )
                await state.clear()
                return
            try:
                user = (
                    session.query(User)
                    .filter_by(telegram_id=message.from_user.id)
                    .first()
                )

                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω
                if promocode_id:
                    promocode = (
                        session.query(Promocode).filter_by(id=promocode_id).first()
                    )
                    if promocode:
                        promocode.usage_quantity -= 1
                        session.add(promocode)
                        logger.info(
                            f"–ü—Ä–æ–º–æ–∫–æ–¥ {promocode_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, "
                            f"–æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promocode.usage_quantity}"
                        )

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ "–û–ø–µ–Ω—Å–ø–µ–π—Å" –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –±—Ä–æ–Ω–∏
                if tariff_purpose == "–æ–ø–µ–Ω—Å–ø–µ–π—Å" and booking.confirmed:
                    user.successful_bookings += 1
                    logger.info(
                        f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ successful_bookings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} "
                        f"–¥–æ {user.successful_bookings}"
                    )

                session.commit()

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è Rubitime
                if tariff_purpose == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è" and visit_time and duration:
                    rubitime_date = datetime.combine(visit_date, visit_time).strftime(
                        "%Y-%m-%d %H:%M:%S"
                    )
                    rubitime_duration = duration * 60
                else:
                    rubitime_date = visit_date.strftime("%Y-%m-%d") + " 09:00:00"
                    rubitime_duration = None

                formatted_phone = format_phone_for_rubitime(user.phone or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                rubitime_params = {
                    "service_id": tariff_service_id,
                    "name": user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    "email": user.email or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    "phone": formatted_phone,
                    "record": rubitime_date,
                    "comment": f"–ü—Ä–æ–º–æ–∫–æ–¥: {promocode_name}, —Å–∫–∏–¥–∫–∞: {discount}%",
                    "coupon": promocode_name,
                    "coupon_discount": f"{discount}%",
                    "price": amount,
                }
                if rubitime_duration:
                    rubitime_params["duration"] = rubitime_duration

                rubitime_id = await rubitime("create_record", rubitime_params)
                if rubitime_id:
                    booking.rubitime_id = rubitime_id
                    session.commit()
                    logger.info(
                        f"–ó–∞–ø–∏—Å—å –≤ Rubitime —Å–æ–∑–¥–∞–Ω–∞: ID {rubitime_id}, date={rubitime_date}, "
                        f"duration={rubitime_duration}, price={amount}"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º admin_message —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º rubitime_id
                    updated_booking_data = {
                        **data,
                        "rubitime_id": rubitime_id,
                    }
                    admin_message = format_booking_notification(
                        user,
                        session.query(Tariff).filter_by(id=tariff_id).first(),
                        updated_booking_data,
                    )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                payment_notification = format_payment_notification(
                    user, data, status="SUCCESS"
                )
                await bot.send_message(
                    ADMIN_TELEGRAM_ID,
                    payment_notification,
                    parse_mode="HTML",
                )
                await bot.send_message(
                    ADMIN_TELEGRAM_ID,
                    admin_message,
                    parse_mode="HTML",
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response_text = format_user_booking_notification(
                    user,
                    {**data, "rubitime_id": rubitime_id or "–ù–µ —Å–æ–∑–¥–∞–Ω–æ"},
                    confirmed=(tariff_purpose != "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è"),
                )
                await bot.edit_message_text(
                    text=response_text,
                    chat_id=message.chat.id,
                    message_id=payment_message_id,
                    parse_mode="HTML",
                    reply_markup=create_user_keyboard(),
                )
                logger.info(
                    f"–ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, "
                    f"ID –±—Ä–æ–Ω–∏ {booking.id}, amount={amount}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {str(e)}")
                session.rollback()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                # payment_notification = format_payment_notification(
                #     user, data, status="FAILED"
                # )
                if user:
                    payment_notification = format_payment_notification(
                        user, data, status="FAILED"
                    )
                else:
                    payment_notification = (
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        f"Payment ID: {payment_id}\n"
                        f"–°—É–º–º–∞: {amount} —Ä—É–±."
                    )
                await bot.send_message(
                    ADMIN_TELEGRAM_ID,
                    payment_notification,
                    parse_mode="HTML",
                )
                await bot.edit_message_text(
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=message.chat.id,
                    message_id=payment_message_id,
                    reply_markup=create_user_keyboard(),
                )
            finally:
                if session:
                    session.close()
                await state.clear()
            return
        elif status == "canceled":
            payment_notification = format_payment_notification(
                user, data, status="CANCELLED"
            )
            await bot.send_message(
                ADMIN_TELEGRAM_ID,
                payment_notification,
                parse_mode="HTML",
            )
            await bot.edit_message_text(
                text="–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.",
                chat_id=message.chat.id,
                message_id=payment_message_id,
                reply_markup=create_user_keyboard(),
            )
            await state.clear()
            return
        await asyncio.sleep(delay)

    payment_notification = format_payment_notification(user, data, status="FAILED")
    await bot.send_message(
        ADMIN_TELEGRAM_ID,
        payment_notification,
        parse_mode="HTML",
    )
    await bot.edit_message_text(
        text="–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        chat_id=message.chat.id,
        message_id=payment_message_id,
        reply_markup=create_user_keyboard(),
    )
    await state.clear()
    logger.warning(f"–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è payment_id {payment_id}")


@router.callback_query(Booking.STATUS_PAYMENT, F.data == "cancel_payment")
async def cancel_payment(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    data = await state.get_data()
    payment_id = data.get("payment_id")
    payment_message_id = data.get("payment_message_id")
    payment_task = data.get("payment_task")

    user = get_user_by_telegram_id(callback_query.from_user.id)

    if payment_task and not payment_task.done():
        payment_task.cancel()
        logger.info(f"–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")

    if payment_id:
        try:
            status = await check_payment_status(payment_id)
            if status == "succeeded":
                refund = Refund.create(
                    {
                        "amount": {
                            "value": f"{data['amount']:.2f}",
                            "currency": "RUB",
                        },
                        "payment_id": payment_id,
                        "description": f"–í–æ–∑–≤—Ä–∞—Ç –¥–ª—è –±—Ä–æ–Ω–∏ {payment_id}",
                    }
                )
                logger.info(
                    f"–í–æ–∑–≤—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}, refund_id={refund.id}"
                )
            elif status == "pending":
                Payment.cancel(payment_id)
                logger.info(f"–ü–ª–∞—Ç—ë–∂ {payment_id} –æ—Ç–º–µ–Ω—ë–Ω –≤ YooKassa")
            else:
                logger.info(
                    f"–ü–ª–∞—Ç—ë–∂ {payment_id} —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ {status}, –æ—Ç–º–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç—ë–∂ {payment_id}: {str(e)}")
            logger.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–º–µ–Ω—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ YooKassa")

    payment_notification = format_payment_notification(user, data, status="CANCELLED")
    await callback_query.message.bot.send_message(
        ADMIN_TELEGRAM_ID,
        payment_notification,
        parse_mode="HTML",
    )
    await callback_query.message.edit_text(
        text="–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=create_user_keyboard(),
    )
    await state.clear()
    logger.info(f"–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    await callback_query.answer()


@router.callback_query(
    F.data == "cancel",
    StateFilter(
        Booking.SELECT_TARIFF,
        Booking.ENTER_DATE,
        Booking.ENTER_TIME,
        Booking.ENTER_DURATION,
        Booking.ENTER_PROMOCODE,
    ),
)
@router.callback_query(
    F.data == "main_menu",
    StateFilter(
        Booking.SELECT_TARIFF,
        Booking.ENTER_DATE,
        Booking.ENTER_TIME,
        Booking.ENTER_DURATION,
        Booking.ENTER_PROMOCODE,
    ),
)
async def cancel_booking(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.clear()
    await callback_query.message.edit_text(
        text="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_user_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback_query.answer()


def register_book_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    dp.include_router(router)
