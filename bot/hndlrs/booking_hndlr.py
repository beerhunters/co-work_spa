from typing import Optional
from aiogram import Router, F, Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot
from datetime import datetime, timedelta, date, time
from models.models import (
    get_user_by_telegram_id,
    get_active_tariffs,
    get_promocode_by_name,
    create_booking,
    Session,
    format_booking_notification,
    User,
    Promocode,
)
from bot.config import rubitime, check_payment_status
import os
import re
import asyncio
from yookassa import Payment, Refund
from utils.logger import get_logger
import pytz

router = Router()
MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
logger = get_logger(__name__)


class Booking(StatesGroup):
    SELECT_TARIFF = State()
    ENTER_DATE = State()
    ENTER_TIME = State()
    ENTER_DURATION = State()
    ENTER_PROMOCODE = State()
    PAYMENT = State()
    STATUS_PAYMENT = State()


def format_payment_notification(user, booking_data, status="SUCCESS") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        booking_data: –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        status: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    status_emojis = {
        "SUCCESS": "‚úÖ",
        "PENDING": "‚è≥",
        "FAILED": "‚ùå",
        "CANCELLED": "üö´",
    }
    status_texts = {
        "SUCCESS": "–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω",
        "PENDING": "–ü–ª–∞—Ç—ë–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "FAILED": "–ü–ª–∞—Ç—ë–∂ –Ω–µ —É–¥–∞–ª—Å—è",
        "CANCELLED": "–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω",
    }
    status_emoji = status_emojis.get(status, "‚ùì")
    status_text = status_texts.get(status, "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –°–¢–ê–¢–£–°")
    message = f"""üí≥ <b>{status_text}</b> {status_emoji}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (@{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'})
üìã <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üí∞ <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ
üîó <b>Payment ID:</b> <code>{booking_data.get('payment_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>"""
    return message.strip()


def format_user_booking_notification(user, booking_data, confirmed: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±—Ä–æ–Ω–∏.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        booking_data: –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        confirmed: –§–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏.

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    tariff_emojis = {
        "meeting": "ü§ù",
        "workspace": "üíº",
        "event": "üéâ",
        "office": "üè¢",
        "coworking": "üíª",
    }
    purpose = booking_data.get("tariff_purpose", "").lower()
    tariff_emoji = tariff_emojis.get(purpose, "üìã")
    visit_date = booking_data.get("visit_date")
    visit_time = booking_data.get("visit_time")
    datetime_str = (
        f"{visit_date.strftime('%d.%m.%Y')} –≤ {visit_time.strftime('%H:%M')}"
        if visit_time
        else f"{visit_date.strftime('%d.%m.%Y')} (–≤–µ—Å—å –¥–µ–Ω—å)"
    )
    discount_info = ""
    promocode_name = booking_data.get("promocode_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    discount = booking_data.get("discount", 0)
    if discount > 0:
        discount_info = (
            f"\nüí∞ <b>–°–∫–∏–¥–∫–∞:</b> {discount}% (–ø—Ä–æ–º–æ–∫–æ–¥: <code>{promocode_name}</code>)"
        )
    duration_info = ""
    if booking_data.get("duration"):
        duration_info = f"\n‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {booking_data['duration']} —á–∞—Å(–æ–≤)"
    status_text = "–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if confirmed else "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥"
    status_instruction = (
        "\n\n‚ÑπÔ∏è <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        if not confirmed
        else ""
    )
    message = f"""üéâ <b>–í–∞—à–∞ –±—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞!</b> {tariff_emoji}
üìã <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime_str}{duration_info}
üí∞ <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ{discount_info}
üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{status_instruction}"""
    return message.strip()


def create_tariff_keyboard(telegram_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏.

    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.
    """
    user = get_user_by_telegram_id(telegram_id)
    successful_bookings = user.successful_bookings if user else 0
    tariffs = get_active_tariffs()
    buttons = [
        [
            InlineKeyboardButton(
                text=f"{tariff.name} ({tariff.price} ‚ÇΩ)",
                callback_data=f"tariff_{tariff.id}",
            )
        ]
        for tariff in tariffs
    ]
    buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def create_date_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞—Ç.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ (7 –¥–Ω–µ–π).
    """
    today = datetime.now(MOSCOW_TZ).date()
    buttons = []
    for i in range(7):
        date = today + timedelta(days=i)
        buttons.append(
            [
                InlineKeyboardButton(
                    text=date.strftime("%d.%m.%Y"),
                    callback_data=f"date_{date.strftime('%Y-%m-%d')}",
                )
            ]
        )
    buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@router.callback_query(F.data.startswith("tariff_"))
async def process_tariff_selection(
    callback_query: CallbackQuery, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞.

    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ (–ø–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–∞).
    """
    tariff_id = int(callback_query.data.split("_")[1])
    tariffs = get_active_tariffs()
    tariff = next((t for t in tariffs if t.id == tariff_id), None)
    if not tariff:
        await callback_query.message.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(
        tariff_id=tariff.id,
        tariff_name=tariff.name,
        tariff_price=tariff.price,
        tariff_purpose=tariff.purpose,
        tariff_service_id=tariff.service_id,
    )
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∏–∑–∏—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(Booking.ENTER_DATE)


@router.message(Booking.ENTER_DATE)
async def process_date(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –≤–∏–∑–∏—Ç–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    try:
        visit_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        await state.update_data(visit_date=visit_date)
        data = await state.get_data()
        tariff_purpose = data["tariff_purpose"]
        if tariff_purpose.lower() == "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ (–ß–ß:–ú–ú):")
            await state.set_state(Booking.ENTER_TIME)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
            await state.set_state(Booking.ENTER_PROMOCODE)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")


@router.message(Booking.ENTER_TIME)
async def process_time(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–∑–∏—Ç–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    try:
        visit_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(visit_time=visit_time)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö:")
        await state.set_state(Booking.ENTER_DURATION)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")


@router.message(Booking.ENTER_DURATION)
async def process_duration(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        await state.update_data(duration=duration)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
        await state.set_state(Booking.ENTER_PROMOCODE)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")


@router.message(Booking.ENTER_PROMOCODE)
async def process_promocode(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
    """
    data = await state.get_data()
    tariff_price = data["tariff_price"]
    promocode_id: Optional[int] = None
    promocode_name: Optional[str] = None
    discount: float = 0
    if message.text != "/skip":
        promocode_name = message.text.strip()
        promocode = get_promocode_by_name(promocode_name)
        if promocode and promocode.is_active:
            discount = promocode.discount
            promocode_id = promocode.id
        else:
            await message.answer(
                "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞? –ù–∞–∂–º–∏—Ç–µ /skip."
            )
            return
    duration = data.get("duration")
    amount = tariff_price * duration if duration else tariff_price
    if discount > 0:
        amount = amount * (1 - discount / 100)
    additional_discount = 10 if data.get("successful_bookings", 0) >= 5 else 0
    total_discount = min(100, discount + additional_discount)
    amount = amount * (1 - total_discount / 100)
    await state.update_data(
        amount=amount,
        promocode_id=promocode_id,
        promocode_name=promocode_name,
        discount=total_discount,
    )
    description = f"–ë—Ä–æ–Ω—å: {data['tariff_name']}, –¥–∞—Ç–∞: {data['visit_date']}"
    try:
        payment = await Payment.create(
            {
                "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://example.com/return",
                },
                "description": description,
            }
        )
        await state.update_data(
            payment_id=payment.id, payment_url=payment.confirmation.confirmation_url
        )
        payment_message = await message.answer(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ –±—Ä–æ–Ω—å: {amount:.2f} ‚ÇΩ\n–°—Å—ã–ª–∫–∞: {payment.confirmation.confirmation_url}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_payment"
                        )
                    ]
                ]
            ),
        )
        await state.update_data(payment_message_id=payment_message.message_id)
        task = asyncio.create_task(poll_payment_status(message, state, bot=message.bot))
        await state.update_data(payment_task=task)
        await state.set_state(Booking.STATUS_PAYMENT)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()


def format_phone_for_rubitime(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Rubitime.

    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ n ‚Äî –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    digits = re.sub(r"[^0-9]", "", phone)
    return f"+{digits}"


@router.message(Booking.PAYMENT)
async def process_payment(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ API.
    """
    data = await state.get_data()
    tariff_id = data["tariff_id"]
    tariff_service_id = data["tariff_service_id"]
    visit_date = data["visit_date"]
    visit_time = data.get("visit_time")
    duration = data.get("duration")
    amount = data["amount"]
    promocode_id = data.get("promocode_id")
    promocode_name = data.get("promocode_name", "-")
    discount = data.get("discount", 0)
    payment_id = data["payment_id"]
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        promocode = (
            session.query(Promocode).filter_by(id=promocode_id).first()
            if promocode_id
            else None
        )
        rubitime_date = (
            datetime.combine(visit_date, visit_time).strftime("%Y-%m-%d %H:%M:%S")
            if visit_time
            else visit_date.strftime("%Y-%m-%d") + " 09:00:00"
        )
        rubitime_duration = duration * 60 if duration else None
        formatted_phone = format_phone_for_rubitime(user.phone or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        rubitime_params = {
            "service_id": tariff_service_id,
            "date": rubitime_date,
            "phone": formatted_phone,
            "duration": rubitime_duration,
        }
        rubitime_id = await rubitime("create_record", rubitime_params)
        booking, admin_message, session = create_booking(
            telegram_id=message.from_user.id,
            tariff_id=tariff_id,
            visit_date=visit_date,
            visit_time=visit_time,
            duration=duration,
            promocode_id=promocode_id,
            amount=amount,
            payment_id=payment_id,
            paid=False,
            confirmed=False,
        )
        if not booking:
            await message.answer(admin_message)
            return
        updated_booking_data = {
            "tariff_name": data["tariff_name"],
            "tariff_purpose": data["tariff_purpose"],
            "visit_date": visit_date,
            "visit_time": visit_time,
            "duration": duration,
            "amount": amount,
            "promocode_name": promocode_name,
            "discount": discount,
            "rubitime_id": rubitime_id,
            "payment_id": payment_id,
        }
        admin_message = format_booking_notification(
            user, booking.tariff, updated_booking_data
        )
        await message.bot.send_message(
            ADMIN_TELEGRAM_ID, admin_message, parse_mode="HTML"
        )
        response_text = format_user_booking_notification(
            user, updated_booking_data, confirmed=False
        )
        await message.answer(response_text, parse_mode="HTML")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        if session:
            session.close()


async def poll_payment_status(message: Message, state: FSMContext, bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Yookassa.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(k), –≥–¥–µ k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (max_attempts).
    """
    data = await state.get_data()
    payment_id = data["payment_id"]
    payment_message_id = data["payment_message_id"]
    max_attempts = 60
    delay = 5
    try:
        user = get_user_by_telegram_id(message.from_user.id)
        if not user:
            await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        for attempt in range(max_attempts):
            status = await check_payment_status(payment_id)
            if status == "succeeded":
                session = Session()
                try:
                    booking = (
                        session.query(Booking).filter_by(payment_id=payment_id).first()
                    )
                    if booking:
                        booking.paid = True
                        booking.confirmed = True
                        user.successful_bookings += 1
                        session.commit()
                        payment_notification = format_payment_notification(
                            user, data, status="SUCCESS"
                        )
                        await bot.send_message(
                            ADMIN_TELEGRAM_ID, payment_notification, parse_mode="HTML"
                        )
                        await bot.edit_message_text(
                            chat_id=message.chat.id,
                            message_id=payment_message_id,
                            text=format_user_booking_notification(
                                user, data, confirmed=True
                            ),
                            parse_mode="HTML",
                        )
                        await state.clear()
                    break
                finally:
                    session.close()
            elif status == "canceled" or status == "failed":
                payment_notification = format_payment_notification(
                    user, data, status="FAILED"
                )
                await bot.send_message(
                    ADMIN_TELEGRAM_ID, payment_notification, parse_mode="HTML"
                )
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=payment_message_id,
                    text="–ü–ª–∞—Ç—ë–∂ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML",
                )
                await state.clear()
                break
            await asyncio.sleep(delay)
        else:
            payment_notification = format_payment_notification(
                user, data, status="FAILED"
            )
            await bot.send_message(
                ADMIN_TELEGRAM_ID, payment_notification, parse_mode="HTML"
            )
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=payment_message_id,
                text="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ.",
                parse_mode="HTML",
            )
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        await state.clear()


@router.callback_query(Booking.STATUS_PAYMENT, F.data == "cancel_payment")
async def cancel_payment(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    data = await state.get_data()
    payment_id = data.get("payment_id")
    payment_message_id = data.get("payment_message_id")
    payment_task = data.get("payment_task")
    user = get_user_by_telegram_id(callback_query.from_user.id)
    if not user:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        if payment_task:
            payment_task.cancel()
        if payment_id:
            refund = Refund.create(
                {
                    "payment_id": payment_id,
                    "amount": {"value": f"{data['amount']:.2f}", "currency": "RUB"},
                    "description": "–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏",
                }
            )
        payment_notification = format_payment_notification(
            user, data, status="CANCELLED"
        )
        await callback_query.message.bot.send_message(
            ADMIN_TELEGRAM_ID, payment_notification, parse_mode="HTML"
        )
        await callback_query.message.bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=payment_message_id,
            text="–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.",
            parse_mode="HTML",
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞.")


@router.callback_query(F.data == "cancel")
async def cancel_booking(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    await state.clear()
    await callback_query.message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


def register_book_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        dp: Dispatcher –±–æ—Ç–∞.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    dp.include_router(router)
