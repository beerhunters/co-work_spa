import os
import re
import pytz
import asyncio
from datetime import datetime, timedelta, date, time
from typing import Optional

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.api_client import get_api_client
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()

MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")


class Booking(StatesGroup):
    SELECT_TARIFF = State()
    ENTER_DATE = State()
    ENTER_TIME = State()
    ENTER_DURATION = State()
    ENTER_PROMOCODE = State()
    PAYMENT = State()
    STATUS_PAYMENT = State()


def format_payment_notification(user, booking_data, status="SUCCESS") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    status_emojis = {
        "SUCCESS": "‚úÖ",
        "FAILED": "‚ùå",
        "PENDING": "‚è≥",
        "CANCELLED": "üö´",
    }

    status_emoji = status_emojis.get(status, "‚ùì")

    status_texts = {
        "SUCCESS": "–ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ï–ù",
        "FAILED": "–ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù",
        "PENDING": "–ü–õ–ê–¢–ï–ñ –í –û–ñ–ò–î–ê–ù–ò–ò",
        "CANCELLED": "–ü–õ–ê–¢–ï–ñ –û–¢–ú–ï–ù–ï–ù",
    }

    status_text = status_texts.get(status, "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –°–¢–ê–¢–£–°")

    message = f"""üí≥ <b>{status_text}</b> {status_emoji}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üí∞ <b>–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:</b>
‚îú <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ
‚îú <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚îú <b>–î–∞—Ç–∞ –±—Ä–æ–Ω–∏:</b> {booking_data.get('visit_date', '').strftime('%d.%m.%Y') if booking_data.get('visit_date') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚îî <b>Payment ID:</b> <code>{booking_data.get('payment_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>

‚è∞ <i>–í—Ä–µ–º—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    return message


def format_user_booking_notification(user, booking_data, confirmed: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    tariff_emojis = {
        "–æ–ø–µ–Ω—Å–ø–µ–π—Å": "üè¢",
        "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è": "üèõ",
        "meeting": "üèõ",
        "openspace": "üè¢",
    }

    purpose = booking_data.get("tariff_purpose", "").lower()
    tariff_emoji = tariff_emojis.get(purpose, "üìã")

    visit_date = booking_data.get("visit_date")
    visit_time = booking_data.get("visit_time")

    if isinstance(visit_date, str):
        visit_date = datetime.fromisoformat(visit_date).date()

    if visit_time and isinstance(visit_time, str):
        visit_time = datetime.strptime(visit_time, "%H:%M:%S").time()

    if visit_time:
        datetime_str = (
            f"{visit_date.strftime('%d.%m.%Y')} –≤ {visit_time.strftime('%H:%M')}"
        )
    else:
        datetime_str = f"{visit_date.strftime('%d.%m.%Y')} (–≤–µ—Å—å –¥–µ–Ω—å)"

    discount_info = ""
    if booking_data.get("promocode_name"):
        promocode_name = booking_data.get("promocode_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        discount = booking_data.get("discount", 0)
        discount_info = f"\nüéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode_name} (-{discount}%)"

    duration_info = ""
    if booking_data.get("duration"):
        duration_info = f"\n‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {booking_data['duration']} —á–∞—Å(–æ–≤)"

    status_text = "–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if confirmed else "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥"
    status_instruction = (
        "\n\nüí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b> –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        if confirmed
        else "\n\nüí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )

    message = f"""üéâ <b>–í–∞—à–∞ –±—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞!</b> {tariff_emoji}

üìã <b>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏:</b>
‚îú <b>–¢–∞—Ä–∏—Ñ:</b> {booking_data.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚îú <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime_str}{duration_info}
‚îî <b>–°—É–º–º–∞:</b> {booking_data.get('amount', 0):.2f} ‚ÇΩ{discount_info}

üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{status_instruction}

‚è∞ <i>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    return message


def format_booking_notification(user, tariff, booking_data) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–≤–µ—Ä—Å–∏—è –¥–ª—è –±–æ—Ç–∞)

    Args:
        user: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞
        booking_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    tariff_emojis = {
        "coworking": "üè¢",
        "meeting": "ü§ù",
        "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è": "ü§ù",
        "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥": "üè¢",
    }

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user.get("full_name") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_phone = user.get("phone") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_username = f"@{user.get('username')}" if user.get("username") else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    telegram_id = user.get("telegram_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞
    tariff_name = tariff.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    tariff_purpose = tariff.get("purpose", "")

    purpose = tariff_purpose.lower() if tariff_purpose else ""
    tariff_emoji = tariff_emojis.get(purpose, "üìã")

    visit_date = booking_data.get("visit_date")
    visit_time = booking_data.get("visit_time")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if visit_time:
        if hasattr(visit_date, "strftime"):
            date_str = visit_date.strftime("%d.%m.%Y")
        else:
            # –ï—Å–ª–∏ visit_date - —Å—Ç—Ä–æ–∫–∞
            try:
                date_obj = datetime.strptime(str(visit_date), "%Y-%m-%d").date()
                date_str = date_obj.strftime("%d.%m.%Y")
            except:
                date_str = str(visit_date)

        if hasattr(visit_time, "strftime"):
            time_str = visit_time.strftime("%H:%M")
        else:
            # –ï—Å–ª–∏ visit_time - —Å—Ç—Ä–æ–∫–∞
            try:
                time_obj = datetime.strptime(str(visit_time), "%H:%M:%S").time()
                time_str = time_obj.strftime("%H:%M")
            except:
                time_str = str(visit_time)

        datetime_str = f"{date_str} –≤ {time_str}"
    else:
        if hasattr(visit_date, "strftime"):
            date_str = visit_date.strftime("%d.%m.%Y")
        else:
            try:
                date_obj = datetime.strptime(str(visit_date), "%Y-%m-%d").date()
                date_str = date_obj.strftime("%d.%m.%Y")
            except:
                date_str = str(visit_date)
        datetime_str = f"{date_str} (–≤–µ—Å—å –¥–µ–Ω—å)"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    discount_info = ""
    promocode_name = booking_data.get("promocode_name")
    if promocode_name:
        discount = booking_data.get("discount", 0)
        discount_info = f"\nüéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode_name} (-{discount}%)"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    duration_info = ""
    duration = booking_data.get("duration")
    if duration:
        duration_info = f"\n‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration} —á–∞—Å(–æ–≤)"

    # –°—É–º–º–∞
    amount = booking_data.get("amount", 0)

    message = f"""üéØ <b>–ù–û–í–ê–Ø –ë–†–û–ù–¨!</b> {tariff_emoji}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_phone}
üí¨ <b>Telegram:</b> {user_username}
üÜî <b>ID:</b> {telegram_id}

üìã <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}
üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime_str}{duration_info}{discount_info}

üí∞ <b>–°—É–º–º–∞:</b> {amount:.0f} ‚ÇΩ
‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –û–ø–ª–∞—á–µ–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""

    return message


async def create_tariff_keyboard(telegram_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏, –∏—Å–∫–ª—é—á–∞—è '–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏."""
    api_client = await get_api_client()
    user = await api_client.get_user_by_telegram_id(telegram_id)
    tariffs = await api_client.get_active_tariffs()

    successful_bookings = user.get("successful_bookings", 0)

    keyboard = InlineKeyboardBuilder()

    for tariff in tariffs:
        tariff_id = tariff.get("id")
        tariff_name = tariff.get("name")
        tariff_price = tariff.get("price")
        service_id = tariff.get("service_id")

        # –°–∫—Ä—ã–≤–∞–µ–º "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å" (service_id 47890) –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if service_id == 47890 and successful_bookings > 0:
            continue

        button_text = f"{tariff_name} - {tariff_price}‚ÇΩ"
        keyboard.row(
            InlineKeyboardButton(text=button_text, callback_data=f"tariff_{tariff_id}")
        )

    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking"))

    return keyboard.as_markup()


def create_date_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ (—Å–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π)."""
    today = datetime.now(MOSCOW_TZ).date()
    keyboard = InlineKeyboardBuilder()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    for i in range(8):  # –°–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        callback_data = f"date_{date.strftime('%Y-%m-%d')}"

        if i == 0:
            date_str = f"–°–µ–≥–æ–¥–Ω—è ({date_str})"
        elif i == 1:
            date_str = f"–ó–∞–≤—Ç—Ä–∞ ({date_str})"

        buttons.append(InlineKeyboardButton(text=date_str, callback_data=callback_data))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.row(buttons[i], buttons[i + 1])
        else:
            keyboard.row(buttons[i])

    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="back_to_tariffs")
    )
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking"))

    return keyboard.as_markup()


def create_duration_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 8 —á–∞—Å–æ–≤."""
    keyboard = InlineKeyboardBuilder()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    for i in range(1, 9):  # –û—Ç 1 –¥–æ 8 —á–∞—Å–æ–≤
        discount_text = " (—Å–∫–∏–¥–∫–∞ 10%)" if i > 2 else ""
        buttons.append(
            InlineKeyboardButton(
                text=f"{i} —á–∞—Å{'–∞' if i in [2, 3, 4] else '–æ–≤' if i > 4 else ''}{discount_text}",
                callback_data=f"duration_{i}",
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.row(buttons[i], buttons[i + 1])
        else:
            keyboard.row(buttons[i])

    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_time"))
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking"))

    return keyboard.as_markup()


def create_payment_keyboard(
    confirmation_url: str, amount: float
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã."""
    keyboard = InlineKeyboardBuilder()

    keyboard.add(
        InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount:.2f} ‚ÇΩ", url=confirmation_url)
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")
    )

    return keyboard.as_markup()


def create_promocode_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    keyboard = InlineKeyboardBuilder()

    keyboard.add(
        InlineKeyboardButton(
            text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="skip_promocode"
        )
    )
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking"))

    return keyboard.as_markup()


@router.callback_query(F.data == "book")
async def start_booking(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã."""
    await callback_query.answer()

    try:
        keyboard = await create_tariff_keyboard(callback_query.from_user.id)

        await callback_query.message.edit_text(
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n"
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        await state.set_state(Booking.SELECT_TARIFF)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=None,
        )


@router.callback_query(Booking.SELECT_TARIFF, F.data.startswith("tariff_"))
async def select_tariff(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏."""
    await callback_query.answer()

    try:
        tariff_id = int(callback_query.data.split("_")[1])

        api_client = await get_api_client()
        tariff = await api_client.get_tariff(tariff_id)

        if not tariff:
            await callback_query.message.edit_text(
                "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            tariff_id=tariff_id,
            tariff_name=tariff["name"],
            tariff_price=tariff["price"],
            tariff_purpose=tariff["purpose"],
            tariff_service_id=tariff.get("service_id"),
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        keyboard = create_date_keyboard()

        await callback_query.message.edit_text(
            f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è '{tariff['name']}':</b>\n\n"
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        await state.set_state(Booking.ENTER_DATE)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None
        )


@router.callback_query(Booking.ENTER_DATE, F.data.startswith("date_"))
async def select_date(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await callback_query.answer()

    try:
        date_str = callback_query.data.split("_")[1]
        visit_date = datetime.strptime(date_str, "%Y-%m-%d").date()

        await state.update_data(visit_date=visit_date)

        data = await state.get_data()
        tariff_purpose = data["tariff_purpose"]
        tariff_name = data["tariff_name"]

        if tariff_purpose and tariff_purpose.lower() in ["–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è", "meeting"]:
            # –î–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            await callback_query.message.edit_text(
                f"‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è '{tariff_name}':</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {visit_date.strftime('%d.%m.%Y')}\n\n"
                "üìå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                parse_mode="HTML",
            )
            await state.set_state(Booking.ENTER_TIME)
        else:
            # –î–ª—è –æ–ø–µ–Ω—Å–ø–µ–π—Å–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–º–æ–∫–æ–¥—É
            keyboard = create_promocode_keyboard()
            await callback_query.message.edit_text(
                f"üéÅ <b>–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ–º–æ–∫–æ–¥?</b>\n\n"
                f"üìã –¢–∞—Ä–∏—Ñ: {tariff_name}\n"
                f"üìÖ –î–∞—Ç–∞: {visit_date.strftime('%d.%m.%Y')} (–≤–µ—Å—å –¥–µ–Ω—å)\n\n"
                "üìå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            await state.set_state(Booking.ENTER_PROMOCODE)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None
        )


@router.message(Booking.ENTER_TIME)
async def process_time(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
    try:
        visit_time = datetime.strptime(message.text, "%H:%M").time()

        await state.update_data(visit_time=visit_time)

        data = await state.get_data()
        tariff_name = data["tariff_name"]
        visit_date = data["visit_date"]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        keyboard = create_duration_keyboard()

        await message.answer(
            f"‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è '{tariff_name}':</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {visit_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {visit_time.strftime('%H:%M')}\n\n"
            "üìå –ü—Ä–∏ –∞—Ä–µ–Ω–¥–µ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10%:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        await state.set_state(Booking.ENTER_DURATION)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "üìå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
        )


@router.callback_query(Booking.ENTER_DURATION, F.data.startswith("duration_"))
async def select_duration(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    await callback_query.answer()

    try:
        duration = int(callback_query.data.split("_")[1])

        await state.update_data(duration=duration)

        data = await state.get_data()
        tariff_name = data["tariff_name"]
        visit_date = data["visit_date"]
        visit_time = data["visit_time"]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        keyboard = create_promocode_keyboard()

        await callback_query.message.edit_text(
            f"üéÅ <b>–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ–º–æ–∫–æ–¥?</b>\n\n"
            f"üìã –¢–∞—Ä–∏—Ñ: {tariff_name}\n"
            f"üìÖ –î–∞—Ç–∞: {visit_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {visit_time.strftime('%H:%M')}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á–∞—Å{'–∞' if duration in [2, 3, 4] else '–æ–≤' if duration > 4 else ''}\n\n"
            "üìå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        await state.set_state(Booking.ENTER_PROMOCODE)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None
        )


@router.callback_query(F.data == "skip_promocode")
async def skip_promocode(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    await callback_query.answer()
    await process_promocode_final(callback_query.message, state, None)


@router.message(Booking.ENTER_PROMOCODE)
async def process_promocode(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ –µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞. –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –∏–ª–∏ –±—Ä–æ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞."""
    promocode_name = message.text.strip()
    await process_promocode_final(message, state, promocode_name)


async def process_promocode_final(
    message: Message, state: FSMContext, promocode_name: Optional[str]
) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏/–ø–ª–∞—Ç–µ–∂–∞."""
    try:
        api_client = await get_api_client()
        data = await state.get_data()

        user = await api_client.get_user_by_telegram_id(message.from_user.id)
        tariff_price = data["tariff_price"]
        tariff_purpose = data["tariff_purpose"]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promocode_id: Optional[int] = None
        promocode_name_final: Optional[str] = None
        discount: float = 0

        if promocode_name:
            try:
                promocode = await api_client.get_promocode_by_name(promocode_name)
                if promocode:
                    discount = promocode.get("discount", 0)
                    promocode_id = promocode.get("id")
                    promocode_name_final = promocode.get("name")
                else:
                    await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
                    return
            except Exception:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
                return

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        duration = data.get("duration")
        if duration:
            amount = tariff_price * duration
        else:
            amount = tariff_price

        # –°–∫–∏–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
        successful_bookings = user.get("successful_bookings", 0)
        if successful_bookings > 0 and data.get("tariff_service_id") != 47890:
            additional_discount = 10
            total_discount = min(100, discount + additional_discount)
        else:
            total_discount = discount

        # –°–∫–∏–¥–∫–∞ 10% –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤
        if duration and duration > 2:
            duration_discount = 10
            total_discount = min(100, total_discount + duration_discount)

        amount = amount * (1 - total_discount / 100)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(
            amount=amount,
            promocode_id=promocode_id,
            promocode_name=promocode_name_final,
            discount=total_discount,
        )

        if tariff_purpose and tariff_purpose.lower() in ["–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è", "meeting"]:
            # –î–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π - —Å–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å –±–µ–∑ –æ–ø–ª–∞—Ç—ã
            await create_booking_in_system(message, state, paid=False)
        elif amount <= 0:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –±—Ä–æ–Ω—å (100% —Å–∫–∏–¥–∫–∞)
            await create_booking_in_system(message, state, paid=True)
        else:
            # –ü–ª–∞—Ç–Ω–∞—è –±—Ä–æ–Ω—å - —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            await create_payment_for_booking(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def create_payment_for_booking(message: Message, state: FSMContext) -> None:
    try:
        api_client = await get_api_client()
        data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await api_client.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")

        visit_date = data["visit_date"]
        visit_time = data.get("visit_time")
        duration = data.get("duration")
        tariff_service_id = data.get("tariff_service_id")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Rubitime —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å service_id –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        rubitime_id = None
        tariff_purpose = data.get("tariff_purpose", "").lower()

        if tariff_service_id:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                user_phone = user.get("phone", "")
                logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_phone}'")

                formatted_phone = format_phone_for_rubitime(user_phone)
                logger.info(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: '{formatted_phone}'")

                if (
                    not formatted_phone
                    or formatted_phone == "+7"
                    or len(formatted_phone) < 10
                ):
                    logger.warning(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')}: '{user_phone}' -> '{formatted_phone}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Rubitime"
                    )
                else:
                    if visit_time and duration:
                        # –î–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                        rubitime_date = datetime.combine(
                            visit_date, visit_time
                        ).strftime("%Y-%m-%d %H:%M:%S")
                        rubitime_duration = duration * 60
                    else:
                        # –î–ª—è –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
                        rubitime_date = visit_date.strftime("%Y-%m-%d") + " 09:00:00"
                        rubitime_duration = None

                    # –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ —Å email –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                    comment_parts = [
                        f"–ë—Ä–æ–Ω—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ - {data['tariff_name']}"
                    ]

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                    promocode_name = data.get("promocode_name")
                    if promocode_name:
                        discount = data.get("discount", 0)
                        comment_parts.append(
                            f"–ü—Ä–æ–º–æ–∫–æ–¥: {promocode_name} (-{discount}%)"
                        )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                    if duration and duration > 2:
                        comment_parts.append("–°–∫–∏–¥–∫–∞ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: -10%")

                    final_comment = " | ".join(comment_parts)

                    # –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ —Å email, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                    rubitime_params = {
                        "service_id": tariff_service_id,
                        "date": rubitime_date,
                        "phone": formatted_phone,
                        "name": user.get("full_name", "–ö–ª–∏–µ–Ω—Ç"),
                        "comment": final_comment,  # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        "source": "Telegram Bot",
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º duration —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    if rubitime_duration is not None:
                        rubitime_params["duration"] = rubitime_duration

                    # –î–æ–±–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
                    user_email = user.get("email")
                    if user_email and user_email.strip():
                        rubitime_params["email"] = user_email.strip()
                        logger.info(
                            f"–î–æ–±–∞–≤–ª–µ–Ω email –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Rubitime: {user_email}"
                        )
                    else:
                        logger.info(
                            f"Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: '{user_email}'"
                        )

                    logger.info(
                        f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Rubitime —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: {rubitime_params}"
                    )
                    rubitime_id = await api_client.create_rubitime_record(
                        rubitime_params
                    )
                    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ Rubitime: {rubitime_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ Rubitime: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ rubitime_id
        else:
            logger.warning(
                f"–¢–∞—Ä–∏—Ñ –±–µ–∑ service_id ({tariff_service_id}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Rubitime"
            )

        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            "user_id": message.from_user.id,
            "tariff_id": data["tariff_id"],
            "visit_date": visit_date.strftime("%Y-%m-%d"),
            "visit_time": visit_time.strftime("%H:%M:%S") if visit_time else None,
            "duration": duration,
            "promocode_id": data.get("promocode_id"),
            "amount": data["amount"],
            "payment_id": data["payment_id"],
            "paid": True,
            "confirmed": False,
            "rubitime_id": rubitime_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        }

        booking_result = await api_client.create_booking(booking_data)
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {booking_result}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        updated_booking_data = {
            **data,
            "rubitime_id": rubitime_id,
            "booking_id": booking_result.get("id"),
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        tariff = await api_client.get_tariff(data["tariff_id"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            admin_message = format_booking_notification(
                user, tariff, updated_booking_data
            )
            await message.bot.send_message(
                chat_id=ADMIN_TELEGRAM_ID, text=admin_message, parse_mode="HTML"
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response_text = format_user_booking_notification(
            user, updated_booking_data, confirmed=False
        )
        await message.answer(response_text, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        try:
            current_bookings = user.get("successful_bookings", 0)
            await api_client.update_user(
                user["id"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –≤–º–µ—Å—Ç–æ telegram_id
                {"successful_bookings": current_bookings + 1},
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def format_phone_for_rubitime(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Rubitime –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********."""
    if not phone:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits = re.sub(r"[^0-9]", "", phone)

    if len(digits) == 11 and digits.startswith("8"):
        # –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7
        digits = "7" + digits[1:]
    elif len(digits) == 10:
        # –î–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
        digits = "7" + digits
    elif len(digits) == 11 and digits.startswith("7"):
        # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        pass
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    if len(digits) == 11:
        return "+" + digits
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


async def create_booking_in_system(
    message: Message, state: FSMContext, paid: bool = False
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ–ø–ª–∞—Ç—ã (–¥–ª—è "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π" –∏–ª–∏ –µ—Å–ª–∏ —Å—É–º–º–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏ = 0)."""
    try:
        api_client = await get_api_client()
        data = await state.get_data()

        user = await api_client.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        tariff_service_id = data.get("tariff_service_id")
        visit_date = data["visit_date"]
        visit_time = data.get("visit_time")
        duration = data.get("duration")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Rubitime (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ–Ω—Å–ø–µ–π—Å–∞ –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π)
        rubitime_id = None
        tariff_purpose = data.get("tariff_purpose", "").lower()

        if paid or tariff_purpose in [
            "–æ–ø–µ–Ω—Å–ø–µ–π—Å",
            "openspace",
            "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
            "coworking",
        ]:
            if tariff_service_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ service_id
                try:
                    if visit_time and duration:
                        # –î–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                        rubitime_date = datetime.combine(
                            visit_date, visit_time
                        ).strftime("%Y-%m-%d %H:%M:%S")
                        rubitime_duration = duration * 60  # –í –º–∏–Ω—É—Ç–∞—Ö
                    else:
                        # –î–ª—è –æ–ø–µ–Ω—Å–ø–µ–π—Å–∞ (–≤–µ—Å—å –¥–µ–Ω—å)
                        rubitime_date = visit_date.strftime("%Y-%m-%d") + " 09:00:00"
                        rubitime_duration = None

                    formatted_phone = format_phone_for_rubitime(user.get("phone", ""))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    if (
                        not formatted_phone
                        or formatted_phone == "+7"
                        or len(formatted_phone) < 10
                    ):
                        logger.warning(
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')}: '{user.get('phone')}' -> '{formatted_phone}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Rubitime"
                        )
                    else:
                        # –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ —Å email –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                        comment_parts = [
                            f"–ë—Ä–æ–Ω—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ - {data['tariff_name']}"
                        ]

                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                        promocode_name = data.get("promocode_name")
                        if promocode_name:
                            discount = data.get("discount", 0)
                            comment_parts.append(
                                f"–ü—Ä–æ–º–æ–∫–æ–¥: {promocode_name} (-{discount}%)"
                            )

                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                        if duration and duration > 2:
                            comment_parts.append("–°–∫–∏–¥–∫–∞ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: -10%")

                        final_comment = " | ".join(comment_parts)

                        # –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ —Å email, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                        rubitime_params = {
                            "service_id": tariff_service_id,
                            "date": rubitime_date,
                            "phone": formatted_phone,
                            "name": user.get("full_name", "–ö–ª–∏–µ–Ω—Ç"),
                            "comment": final_comment,  # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            "source": "Telegram Bot",
                        }

                        # –î–æ–±–∞–≤–ª—è–µ–º duration —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if rubitime_duration is not None:
                            rubitime_params["duration"] = rubitime_duration

                        # –î–æ–±–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
                        user_email = user.get("email")
                        if user_email and user_email.strip():
                            rubitime_params["email"] = user_email.strip()
                            logger.info(
                                f"–î–æ–±–∞–≤–ª–µ–Ω email –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Rubitime: {user_email}"
                            )
                        else:
                            logger.info(
                                f"Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: '{user_email}'"
                            )

                        logger.info(
                            f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Rubitime —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: {rubitime_params}"
                        )
                        rubitime_id = await api_client.create_rubitime_record(
                            rubitime_params
                        )
                        logger.info(
                            f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ Rubitime: {rubitime_id}"
                        )

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Rubitime: {e}")
            else:
                logger.warning(
                    f"–¢–∞—Ä–∏—Ñ –±–µ–∑ service_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Rubitime"
                )

        # –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        booking_data = {
            "user_id": message.from_user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id
            "tariff_id": data["tariff_id"],
            "visit_date": visit_date.strftime("%Y-%m-%d"),
            "visit_time": visit_time.strftime("%H:%M:%S") if visit_time else None,
            "duration": duration,
            "promocode_id": data.get("promocode_id"),
            "amount": data.get("amount", 0),
            "paid": paid,
            "confirmed": paid,  # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π
            "rubitime_id": rubitime_id,
        }

        booking_result = await api_client.create_booking(booking_data)

        if not booking_result:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        updated_booking_data = {
            "tariff_name": data["tariff_name"],
            "tariff_purpose": data["tariff_purpose"],
            "visit_date": visit_date,
            "visit_time": visit_time,
            "duration": duration,
            "amount": data.get("amount", 0),
            "promocode_name": data.get("promocode_name"),
            "discount": data.get("discount", 0),
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            tariff = await api_client.get_tariff(data["tariff_id"])
            admin_message = format_booking_notification(
                user, tariff, updated_booking_data
            )

            if ADMIN_TELEGRAM_ID:
                await message.bot.send_message(
                    chat_id=ADMIN_TELEGRAM_ID, text=admin_message, parse_mode="HTML"
                )
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response_text = format_user_booking_notification(
            user, updated_booking_data, confirmed=paid
        )

        await message.answer(response_text, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π
        if paid:
            try:
                current_bookings = user.get("successful_bookings", 0)
                await api_client.update_user(
                    user["id"],  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º user["id"] –≤–º–µ—Å—Ç–æ telegram_id
                    {"successful_bookings": current_bookings + 1},
                )
                logger.info(
                    f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['id']}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def poll_payment_status(message: Message, state: FSMContext, bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        api_client = await get_api_client()
        data = await state.get_data()

        payment_id = data["payment_id"]
        payment_message_id = data["payment_message_id"]

        max_attempts = 60  # 5 –º–∏–Ω—É—Ç (60 * 5 —Å–µ–∫—É–Ω–¥)
        delay = 5
        user = None

        for attempt in range(max_attempts):
            try:
                payment_status = await api_client.check_payment_status(payment_id)
                status = payment_status.get("status")

                if status == "succeeded":
                    # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - —Å–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å
                    await create_booking_in_system(message, state, paid=True)

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if not user:
                        user = await api_client.get_user_by_telegram_id(
                            message.from_user.id
                        )

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                    booking_data = await state.get_data()
                    payment_notification = format_payment_notification(
                        user, booking_data, "SUCCESS"
                    )

                    if ADMIN_TELEGRAM_ID:
                        await bot.send_message(
                            chat_id=ADMIN_TELEGRAM_ID,
                            text=payment_notification,
                            parse_mode="HTML",
                        )

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
                    try:
                        await bot.delete_message(
                            chat_id=message.chat.id, message_id=payment_message_id
                        )
                    except Exception:
                        pass

                    return

                elif status in ["canceled", "cancelled"]:
                    # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=payment_message_id,
                        text="‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML",
                    )

                    if not user:
                        user = await api_client.get_user_by_telegram_id(
                            message.from_user.id
                        )

                    booking_data = await state.get_data()
                    payment_notification = format_payment_notification(
                        user, booking_data, "CANCELLED"
                    )

                    if ADMIN_TELEGRAM_ID:
                        await bot.send_message(
                            chat_id=ADMIN_TELEGRAM_ID,
                            text=payment_notification,
                            parse_mode="HTML",
                        )

                    await state.clear()
                    return

                elif status == "failed":
                    # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=payment_message_id,
                        text="‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                        parse_mode="HTML",
                    )

                    if not user:
                        user = await api_client.get_user_by_telegram_id(
                            message.from_user.id
                        )

                    booking_data = await state.get_data()
                    payment_notification = format_payment_notification(
                        user, booking_data, "FAILED"
                    )

                    if ADMIN_TELEGRAM_ID:
                        await bot.send_message(
                            chat_id=ADMIN_TELEGRAM_ID,
                            text=payment_notification,
                            parse_mode="HTML",
                        )

                    await state.clear()
                    return

                # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –∂–¥–µ–º
                await asyncio.sleep(delay)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                await asyncio.sleep(delay)

        # –í—Ä–µ–º—è –≤—ã—à–ª–æ - —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=payment_message_id,
                text="‚è∞ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                "–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML",
            )
        except Exception:
            pass

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await state.clear()


@router.callback_query(Booking.STATUS_PAYMENT, F.data == "cancel_payment")
async def cancel_payment(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞."""
    await callback_query.answer()

    try:
        data = await state.get_data()
        payment_id = data.get("payment_id")
        payment_message_id = data.get("payment_message_id")
        payment_task = data.get("payment_task")

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        if payment_task and not payment_task.done():
            payment_task.cancel()

        # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
        if payment_id:
            try:
                api_client = await get_api_client()
                await api_client.cancel_payment(payment_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")

        await callback_query.message.edit_text(
            "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n" "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
            parse_mode="HTML",
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞.", parse_mode="HTML"
        )


@router.callback_query(F.data == "cancel_booking")
async def cancel_booking(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await callback_query.answer()

    await callback_query.message.edit_text(
        "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å!",
        reply_markup=None,
    )

    await state.clear()


@router.callback_query(F.data == "back_to_tariffs")
async def back_to_tariffs(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤."""
    await callback_query.answer()

    try:
        keyboard = await create_tariff_keyboard(callback_query.from_user.id)

        await callback_query.message.edit_text(
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n"
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        await state.set_state(Booking.SELECT_TARIFF)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç–∞—Ä–∏—Ñ–∞–º: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None
        )


@router.callback_query(F.data == "back_to_time")
async def back_to_time(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏."""
    await callback_query.answer()

    data = await state.get_data()
    tariff_name = data.get("tariff_name", "")
    visit_date = data.get("visit_date")

    if visit_date:
        await callback_query.message.edit_text(
            f"‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è '{tariff_name}':</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {visit_date.strftime('%d.%m.%Y')}\n\n"
            "üìå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
            parse_mode="HTML",
        )
        await state.set_state(Booking.ENTER_TIME)


@router.callback_query(F.data == "main_menu")
async def main_menu(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await callback_query.answer()

    await callback_query.message.edit_text(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=None
    )

    await state.clear()


def register_book_handlers(dp) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    dp.include_router(router)
