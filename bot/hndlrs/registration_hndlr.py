import re
from typing import Optional
from aiogram import Router, F, Dispatcher, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from datetime import datetime
import os
from models.models import (
    check_and_add_user,
    get_user_by_telegram_id,
    add_user,
    Session,
    # format_registration_notification,
)
import pytz
from utils.logger import get_logger

router = Router()
MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
BOT_LINK = os.getenv("BOT_LINK", "https://t.me/partacoworking")
INVITE_LINK = os.getenv("INVITE_LINK", "https://t.me/partacoworking")
GROUP_ID = os.getenv("GROUP_ID", "-100123456789")
logger = get_logger(__name__)


def format_registration_notification(user, referrer_info=None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        referrer_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    referrer_text = ""
    if referrer_info:
        referrer_text = f"""
üë• <b>–†–µ—Ñ–µ—Ä–µ—Ä:</b>
‚îú <b>–ò–º—è:</b> {referrer_info['full_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îî <b>Telegram:</b> @{referrer_info['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: <code>{referrer_info['telegram_id']}</code>)"""
    message = f"""üéâ <b>–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨!</b>
üë§ <b>–î–∞–Ω–Ω—ã–µ:</b>
‚îú <b>–ò–º—è:</b> {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îú <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îú <b>Email:</b> {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îî <b>Telegram:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: <code>{user.telegram_id}</code>){referrer_text}
‚è∞ <i>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""
    return message.strip()


def create_register_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration"
                )
            ]
        ]
    )
    return keyboard


def create_agreement_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.

    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_to_terms")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
    )
    return keyboard


def create_invite_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø—É.

    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", url="https://t.me/partacowo"
                )
            ],
            [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    return keyboard


class Registration(StatesGroup):
    agreement = State()
    full_name = State()
    phone = State()
    email = State()


welcome_message = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ Parta! ‚ú®\n"
    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    user_id = message.from_user.id
    text_parts = message.text.split(maxsplit=1)
    ref_id = None
    if len(text_parts) > 1 and text_parts[1].isdigit():
        ref_id = int(text_parts[1])
    try:
        user, is_complete = check_and_add_user(
            user_id, message.from_user.username, ref_id
        )
        if is_complete:
            await message.answer(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=create_invite_keyboard()
            )
            return
        full_name = user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        welcome_text = welcome_message
        if ref_id:
            referrer = get_user_by_telegram_id(ref_id)
            referrer_username = (
                referrer.username if referrer else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            welcome_text += f"\n\n–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã @{referrer_username}."
        await message.answer(welcome_text, reply_markup=create_register_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start –¥–ª—è {user_id}: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "start_registration")
async def start_registration(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    await callback_query.message.answer(
        "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: https://parta-works.ru/main_rules\n–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã?",
        reply_markup=create_agreement_keyboard(),
    )
    await state.set_state(Registration.agreement)


@router.callback_query(F.data == "agree_to_terms")
async def agree_to_terms(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    user_id = callback_query.from_user.id
    try:
        user = get_user_by_telegram_id(user_id)
        if user:
            user.agreed_to_terms = True
            session = Session()
            session.add(user)
            session.commit()
            session.close()
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(Registration.full_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–ª—è {user_id}: {str(e)}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(Registration.agreement)
async def handle_invalid_agreement(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–≥–ª–∞—Å–∏—è.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.",
        reply_markup=create_agreement_keyboard(),
    )


@router.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.phone)


@router.message(Registration.phone)
async def process_phone(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    phone = message.text.strip()
    if not re.match(r"^\+?\d{10,15}$", phone):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX.")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(Registration.email)


@router.message(Registration.email)
async def process_email(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    email = message.text.strip()
    if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.")
        return
    data = await state.get_data()
    full_name = data["full_name"]
    phone = data["phone"]
    try:
        user = get_user_by_telegram_id(message.from_user.id)
        referrer_id = user.referrer_id if user else None
        add_user(
            telegram_id=message.from_user.id,
            full_name=full_name,
            phone=phone,
            email=email,
            agreed_to_terms=True,
        )
        referrer_info = None
        if referrer_id:
            referrer = get_user_by_telegram_id(referrer_id)
            if referrer:
                referrer_info = {
                    "full_name": referrer.full_name,
                    "username": referrer.username,
                    "telegram_id": referrer_id,
                }
        notification = format_registration_notification(user, referrer_info)
        await bot.send_message(ADMIN_TELEGRAM_ID, notification, parse_mode="HTML")
        invite_link = await bot.create_chat_invite_link(
            chat_id=GROUP_ID, member_limit=1
        )
        invite_url = invite_link.invite_link
        registration_success = "===‚ú®<i>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</i>‚ú®===\n\n"
        registration_info = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –§–ò–û: {full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üìß Email: {email}\n\n"
            f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: {invite_url}"
        )
        success_msg = registration_success + registration_info
        await message.answer(
            success_msg, reply_markup=create_invite_keyboard(), parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {message.from_user.id}: {str(e)}"
        )
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "info")
async def info(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    info_message = (
        "‚ÑπÔ∏è –≠—Ç–æ –±–æ—Ç –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ Parta!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "- –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @partacoworking"
    )
    await callback_query.message.answer(
        info_message, reply_markup=create_invite_keyboard()
    )


@router.callback_query(F.data == "main_menu")
async def main_menu(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")],
                [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="ticket")],
                [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
            ]
        ),
    )
    await state.clear()


def register_reg_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    Args:
        dp: Dispatcher –±–æ—Ç–∞.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    dp.include_router(router)
