import os
import re
from datetime import datetime

import pytz
from aiogram import Router, Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from dotenv import load_dotenv

from bot.config import create_user_keyboard, create_back_keyboard, RULES
from models.models import add_user, check_and_add_user, get_user_by_telegram_id

from utils.logger import get_logger

# –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
logger = get_logger(__name__)


def format_registration_notification(user, referrer_info=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ
    referrer_text = ""
    if referrer_info:
        referrer_text = f"""
üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏–ª:</b>
‚îî {referrer_info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: <code>{referrer_info.get('telegram_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>)"""

    message = f"""üéâ <b>–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨!</b>

üë§ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
‚îú <b>–ò–º—è:</b> {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îú <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>
‚îú <b>Email:</b> <code>{user.email or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>
‚îî <b>Telegram:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: <code>{user.telegram_id}</code>){referrer_text}

‚è∞ <i>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    return message.strip()


load_dotenv()

router = Router()
MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
BOT_LINK = os.getenv("BOT_LINK")
INVITE_LINK = os.getenv("INVITE_LINK")
GROUP_ID = os.getenv("GROUP_ID")


def create_register_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é".
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration"
                )
            ]
        ]
    )
    return keyboard


def create_agreement_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–æ–≥–ª–∞—Å–µ–Ω".
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_to_terms")]
        ]
    )
    return keyboard


def create_invite_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π —à–∞—Ä–∏–Ω–≥–∞.
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º", callback_data="share_invite"
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    return keyboard


class Registration(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""

    agreement = State()
    full_name = State()
    phone = State()
    email = State()


welcome_message = (
    "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PARTA!</b> üåü\n\n"
    "–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º. –ß—Ç–æ —è —É–º–µ—é:\n\n"
    "üìç <i>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ</i> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –¥–∞—Ç—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ–ø–µ–Ω—Å–ø–µ–π—Å–µ –∏–ª–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å!\n\n"
    "üõ† <i>Helpdesk</i> ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n"
    "‚ùî <i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i> ‚Äî —É–∑–Ω–∞–π—Ç–µ –æ Wi-Fi, –ø—Ä–∞–≤–∏–ª–∞—Ö –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö.\n\n"
    "üîî <b>–ê —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</b>, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –∞–∫—Ü–∏–π: https://t.me/partacowo"
)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    user_id = message.from_user.id
    text_parts = message.text.split(maxsplit=1)
    logger.info(f"/start –æ—Ç {user_id}, —Ç–µ–∫—Å—Ç: {message.text}")

    await state.clear()

    if not message.from_user:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    ref_id = None
    if len(text_parts) > 1:
        try:
            ref_id = int(text_parts[1])
        except ValueError:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –≤ –∫–æ–º–∞–Ω–¥–µ: {message.text}")

    result = check_and_add_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        referrer_id=ref_id,
    )

    if not result:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user, is_complete = result

    if is_complete:
        full_name = user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {full_name}"
        )
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
            reply_markup=create_user_keyboard(),
            parse_mode="HTML",
        )
    else:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        welcome_text = welcome_message
        if ref_id:
            referrer = get_user_by_telegram_id(ref_id)
            referrer_username = (
                f"@{referrer.username}"
                if referrer and referrer.username
                else f"ID {ref_id}"
            )
            welcome_text += f"\n\n–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {referrer_username}!"
        await message.answer(
            welcome_text,
            reply_markup=create_register_keyboard(),
            parse_mode="HTML",
        )


@router.callback_query(F.data == "invite_friend")
async def invite_friend(
    callback_query: CallbackQuery, state: FSMContext, bot: Bot
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º'. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ —à–∞—Ä–∏–Ω–≥.

    Args:
        callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    user_id = callback_query.from_user.id
    deeplink = f"{INVITE_LINK}?start={user_id}"
    share_text = (
        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ PARTA! –£—é—Ç–Ω—ã–π –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ —Å —É–¥–æ–±–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–µ—Å—Ç. "
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {deeplink}"
    )
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —à–∞—Ä–∏–Ω–≥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {deeplink}"
    )

    # await callback_query.message.delete()
    await callback_query.message.edit_text(
        # await callback_query.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=share_text
                    )
                ],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")],
            ]
        ),
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.callback_query(F.data == "start_registration")
async def start_registration(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é".
    """
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    await callback_query.message.answer(
        f'–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ <a href="{RULES}">–ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞</a>.',
        reply_markup=create_agreement_keyboard(),
        parse_mode="HTML",
    )
    await callback_query.answer()
    await state.set_state(Registration.agreement)


@router.callback_query(F.data == "agree_to_terms")
async def agree_to_terms(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–µ–Ω".
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏")
    try:
        add_user(telegram_id=callback_query.from_user.id, agreed_to_terms=True)
        await callback_query.answer()
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ agreed_to_terms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}: {e}"
        )
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await callback_query.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–°–æ–≥–ª–∞—Å–µ–Ω üü¢", callback_data="agree_to_terms"
                    )
                ]
            ]
        )
    )
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(Registration.full_name)


@router.message(Registration.agreement)
async def handle_invalid_agreement(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–≥–ª–∞—Å–∏—è.
    """
    logger.warning(
        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
    )
    await message.answer(
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–≥–ª–∞—Å–µ–Ω" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. <a href="{RULES}">–ü—Ä–∞–≤–∏–ª–∞ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞</a>.',
        reply_markup=create_agreement_keyboard(),
        parse_mode="HTML",
    )


@router.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û."""
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79991112233 –∏–ª–∏ 89991112233):")
    await state.set_state(Registration.phone)


@router.message(Registration.phone)
async def process_phone(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = message.text.strip()
    if not re.match(r"^(?:\+?\d{11})$", phone):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +79991112233 –∏–ª–∏ 89991112233. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@domain.com):")
    await state.set_state(Registration.email)


@router.message(Registration.email)
async def process_email(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å email.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    email = message.text.strip()
    if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    data = await state.get_data()
    full_name = data["full_name"]
    phone = data["phone"]

    try:
        user = get_user_by_telegram_id(message.from_user.id)
        referrer_username = None
        referrer_id = user.referrer_id if user else None
        if user and user.referrer_id:
            referrer = get_user_by_telegram_id(user.referrer_id)
            referrer_username = (
                f"@{referrer.username}"
                if referrer and referrer.username
                else f"ID {user.referrer_id}"
            )

        add_user(
            telegram_id=message.from_user.id,
            full_name=full_name,
            phone=phone,
            email=email,
            username=message.from_user.username,
            reg_date=datetime.now(MOSCOW_TZ),
            referrer_id=referrer_id,  # –ü–µ—Ä–µ–¥–∞–µ–º referrer_id —è–≤–Ω–æ
        )
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = get_user_by_telegram_id(message.from_user.id)
        if not user:
            logger.error(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            )
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        invite_url = "https://t.me/partacowo"  # Fallback-—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        try:
            invite_link = await bot.create_chat_invite_link(
                chat_id=GROUP_ID,
                name="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",
                member_limit=1,
            )
            invite_url = invite_link.invite_link
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {GROUP_ID}: {invite_url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏: {str(e)}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback-—Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª
        registration_success = "===‚ú®<i>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</i>‚ú®===\n\n"
        registration_info = (
            "üíº <b>PARTA –±–æ—Ç</b> –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞!\n\n"
            "üõú WiFi: <b>Parta</b>\n"
            "–ü–∞—Ä–æ–ª—å: <code>Parta2024</code>\n\n"
            f"üîî <b>–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É</b>: <a href='{invite_url}'>PARTA COMMUNITY</a>"
        )
        success_msg = registration_success + registration_info
        await message.answer(
            success_msg, reply_markup=create_user_keyboard(), parse_mode="HTML"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_TELEGRAM_ID:
            try:
                referrer_info = None
                if referrer_username:
                    referrer_info = {
                        "username": referrer_username,
                        "telegram_id": user.referrer_id,
                    }
                notification = format_registration_notification(
                    user=user, referrer_info=referrer_info
                )
                await bot.send_message(
                    chat_id=ADMIN_TELEGRAM_ID, text=notification, parse_mode="HTML"
                )
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_TELEGRAM_ID}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {message.from_user.id}: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == "info")
async def info(callback_query: CallbackQuery, state: FSMContext) -> None:
    # await callback_query.message.delete()
    info_message = (
        "üíº <b>PARTA –±–æ—Ç</b> –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞!<u>\n\n"
        "üõú WiFi: <b>Parta</b> –ü–∞—Ä–æ–ª—å:</u> <code>Parta2024</code>\n\n"
        "- üõ† <b>HelpDesk - –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É</b> –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–æ—Å—å–±—ã.\n"
        "- üñ• <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞</b> –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å <b>–æ–ø–ª–∞—Ç–æ–π –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ</b>.\n\n"
        "üîî <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</b>, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –∞–∫—Ü–∏–π: <a href='https://t.me/partacowo'>–ù–∞—à –∫–∞–Ω–∞–ª</a>"
    )
    await callback_query.message.edit_text(
        # await callback_query.message.answer(
        info_message,
        reply_markup=create_back_keyboard(),
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu(callback_query: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    # await callback_query.message.delete()
    await callback_query.message.edit_text(
        # await callback_query.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_user_keyboard(),
        parse_mode="HTML",
    )
    await callback_query.answer()


def register_reg_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    dp.include_router(router)
