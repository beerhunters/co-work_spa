import os
import pytz
from datetime import datetime
from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from utils.logger import get_logger
from utils.api_client import get_api_client
from bot.config import create_user_keyboard, save_user_avatar

logger = get_logger(__name__)

router = Router()
MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
BOT_LINK = os.getenv("BOT_LINK")
INVITE_LINK = os.getenv("INVITE_LINK")
GROUP_ID = os.getenv("GROUP_ID")

INFO_MESSAGE = (
    "‚ÑπÔ∏è <b>–û PARTA –∫–æ–≤–æ—Ä–∫–∏–Ω–≥</b>\n\n"
    "PARTA - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.\n\n"
    "üè¢ <b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>\n"
    "‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –≤ open space\n"
    "‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã\n"
    "‚Ä¢ –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (1 –ì–±–∏—Ç/—Å)\n"
    "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ—Ñ–µ, —á–∞–π –∏ —Å–Ω–µ–∫–∏\n"
    "‚Ä¢ –ó–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞ –∏ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞\n"
    "‚Ä¢ –ü–µ—á–∞—Ç—å –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
    "‚Ä¢ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n"
    "‚è∞ <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>\n"
    "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ 24/7\n\n"
    "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ú–∞–ª—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç –í–û, –¥. 55\n"
    "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (812) 990-00-55\n"
    "üåê <b>–°–∞–π—Ç:</b> parta-works.ru\n\n"
    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
)


def format_registration_notification(user, referrer_info=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    referrer_text = ""
    if referrer_info:
        referrer_text = f"""
üîó <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:</b>
   ‚Ä¢ Username: @{referrer_info['username']}
   ‚Ä¢ ID: {referrer_info['telegram_id']}
"""

    message = f"""üéâ <b>–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù!</b>

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üì± <b>Telegram ID:</b> {user.get('telegram_id')}
üë§ <b>Username:</b> @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìù <b>–ò–º—è:</b> {user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìß <b>Email:</b> {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üåç <b>–Ø–∑—ã–∫:</b> {user.get('language_code', 'ru')}
{referrer_text}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è."""
    return message


def create_register_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="start_registration"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ", callback_data="info_reg"
                )
            ],
        ]
    )
    return keyboard


def create_agreement_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="agree_to_terms"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ß–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞", url="https://parta-works.ru/main_rules"
                )
            ],
        ]
    )


def create_invite_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends"
                )
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )


class Registration(StatesGroup):
    agreement = State()
    full_name = State()
    phone = State()
    email = State()


welcome_message = (
    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PARTA –∫–æ–≤–æ—Ä–∫–∏–Ω–≥!</b>\n\n"
    "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
    "‚Ä¢ üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ\n"
    "‚Ä¢ üè¢ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é –∫–æ–º–Ω–∞—Ç—É\n"
    "‚Ä¢ üé´ –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
    "‚Ä¢ üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Å–∫–∏–¥–æ–∫\n"
    "‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã\n\n"
    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    language_code = message.from_user.language_code or "ru"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    text_parts = message.text.split(maxsplit=1)
    ref_id = None
    if len(text_parts) > 1:
        try:
            ref_id = int(text_parts[1])
        except ValueError:
            pass
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç–∞
        api_client = await get_api_client()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        result = await api_client.check_and_add_user(
            telegram_id=user_id,
            username=username or "",
            language_code=language_code,
            referrer_id=ref_id,
        )

        user = result.get("user")
        is_new = result.get("is_new", False)
        is_complete = result.get("is_complete", False)

        if is_complete:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            full_name = user.get("full_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            await message.answer(
                f"üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {full_name}!</b>\n\n"
                "–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ PARTA –∫–æ–≤–æ—Ä–∫–∏–Ω–≥.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=create_user_keyboard(),
                parse_mode="HTML",
            )
        elif is_new:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            welcome_text = welcome_message

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
            if ref_id and is_new:
                referrer = await api_client.get_user_by_telegram_id(ref_id)
                if referrer:
                    referrer_username = (
                        f"@{referrer.get('username')}"
                        if referrer.get("username")
                        else f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{referrer.get('telegram_id')}"
                    )
                    welcome_text = (
                        f"üéä –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç {referrer_username}!\n\n"
                        + welcome_text
                    )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            await message.answer(
                welcome_text, reply_markup=create_register_keyboard(), parse_mode="HTML"
            )
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        else:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º!",
                reply_markup=create_register_keyboard(),
            )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.callback_query(F.data == "start_registration")
async def start_registration(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback_query.message.edit_text(
        "üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ß–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞¬ª –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞.\n\n"
        "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è¬ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=create_agreement_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(Registration.agreement)
    await callback_query.answer()


@router.callback_query(Registration.agreement, F.data == "agree_to_terms")
async def agree_to_terms(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç —Å–æ–≥–ª–∞—Å–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏
    await state.update_data(agreed_to_terms=True)

    await callback_query.message.edit_text(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –®–∞–≥ 1/3</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):",
        parse_mode="HTML",
    )
    await state.set_state(Registration.full_name)
    await callback_query.answer()


@router.message(Registration.agreement)
async def handle_invalid_agreement(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.",
        reply_markup=create_agreement_keyboard(),
    )


@router.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    full_name = message.text.strip()

    if len(full_name) < 2:
        await message.answer("‚ö†Ô∏è –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return

    if len(full_name) > 100:
        await message.answer("‚ö†Ô∏è –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        return

    await state.update_data(full_name=full_name)
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –®–∞–≥ 2/3</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
        parse_mode="HTML",
    )
    await state.set_state(Registration.phone)


@router.message(Registration.phone)
async def process_phone(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    import re

    phone = message.text.strip()

    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    phone_digits = re.sub(r"[^\d+]", "", phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not re.match(r"^(\+7|8|7)\d{10}$", phone_digits):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
        )
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +7
    if phone_digits.startswith("8"):
        phone_digits = "+7" + phone_digits[1:]
    elif phone_digits.startswith("7"):
        phone_digits = "+" + phone_digits

    await state.update_data(phone=phone_digits)
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –®–∞–≥ 3/3</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:",
        parse_mode="HTML",
    )
    await state.set_state(Registration.email)


@router.message(Registration.email)
async def process_email(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    import re

    email = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
    if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", email):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        full_name = data["full_name"]
        phone = data["phone"]
        agreed_to_terms = data.get("agreed_to_terms", True)

        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç–∞
        api_client = await get_api_client()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await api_client.get_user_by_telegram_id(message.from_user.id)

        if user:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar_filename = None
            try:
                file_path = await save_user_avatar(bot, message.from_user.id)
                if file_path:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ë–î
                    avatar_filename = os.path.basename(file_path)
                    logger.info(f"–ê–≤–∞—Ç–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {avatar_filename}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            current_time = datetime.now(MOSCOW_TZ)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            update_data = {
                "full_name": full_name,
                "phone": phone,
                "email": email,
                "agreed_to_terms": agreed_to_terms,
                "reg_date": current_time.isoformat(),  # –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if avatar_filename:
                update_data["avatar"] = avatar_filename

            updated_user = await api_client.update_user(user.get("id"), update_data)

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ API
            notification_data = {
                "user_id": user.get("id"),
                "message": f"–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {full_name} (@{message.from_user.username or '–±–µ–∑ username'})",
                "target_url": f"/users/{user.get('id')}",
            }

            try:
                await api_client.send_notification(
                    user.get("id"),
                    notification_data["message"],
                    notification_data["target_url"],
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ
            referrer_info = None
            if user.get("referrer_id"):
                referrer = await api_client.get_user_by_telegram_id(
                    user.get("referrer_id")
                )
                if referrer:
                    referrer_info = {
                        "username": referrer.get("username"),
                        "telegram_id": referrer.get("telegram_id"),
                    }

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
            invite_url = "https://t.me/partacowo"
            if GROUP_ID:
                try:
                    invite_link = await bot.create_chat_invite_link(
                        chat_id=GROUP_ID, member_limit=1, creates_join_request=False
                    )
                    invite_url = invite_link.invite_link
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            success_msg = (
                "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "üõú WiFi: <b>Parta</b> –ü–∞—Ä–æ–ª—å: <code>Parta2024</code>\n\n"
                f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìß Email: {email}\n\n"
                f"üéâ –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n\n"
                f"üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
                f"‚Ä¢ –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é\n"
                f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã\n"
                f"‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: {invite_url}"
            )

            await message.answer(
                success_msg, parse_mode="HTML", reply_markup=create_invite_keyboard()
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram
            if ADMIN_TELEGRAM_ID:
                notification = format_registration_notification(
                    updated_user, referrer_info
                )
                try:
                    await bot.send_message(
                        ADMIN_TELEGRAM_ID, notification, parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.callback_query(F.data == "invite_friends")
async def invite_friends(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π"""
    user_id = callback_query.from_user.id
    deeplink = f"{INVITE_LINK}?start={user_id}"

    share_text = (
        f"üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ PARTA –∫–æ–≤–æ—Ä–∫–∏–Ω–≥!\n\n"
        f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –º–æ—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
        f"{deeplink}"
    )
    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=share_text
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                    )
                ],
            ]
        ),
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.callback_query(F.data == "info")
async def info(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ"""
    info_message = INFO_MESSAGE

    await callback_query.message.edit_text(
        info_message,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
            ]
        ),
    )
    await callback_query.answer()


@router.callback_query(F.data == "info_reg")
async def info(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ"""
    info_message = INFO_MESSAGE

    await callback_query.message.edit_text(
        info_message,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")],
            ]
        ),
    )
    await callback_query.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    await callback_query.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_user_keyboard(),
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    await callback_query.message.edit_text(
        welcome_message, reply_markup=create_register_keyboard(), parse_mode="HTML"
    )
    await callback_query.answer()


def register_reg_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
