# import os
#
# from aiogram import Router, Bot, F, Dispatcher
# from aiogram.filters import StateFilter
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.types import (
#     Message,
#     CallbackQuery,
#     InlineKeyboardMarkup,
#     InlineKeyboardButton,
# )
#
# from bot.config import create_user_keyboard, create_back_keyboard
# from models.models import create_ticket
# from utils.logger import get_logger
#
# # –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
# logger = get_logger(__name__)
#
# router = Router()
# ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
#
#
# class TicketForm(StatesGroup):
#     """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
#
#     DESCRIPTION = State()
#     ASK_PHOTO = State()
#     PHOTO = State()
#
#
# def create_helpdesk_keyboard() -> InlineKeyboardMarkup:
#     """
#     –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Helpdesk.
#
#     Returns:
#         InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π Helpdesk –∏ –æ—Ç–º–µ–Ω—ã.
#     """
#     try:
#         keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [
#                     InlineKeyboardButton(
#                         text="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_ticket"
#                     )
#                 ],
#                 [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
#             ]
#         )
#         logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Helpdesk")
#         return keyboard
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Helpdesk: {str(e)}")
#         return InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
#             ]
#         )
#
#
# def create_photo_choice_keyboard() -> InlineKeyboardMarkup:
#     """
#     –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ.
#
#     Returns:
#         InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–î–∞', '–ù–µ—Ç' –∏ '–û—Ç–º–µ–Ω–∞'.
#     """
#     logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ")
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(text="–î–∞", callback_data="add_photo"),
#                 InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_photo"),
#             ],
#             [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
#         ]
#     )
#     return keyboard
#
#
# @router.callback_query(F.data == "helpdesk")
# async def start_helpdesk(
#     callback_query: CallbackQuery, state: FSMContext, bot: Bot
# ) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'Helpdesk'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.
#
#     Args:
#         callback_query: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
#         state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
#         bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
#     """
#     await state.set_state(TicketForm.DESCRIPTION)
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await state.update_data(telegram_id=callback_query.from_user.id)
#     await callback_query.message.edit_text(
#         "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ:",
#         reply_markup=create_back_keyboard(),
#     )
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
#     await callback_query.answer()
#
#
# @router.message(TicketForm.DESCRIPTION)
# async def process_description(message: Message, state: FSMContext) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ.
#
#     Args:
#         message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.
#         state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
#     """
#     description = message.text.strip()
#     if not description:
#         await message.answer(
#             "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
#             reply_markup=create_back_keyboard(),
#         )
#         logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
#         return
#
#     await state.update_data(description=description)
#     await state.set_state(TicketForm.ASK_PHOTO)
#     await message.answer(
#         "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ?",
#         reply_markup=create_photo_choice_keyboard(),
#     )
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")
#
#
# @router.callback_query(TicketForm.ASK_PHOTO, F.data == "add_photo")
# async def process_add_photo(callback_query: CallbackQuery, state: FSMContext) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ.
#
#     Args:
#         callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
#         state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
#     """
#     await state.set_state(TicketForm.PHOTO)
#     await callback_query.message.edit_text(
#         text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
#         reply_markup=create_back_keyboard(),
#     )
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
#     await callback_query.answer()
#
#
# @router.callback_query(TicketForm.ASK_PHOTO, F.data == "no_photo")
# async def process_skip_photo(callback_query: CallbackQuery, state: FSMContext) -> None:
#     try:
#         data = await state.get_data()
#         telegram_id = data.get("telegram_id")
#         description = data.get("description")
#
#         # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ
#         ticket, telegram_message = create_ticket(
#             user_id=telegram_id, description=description, photo_id=None
#         )
#
#         if ticket and telegram_message:
#             try:
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram
#                 await callback_query.bot.send_message(
#                     chat_id=ADMIN_TELEGRAM_ID, text=telegram_message, parse_mode="HTML"
#                 )
#                 logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ #{ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
#
#             await callback_query.message.edit_text(
#                 "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
#                 f"üè∑ <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{ticket.id}\n"
#                 "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
#                 reply_markup=create_user_keyboard(),
#                 parse_mode="HTML",
#             )
#             logger.info(
#                 f"–¢–∏–∫–µ—Ç #{ticket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_id}"
#             )
#         else:
#             await callback_query.message.edit_text(
#                 "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
#                 reply_markup=create_user_keyboard(),
#             )
#             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ process_skip_photo: {e}")
#         await callback_query.message.edit_text(
#             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
#             reply_markup=create_user_keyboard(),
#         )
#
#     await callback_query.answer()
#     await state.clear()
#
#
# @router.message(TicketForm.PHOTO, F.content_type == "photo")
# async def process_photo(message: Message, state: FSMContext, bot: Bot) -> None:
#     try:
#         photo_id = message.photo[-1].file_id
#         data = await state.get_data()
#         telegram_id = data.get("telegram_id")
#         description = data.get("description")
#
#         # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —Å —Ñ–æ—Ç–æ
#         ticket, telegram_message = create_ticket(
#             user_id=telegram_id, description=description, photo_id=photo_id
#         )
#
#         if ticket and telegram_message:
#             try:
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ Telegram
#                 await bot.send_photo(
#                     chat_id=ADMIN_TELEGRAM_ID,
#                     photo=photo_id,
#                     caption=telegram_message,
#                     parse_mode="HTML",
#                 )
#                 logger.info(
#                     f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ #{ticket.id} —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É"
#                 )
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
#                 # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
#                 try:
#                     await bot.send_message(
#                         chat_id=ADMIN_TELEGRAM_ID,
#                         text=telegram_message,
#                         parse_mode="HTML",
#                     )
#                     logger.info(
#                         f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ #{ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É"
#                     )
#                 except Exception as e2:
#                     logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e2}")
#
#             await message.answer(
#                 "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
#                 f"üè∑ <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{ticket.id}\n"
#                 "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
#                 reply_markup=create_user_keyboard(),
#                 parse_mode="HTML",
#             )
#             logger.info(
#                 f"–¢–∏–∫–µ—Ç #{ticket.id} —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_id}"
#             )
#         else:
#             await message.answer(
#                 "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
#                 reply_markup=create_user_keyboard(),
#             )
#             logger.error(
#                 f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç —Å —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}"
#             )
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ process_photo: {e}")
#         await message.answer(
#             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
#             reply_markup=create_user_keyboard(),
#         )
#
#     await state.clear()
#
#
# @router.message(TicketForm.PHOTO, ~F.content_type.in_(["photo"]))
# async def process_invalid_photo(message: Message, state: FSMContext) -> None:
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ."""
#     await message.answer(
#         "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ, –∞ –Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.",
#         reply_markup=create_back_keyboard(),
#     )
#     logger.warning(
#         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ PHOTO"
#     )
#
#
# @router.callback_query(
#     StateFilter(TicketForm.DESCRIPTION, TicketForm.ASK_PHOTO, TicketForm.PHOTO),
#     F.data == "cancel",
# )
# @router.callback_query(
#     StateFilter(TicketForm.DESCRIPTION, TicketForm.ASK_PHOTO, TicketForm.PHOTO),
#     F.data == "main_menu",
# )
# async def cancel_ticket_creation(
#     callback_query: CallbackQuery, state: FSMContext
# ) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.
#
#     Args:
#         callback_query: Callback-–∑–∞–ø—Ä–æ—Å.
#         state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
#     """
#     await state.clear()
#     await callback_query.message.edit_text(
#         text="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
#         reply_markup=create_user_keyboard(),
#     )
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
#     await callback_query.answer()
#
#
# def register_ticket_handlers(dp: Dispatcher) -> None:
#     """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤."""
#     dp.include_router(router)
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ API
"""
import os
import pytz
from datetime import datetime
from typing import Optional
from aiogram import Router, F, Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from utils.logger import get_logger
from utils.api_client import get_api_client
from bot.config import create_back_keyboard

logger = get_logger(__name__)

router = Router()
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
MOSCOW_TZ = pytz.timezone("Europe/Moscow")


class TicketForm(StatesGroup):
    DESCRIPTION = State()
    ASK_PHOTO = State()
    PHOTO = State()


def create_helpdesk_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket"
                )
            ],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    return keyboard


def create_photo_choice_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
            [
                InlineKeyboardButton(
                    text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data="no_photo"
                )
            ],
        ]
    )


def format_ticket_notification(user, ticket_data) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    status_emojis = {"OPEN": "üü¢", "IN_PROGRESS": "üü°", "CLOSED": "üî¥"}
    status = ticket_data.get("status", "OPEN")
    status_emoji = status_emojis.get(status, "‚ö™")

    description = ticket_data.get("description", "")
    if len(description) > 200:
        description = description[:200] + "..."

    photo_info = ""
    if ticket_data.get("photo_id"):
        photo_info = "\nüì∏ <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ</b>"

    message = f"""üé´ <b>–ù–û–í–´–ô –¢–ò–ö–ï–¢!</b> {status_emoji}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± <b>Telegram:</b> @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description}{photo_info}

üÜî <b>ID —Ç–∏–∫–µ—Ç–∞:</b> #{ticket_data.get('id', 'N/A')}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')}

üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""

    return message


@router.callback_query(F.data == "support")
async def support_menu(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await callback_query.message.edit_text(
        "üé´ <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_helpdesk_keyboard(),
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.callback_query(F.data == "create_ticket")
async def start_ticket_creation(
    callback_query: CallbackQuery, state: FSMContext
) -> None:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(telegram_id=callback_query.from_user.id)

    await callback_query.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
        parse_mode="HTML",
    )
    await state.set_state(TicketForm.DESCRIPTION)
    await callback_query.answer()


@router.message(TicketForm.DESCRIPTION)
async def process_description(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    description = message.text.strip()

    if len(description) < 10:
        await message.answer(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"
        )
        return

    await state.update_data(description=description)

    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é?",
        reply_markup=create_photo_choice_keyboard(),
    )
    await state.set_state(TicketForm.ASK_PHOTO)


@router.callback_query(TicketForm.ASK_PHOTO, F.data == "add_photo")
async def process_add_photo(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
    await callback_query.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –≤–∞—à–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º:"
    )
    await state.set_state(TicketForm.PHOTO)
    await callback_query.answer()


@router.callback_query(TicketForm.ASK_PHOTO, F.data == "no_photo")
async def process_skip_photo(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"""
    data = await state.get_data()
    telegram_id = data.get("telegram_id")
    description = data.get("description")

    await create_ticket(
        callback_query.message, telegram_id, description, None, callback_query.bot
    )

    await state.clear()
    await callback_query.answer()


@router.message(TicketForm.PHOTO, F.content_type == "photo")
async def process_photo(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"""
    photo_id = message.photo[-1].file_id

    data = await state.get_data()
    description = data.get("description")

    await create_ticket(message, message.from_user.id, description, photo_id, bot)

    await state.clear()


@router.message(TicketForm.PHOTO, ~F.content_type.in_(["photo"]))
async def process_invalid_photo(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ¬ª",
        reply_markup=create_photo_choice_keyboard(),
    )
    await state.set_state(TicketForm.ASK_PHOTO)


async def create_ticket(
    message: Message,
    telegram_id: int,
    description: str,
    photo_id: Optional[str],
    bot: Bot,
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ API"""
    api_client = await get_api_client()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await api_client.get_user_by_telegram_id(telegram_id)

    if not user:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=create_back_keyboard(),
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ API
    ticket_data = {
        "user_id": telegram_id,
        "description": description,
        "photo_id": photo_id,
        "status": "OPEN",
    }

    result = await api_client.create_ticket(ticket_data)

    if "error" in result:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_keyboard(),
        )
        return

    ticket_id = result.get("id")

    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ API
    notification_data = {
        "user_id": user.get("id"),
        "message": f"–ù–æ–≤–∞—è —Ç–∏–∫–µ—Ç",
        "target_url": f"/tickets/{ticket_id}",
    }

    try:
        await api_client.send_notification(
            user.get("id"),
            notification_data["message"],
            notification_data["target_url"],
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    ticket_notification_data = {
        "id": ticket_id,
        "description": description,
        "photo_id": photo_id,
        "status": "OPEN",
    }

    admin_message = format_ticket_notification(user, ticket_notification_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_TELEGRAM_ID:
        try:
            if photo_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
                await bot.send_photo(
                    ADMIN_TELEGRAM_ID,
                    photo=photo_id,
                    caption=admin_message,
                    parse_mode="HTML",
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await bot.send_message(
                    ADMIN_TELEGRAM_ID, admin_message, parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        f"üÜî –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket_id}\n"
        f"üìã –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç–æ\n\n"
        f"–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2-4 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                    )
                ],
            ]
        ),
    )


@router.callback_query(F.data == "my_tickets")
async def show_my_tickets(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    api_client = await get_api_client()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await api_client.get_user_by_telegram_id(callback_query.from_user.id)

    if not user:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=create_back_keyboard()
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
    tickets = await api_client.get_user_tickets(callback_query.from_user.id)

    tickets_text = "üìã <b>–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n"

    if tickets:
        status_emojis = {"–û—Ç–∫—Ä—ã—Ç–∞": "üü¢", "–í —Ä–∞–±–æ—Ç–µ": "üü°", "–ó–∞–∫—Ä—ã—Ç–∞": "üî¥"}

        for ticket in tickets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            ticket_id = ticket.get("id")
            status = ticket.get("status", "OPEN")
            status_emoji = status_emojis.get(status, "‚ö™")
            description = ticket.get("description", "")

            # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(description) > 50:
                description = description[:50] + "..."

            created_at = ticket.get("created_at")
            if created_at:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
                    date_str = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            tickets_text += f"{status_emoji} <b>#{ticket_id}</b> - {status}\n"
            tickets_text += f"   üìù {description}\n"
            tickets_text += f"   üìÖ {date_str}\n\n"

        if len(tickets) > 10:
            tickets_text += (
                f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑ {len(tickets)} –æ–±—Ä–∞—â–µ–Ω–∏–π</i>\n"
            )
    else:
        tickets_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.\n"

    tickets_text += "\nüí° <i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>"

    await callback_query.message.edit_text(
        tickets_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="support")],
            ]
        ),
    )
    await callback_query.answer()
    # tickets = await api_client.get_user_tickets(user.get("id"))

    tickets_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π."

    await callback_query.message.edit_text(
        tickets_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="support")],
            ]
        ),
    )
    await callback_query.answer()


def register_ticket_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–∏–∫–µ—Ç–æ–≤"""
    dp.include_router(router)
