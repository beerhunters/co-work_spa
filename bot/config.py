# import asyncio
# import os
# from datetime import datetime
# from io import BytesIO
# from typing import Optional, Tuple
#
# import aiofiles
# import aiohttp
# import pytz
# from aiogram import Bot
# from aiogram.types import (
#     InlineKeyboardMarkup,
#     InlineKeyboardButton,
#     UserProfilePhotos,
#     File,
# )
# from dotenv import load_dotenv
# from yookassa import Payment, Configuration
#
# from utils.logger import get_logger
#
# # –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
# logger = get_logger(__name__)
#
# load_dotenv()
#
# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YooKassa
# Configuration.account_id = os.getenv("YOKASSA_ACCOUNT_ID")
# Configuration.secret_key = os.getenv("YOKASSA_SECRET_KEY")
#
#
# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Rubitime
# RUBITIME_API_KEY = os.getenv("RUBITIME_API_KEY")
# RUBITIME_BASE_URL = "https://rubitime.ru/api2/"
# MOSCOW_TZ = pytz.timezone("Europe/Moscow")
# ADMIN_URL = "https://t.me/partacoworking"
#
# RULES = "https://parta-works.ru/main_rules"
#
# # btn_back = ‚¨ÖÔ∏è –ù–∞–∑–∞–¥
# # rules_button = üìÑ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
# # contact_admin_button = üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#
#
# def create_user_keyboard() -> InlineKeyboardMarkup:
#     """
#     –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
#     """
#     logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="booking")],
#             [InlineKeyboardButton(text="üõ†Ô∏è Helpdesk", callback_data="helpdesk")],
#             [InlineKeyboardButton(text="‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
#             [
#                 InlineKeyboardButton(
#                     text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite_friend"
#                 )
#             ],
#             [
#                 InlineKeyboardButton(
#                     text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=ADMIN_URL
#                 )
#             ],
#         ]
#     )
#     return keyboard
#
#
# def create_back_keyboard() -> InlineKeyboardMarkup:
#     """
#     –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
#     """
#     logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         ]
#     )
#     return keyboard
#
#
# async def save_user_avatar(bot: Bot, user_id: int) -> Optional[str]:
#     """
#     –ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–ø–∫—É avatars.
#
#     Args:
#         bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
#         user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#
#     Returns:
#         Optional[str]: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
#
#     –ê—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∞: O(1) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API, O(n) –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞, –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.
#     """
#     logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
#         profile_photos: UserProfilePhotos = await bot.get_user_profile_photos(
#             user_id, limit=1
#         )
#         if not profile_photos.photos or not profile_photos.photos[0]:
#             logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏")
#             return None
#
#         # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–Ω–∞–∏–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏)
#         photo = profile_photos.photos[0][-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä ‚Äî —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
#         file: File = await bot.get_file(photo.file_id)
#
#         # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É avatars, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
#         avatars_dir = "avatars"
#         if not os.path.exists(avatars_dir):
#             os.makedirs(avatars_dir)
#             logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {avatars_dir}")
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
#         file_path = os.path.join(avatars_dir, f"{user_id}.jpg")
#
#         # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
#         file_content = await bot.download_file(file.file_path)
#         if file_content is None:
#             logger.error(
#                 f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: file_content is None"
#             )
#             return None
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø file_content
#         if isinstance(file_content, bytes):
#             content_bytes = file_content
#         elif isinstance(file_content, BytesIO):
#             content_bytes = (
#                 file_content.read()
#             )  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ BytesIO –Ω–µ —Ç—Ä–µ–±—É–µ—Ç await
#         else:
#             logger.error(
#                 f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø file_content –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {type(file_content)}"
#             )
#             return None
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
#         async with aiofiles.open(file_path, "wb") as f:
#             await f.write(content_bytes)
#
#         logger.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}")
#         return file_path
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è {user_id}: {str(e)}")
#         return None
#
#
# async def rubitime(method: str, extra_params: dict) -> Optional[str]:
#     """
#     –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Rubitime API.
#
#     Args:
#         method: –ú–µ—Ç–æ–¥ API ('create_record', 'update_record', 'get_record', 'remove_record').
#         extra_params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
#
#     Returns:
#         Optional[str]: ID –∑–∞–ø–∏—Å–∏ (–¥–ª—è create_record) –∏–ª–∏ None.
#     """
#     if method == "create_record":
#         url = f"{RUBITIME_BASE_URL}create-record"
#         params = {
#             "branch_id": 12595,
#             "cooperator_id": 25786,
#             "created_at": datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S"),
#             "status": 0,
#             "source": "Telegram",
#             **extra_params,
#         }
#     else:
#         logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Rubitime: {method}")
#         return None
#
#     params["rk"] = RUBITIME_API_KEY
#
#     async with aiohttp.ClientSession() as session:
#         try:
#             async with session.post(url, json=params) as response:
#                 if response.status == 200:
#                     data = await response.json()
#                     if data.get("status") == "ok":
#                         if method == "create_record":
#                             record_id = data.get("data", {}).get("id")
#                             logger.debug(f"–°–æ–∑–¥–∞–Ω–æ –≤ Rubitime: ID {record_id}")
#                             return record_id
#                         logger.debug(f"–ó–∞–ø—Ä–æ—Å Rubitime —É—Å–ø–µ—à–µ–Ω: {method}")
#                         return None
#                     else:
#                         logger.warning(
#                             f"–û—à–∏–±–∫–∞ Rubitime: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
#                         )
#                         return None
#                 else:
#                     logger.error(
#                         f"–û—à–∏–±–∫–∞ HTTP {response.status}: {await response.text()}"
#                     )
#                     return None
#         except Exception as e:
#             logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Rubitime: {str(e)}")
#             return None
#
#
# async def create_payment(
#     description: str, amount: float
# ) -> Tuple[Optional[str], Optional[str]]:
#     """
#     –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa.
#
#     Args:
#         description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.
#         amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.
#
#     Returns:
#         Tuple[Optional[str], Optional[str]]: ID –ø–ª–∞—Ç–µ–∂–∞ –∏ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ (None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
#     """
#     try:
#         payment = Payment.create(
#             {
#                 "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
#                 "confirmation": {
#                     "type": "redirect",
#                     "return_url": os.getenv("BOT_LINK"),
#                 },
#                 "capture": True,
#                 "description": description,
#             }
#         )
#         logger.debug(
#             f"–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω: id={payment.id}, url={payment.confirmation.confirmation_url}"
#         )
#         return payment.id, payment.confirmation.confirmation_url
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
#         return None, None
#
#
# async def check_payment_status(payment_id: str) -> Optional[str]:
#     """
#     –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa.
#
#     Args:
#         payment_id: ID –ø–ª–∞—Ç–µ–∂–∞.
#
#     Returns:
#         Optional[str]: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ('succeeded', 'canceled', etc.) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
#     """
#     try:
#         payment = await asyncio.get_event_loop().run_in_executor(
#             None, Payment.find_one, payment_id
#         )
#         return payment.status
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
#         return None
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
"""
import os
import pytz
from pathlib import Path
from typing import Optional
from datetime import datetime

from aiogram import Bot
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    UserProfilePhotos,
    File,
)

from utils.logger import get_logger

logger = get_logger(__name__)

MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_URL = "https://t.me/partacoworking"
RULES = "https://parta-works.ru/main_rules"


def create_user_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")],
            [InlineKeyboardButton(text="üé´ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [
                InlineKeyboardButton(
                    text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends"
                )
            ],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
            [
                InlineKeyboardButton(
                    text="üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=ADMIN_URL
                )
            ],
            [InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞", url=RULES)],
        ]
    )
    return keyboard


def create_back_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    )


async def save_user_avatar(bot: Bot, user_id: int) -> Optional[str]:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        profile_photos: UserProfilePhotos = await bot.get_user_profile_photos(
            user_id=user_id, limit=1
        )

        if not profile_photos.photos:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return None

        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
        photo = profile_photos.photos[0][-1]
        file: File = await bot.get_file(photo.file_id)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        avatars_dir = "avatars"
        Path(avatars_dir).mkdir(exist_ok=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = os.path.join(avatars_dir, f"{user_id}.jpg")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = await bot.download_file(file.file_path)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–π—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(file_content, "read"):
            content_bytes = file_content.read()
        else:
            content_bytes = (
                file_content.getvalue()
                if hasattr(file_content, "getvalue")
                else bytes(file_content)
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, "wb") as f:
            f.write(content_bytes)

        logger.info(f"–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None
