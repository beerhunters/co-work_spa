# import asyncio
# import os
# from datetime import datetime
# from io import BytesIO
# from typing import Optional, Tuple
#
# import aiofiles
# import aiohttp
# import pytz
# from aiogram import Bot
# from aiogram.types import (
#     InlineKeyboardMarkup,
#     InlineKeyboardButton,
#     UserProfilePhotos,
#     File,
# )
# from dotenv import load_dotenv
# from yookassa import Payment, Configuration
#
# from utils.logger import get_logger
#
# # –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
# logger = get_logger(__name__)
#
# load_dotenv()
#
# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YooKassa
# Configuration.account_id = os.getenv("YOKASSA_ACCOUNT_ID")
# Configuration.secret_key = os.getenv("YOKASSA_SECRET_KEY")
#
# async def create_payment(
#     description: str, amount: float
# ) -> Tuple[Optional[str], Optional[str]]:
#     """
#     –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa.
#
#     Args:
#         description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.
#         amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.
#
#     Returns:
#         Tuple[Optional[str], Optional[str]]: ID –ø–ª–∞—Ç–µ–∂–∞ –∏ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ (None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
#     """
#     try:
#         payment = Payment.create(
#             {
#                 "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
#                 "confirmation": {
#                     "type": "redirect",
#                     "return_url": os.getenv("BOT_LINK"),
#                 },
#                 "capture": True,
#                 "description": description,
#             }
#         )
#         logger.debug(
#             f"–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω: id={payment.id}, url={payment.confirmation.confirmation_url}"
#         )
#         return payment.id, payment.confirmation.confirmation_url
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
#         return None, None
#
#
# async def check_payment_status(payment_id: str) -> Optional[str]:
#     """
#     –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa.
#
#     Args:
#         payment_id: ID –ø–ª–∞—Ç–µ–∂–∞.
#
#     Returns:
#         Optional[str]: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ('succeeded', 'canceled', etc.) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
#     """
#     try:
#         payment = await asyncio.get_event_loop().run_in_executor(
#             None, Payment.find_one, payment_id
#         )
#         return payment.status
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
#         return None
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
"""
import os
import pytz
from pathlib import Path
from typing import Optional
from datetime import datetime

from aiogram import Bot
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    UserProfilePhotos,
    File,
)

from utils.logger import get_logger

logger = get_logger(__name__)

MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_URL = "https://t.me/partacoworking"
RULES = "https://parta-works.ru/main_rules"


def create_user_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")],
            [InlineKeyboardButton(text="üé´ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [
                InlineKeyboardButton(
                    text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends"
                )
            ],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
            [
                InlineKeyboardButton(
                    text="üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=ADMIN_URL
                )
            ],
            [InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞", url=RULES)],
        ]
    )
    return keyboard


def create_back_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    )


async def save_user_avatar(bot: Bot, user_id: int) -> Optional[str]:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        profile_photos: UserProfilePhotos = await bot.get_user_profile_photos(
            user_id=user_id, limit=1
        )

        if not profile_photos.photos:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return None

        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
        photo = profile_photos.photos[0][-1]
        file: File = await bot.get_file(photo.file_id)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        avatars_dir = "avatars"
        Path(avatars_dir).mkdir(exist_ok=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = os.path.join(avatars_dir, f"{user_id}.jpg")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = await bot.download_file(file.file_path)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–π—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(file_content, "read"):
            content_bytes = file_content.read()
        else:
            content_bytes = (
                file_content.getvalue()
                if hasattr(file_content, "getvalue")
                else bytes(file_content)
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, "wb") as f:
            f.write(content_bytes)

        logger.info(f"–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None
