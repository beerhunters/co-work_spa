import asyncio
import os
from datetime import datetime
from typing import Optional, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import aiohttp
import pytz
from dotenv import load_dotenv
from yookassa import Payment, Configuration

from utils.logger import get_logger

# –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
logger = get_logger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YooKassa
Configuration.account_id = os.getenv("YOKASSA_ACCOUNT_ID")
Configuration.secret_key = os.getenv("YOKASSA_SECRET_KEY")


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Rubitime
RUBITIME_API_KEY = os.getenv("RUBITIME_API_KEY")
RUBITIME_BASE_URL = "https://rubitime.ru/api2/"
MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_URL = "https://t.me/partacoworking"

RULES = "https://parta-works.ru/main_rules"

# btn_back = ‚¨ÖÔ∏è –ù–∞–∑–∞–¥
# rules_button = üìÑ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
# contact_admin_button = üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º


def create_user_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="booking")],
            [InlineKeyboardButton(text="üõ†Ô∏è Helpdesk", callback_data="helpdesk")],
            [InlineKeyboardButton(text="‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
            [
                InlineKeyboardButton(
                    text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite_friend"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=ADMIN_URL
                )
            ],
        ]
    )
    return keyboard


def create_back_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard


async def rubitime(method: str, extra_params: dict) -> Optional[str]:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Rubitime API.

    Args:
        method: –ú–µ—Ç–æ–¥ API ('create_record', 'update_record', 'get_record', 'remove_record').
        extra_params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.

    Returns:
        Optional[str]: ID –∑–∞–ø–∏—Å–∏ (–¥–ª—è create_record) –∏–ª–∏ None.
    """
    if method == "create_record":
        url = f"{RUBITIME_BASE_URL}create-record"
        params = {
            "branch_id": 12595,
            "cooperator_id": 25786,
            "created_at": datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S"),
            "status": 0,
            "source": "Telegram",
            **extra_params,
        }
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Rubitime: {method}")
        return None

    params["rk"] = RUBITIME_API_KEY

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("status") == "ok":
                        if method == "create_record":
                            record_id = data.get("data", {}).get("id")
                            logger.debug(f"–°–æ–∑–¥–∞–Ω–æ –≤ Rubitime: ID {record_id}")
                            return record_id
                        logger.debug(f"–ó–∞–ø—Ä–æ—Å Rubitime —É—Å–ø–µ—à–µ–Ω: {method}")
                        return None
                    else:
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ Rubitime: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                        )
                        return None
                else:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ HTTP {response.status}: {await response.text()}"
                    )
                    return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Rubitime: {str(e)}")
            return None


async def create_payment(
    description: str, amount: float
) -> Tuple[Optional[str], Optional[str]]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa.

    Args:
        description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.
        amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.

    Returns:
        Tuple[Optional[str], Optional[str]]: ID –ø–ª–∞—Ç–µ–∂–∞ –∏ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ (None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        payment = Payment.create(
            {
                "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
                "confirmation": {
                    "type": "redirect",
                    "return_url": os.getenv("BOT_LINK"),
                },
                "capture": True,
                "description": description,
            }
        )
        logger.debug(
            f"–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω: id={payment.id}, url={payment.confirmation.confirmation_url}"
        )
        return payment.id, payment.confirmation.confirmation_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return None, None


async def check_payment_status(payment_id: str) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa.

    Args:
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞.

    Returns:
        Optional[str]: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ('succeeded', 'canceled', etc.) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        payment = await asyncio.get_event_loop().run_in_executor(
            None, Payment.find_one, payment_id
        )
        return payment.status
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
        return None
