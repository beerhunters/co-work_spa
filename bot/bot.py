from typing import Optional
from aiogram import Bot, Dispatcher, BaseMiddleware
from aiogram.types import Update
from aiogram.fsm.storage.memory import MemoryStorage
from utils.bot_instance import init_bot, get_bot
from utils.logger import init_simple_logging, get_logger
from bot.hndlrs.booking_hndlr import register_book_handlers
from bot.hndlrs.registration_hndlr import register_reg_handlers
from bot.hndlrs.ticket_hndlr import register_ticket_handlers
from models.models import init_db, create_admin
import os
import asyncio
import traceback
from datetime import datetime
import pytz

logger = init_simple_logging("CoworkingBot")
LOGS_CHAT_ID = os.getenv("FOR_LOGS")


class ErrorLoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π, O(n) –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è stack trace.
    """

    async def __call__(self, handler, event: Update, data: dict) -> Optional[dict]:
        try:
            return await handler(event, data)
        except Exception as e:
            bot = data.get("bot") or get_bot()
            event_type = "unknown"
            user_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            event_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if event.message:
                event_type = "message"
                user_id = str(event.message.from_user.id)
                username = event.message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                event_text = (
                    event.message.text or event.message.caption or "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
            elif event.callback_query:
                event_type = "callback_query"
                user_id = str(event.callback_query.from_user.id)
                username = event.callback_query.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                event_text = event.callback_query.data or "–ü—É—Å—Ç–æ–π callback"
            stack_trace = "".join(
                traceback.format_exception(type(e), e, e.__traceback__)
            )
            moscow_tz = pytz.timezone("Europe/Moscow")
            error_time = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")
            error_message = (
                f"‚ùó <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {error_time}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
                f"üì© <b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b> {event_type}\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {event_text}\n"
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n"
                f"üìú <b>Stack trace:</b>\n<code>{stack_trace}</code>"
            )
            logger.error(
                f"–û—à–∏–±–∫–∞: {str(e)}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Å–æ–±—ã—Ç–∏–µ: {event_type}"
            )
            if LOGS_CHAT_ID:
                await bot.send_message(LOGS_CHAT_ID, error_message, parse_mode="HTML")
            raise


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    try:
        init_db()
        admin_login = os.getenv("ADMIN_LOGIN", "admin")
        admin_password = os.getenv("ADMIN_PASSWORD", "admin123")
        create_admin(admin_login, admin_password)
        bot = get_bot()
        dp = Dispatcher(storage=MemoryStorage())
        dp.message.middleware(ErrorLoggingMiddleware())
        dp.callback_query.middleware(ErrorLoggingMiddleware())
        register_reg_handlers(dp)
        register_book_handlers(dp)
        register_ticket_handlers(dp)
        await dp.start_polling(bot)
        with open("/data/bot_initialized", "w") as f:
            f.write("initialized")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
