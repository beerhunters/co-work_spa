# from typing import Optional
# from aiogram import Bot, Dispatcher, BaseMiddleware
# from aiogram.types import Update
# from aiogram.fsm.storage.memory import MemoryStorage
# from utils.bot_instance import init_bot, get_bot
# from utils.logger import init_simple_logging, get_logger
# from bot.hndlrs.booking_hndlr import register_book_handlers
# from bot.hndlrs.registration_hndlr import register_reg_handlers
# from bot.hndlrs.ticket_hndlr import register_ticket_handlers
# from models.models import init_db, create_admin
# import os
# import asyncio
# import traceback
# from datetime import datetime
# import pytz
#
# logger = init_simple_logging("CoworkingBot")
# LOGS_CHAT_ID = os.getenv("FOR_LOGS")
#
#
# class ErrorLoggingMiddleware(BaseMiddleware):
#     """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫.
#
#     –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π, O(n) –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è stack trace.
#     """
#
#     async def __call__(self, handler, event: Update, data: dict) -> Optional[dict]:
#         try:
#             return await handler(event, data)
#         except Exception as e:
#             bot = data.get("bot") or get_bot()
#             event_type = "unknown"
#             user_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#             username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#             event_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#             if event.message:
#                 event_type = "message"
#                 user_id = str(event.message.from_user.id)
#                 username = event.message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#                 event_text = (
#                     event.message.text or event.message.caption or "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
#                 )
#             elif event.callback_query:
#                 event_type = "callback_query"
#                 user_id = str(event.callback_query.from_user.id)
#                 username = event.callback_query.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#                 event_text = event.callback_query.data or "–ü—É—Å—Ç–æ–π callback"
#             stack_trace = "".join(
#                 traceback.format_exception(type(e), e, e.__traceback__)
#             )
#             moscow_tz = pytz.timezone("Europe/Moscow")
#             error_time = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")
#             error_message = (
#                 f"‚ùó <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n"
#                 f"‚è∞ <b>–í—Ä–µ–º—è:</b> {error_time}\n"
#                 f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
#                 f"üì© <b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b> {event_type}\n"
#                 f"üìù <b>–¢–µ–∫—Å—Ç:</b> {event_text}\n"
#                 f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n"
#                 f"üìú <b>Stack trace:</b>\n<code>{stack_trace}</code>"
#             )
#             logger.error(
#                 f"–û—à–∏–±–∫–∞: {str(e)}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Å–æ–±—ã—Ç–∏–µ: {event_type}"
#             )
#             if LOGS_CHAT_ID:
#                 await bot.send_message(LOGS_CHAT_ID, error_message, parse_mode="HTML")
#             raise
#
#
# async def main() -> None:
#     """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
#
#     –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
#     """
#     try:
#         init_db()
#         admin_login = os.getenv("ADMIN_LOGIN", "admin")
#         admin_password = os.getenv("ADMIN_PASSWORD", "admin123")
#         create_admin(admin_login, admin_password)
#         bot = get_bot()
#         dp = Dispatcher(storage=MemoryStorage())
#         dp.message.middleware(ErrorLoggingMiddleware())
#         dp.callback_query.middleware(ErrorLoggingMiddleware())
#         register_reg_handlers(dp)
#         register_book_handlers(dp)
#         register_ticket_handlers(dp)
#         await dp.start_polling(bot)
#         with open("/data/bot_initialized", "w") as f:
#             f.write("initialized")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
#         raise
#
#
# if __name__ == "__main__":
#     asyncio.run(main())
import os
import asyncio

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, Update
import traceback
from aiogram import BaseMiddleware

from typing import Any, Callable, Dict, Awaitable

from datetime import datetime
import pytz

from bot.hndlrs.ticket_hndlr import register_ticket_handlers
from utils.bot_instance import get_bot
from .hndlrs.registration_hndlr import register_reg_handlers
from .hndlrs.booking_hndlr import register_book_handlers
from models.models import init_db, create_admin
from dotenv import load_dotenv

from utils.logger import setup_application_logging, init_simple_logging

load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
logger = init_simple_logging("CoworkingBot")  # –ü–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ "MyBot started"
# logger = setup_application_logging("CoworkingBot")  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
# logger = setup_application_logging(
#     "CoworkingBot", verbose=True
# )  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
LOGS_CHAT_ID = os.getenv("FOR_LOGS")


class ErrorLoggingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –≥—Ä—É–ø–ø—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ FOR_LOGS.
    """

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any],
    ) -> Any:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            return await handler(event, data)
        except Exception as e:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            bot = data.get("bot") or get_bot()
            event_type = "unknown"
            user_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            event_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            if isinstance(event, Message):
                event_type = "message"
                user_id = str(event.from_user.id)
                username = (
                    event.from_user.username
                    or event.from_user.full_name
                    or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                )
                event_text = event.text or event.caption or "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif isinstance(event, CallbackQuery):
                event_type = "callback_query"
                user_id = str(event.from_user.id)
                username = (
                    event.from_user.username
                    or event.from_user.full_name
                    or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                )
                event_text = event.data or "–ü—É—Å—Ç–æ–π callback"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
            stack_trace = "".join(
                traceback.format_exception(type(e), e, e.__traceback__)
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            moscow_tz = pytz.timezone("Europe/Moscow")
            error_time = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")
            error_message = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\n"
                f"üìå <b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b> {event_type}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ID {user_id} ({username})\n"
                f"üìù <b>–°–æ–±—ã—Ç–∏–µ:</b> <code>{event_text}</code>\n"
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {type(e).__name__}: {str(e)}\n"
                f"üìú <b>–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:</b>\n<code>{stack_trace}</code>\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {error_time}"
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {event_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {type(e).__name__}: {str(e)}",
                exc_info=True,
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ FOR_LOGS –∑–∞–¥–∞–Ω
            if LOGS_CHAT_ID:
                try:
                    await bot.send_message(
                        chat_id=LOGS_CHAT_ID, text=error_message, parse_mode="HTML"
                    )
                except Exception as send_error:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –≥—Ä—É–ø–ø—É {LOGS_CHAT_ID}: {str(send_error)}"
                    )

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            raise


async def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_login = os.getenv("ADMIN_LOGIN", "admin")
        admin_password = os.getenv("ADMIN_PASSWORD", "admin123")
        if not admin_login or not admin_password:
            logger.error("ADMIN_LOGIN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")
            raise ValueError("ADMIN_LOGIN –∏ ADMIN_PASSWORD –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

        create_admin(admin_login, admin_password)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ª–æ–≥–∏–Ω–æ–º: {admin_login}")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-–º–∞—Ä–∫–µ—Ä –¥–ª—è healthcheck
        with open("/data/bot_initialized", "w") as f:
            f.write("initialized")
        logger.info("–§–∞–π–ª-–º–∞—Ä–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: /data/bot_initialized")

        bot = get_bot()
        dp = Dispatcher(storage=MemoryStorage())

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        dp.message.middleware(ErrorLoggingMiddleware())
        dp.callback_query.middleware(ErrorLoggingMiddleware())

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_reg_handlers(dp)
        register_book_handlers(dp)
        register_ticket_handlers(dp)

        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
