"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ API
"""

import asyncio
import os
import traceback
from datetime import datetime, timedelta
from typing import Any, Awaitable, Callable, Dict
import hashlib

import pytz
from aiogram import Dispatcher, BaseMiddleware
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import TelegramObject, CallbackQuery, Message, Update
from aiogram.exceptions import TelegramNetworkError, TelegramServerError

from bot.hndlrs.booking_hndlr import register_book_handlers
from bot.hndlrs.registration_hndlr import register_reg_handlers
from bot.hndlrs.ticket_hndlr import register_ticket_handlers
from utils.api_client import get_api_client, close_api_client
from utils.bot_instance import get_bot
from utils.logger import get_logger

logger = get_logger(__name__)
LOGS_CHAT_ID = os.getenv("FOR_LOGS")

# –°–∏—Å—Ç–µ–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
error_cache = {}
ERROR_CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç
NETWORK_ERROR_COOLDOWN = 60  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫


def should_send_error(error_type: str, error_msg: str, is_network_error: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∞–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏.
    """
    now = datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    error_hash = hashlib.md5(f"{error_type}:{error_msg}".encode()).hexdigest()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–∏
    if error_hash in error_cache:
        last_sent, count = error_cache[error_hash]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        cooldown = NETWORK_ERROR_COOLDOWN if is_network_error else ERROR_CACHE_TTL
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if now - last_sent < timedelta(seconds=cooldown):
            error_cache[error_hash] = (last_sent, count + 1)
            return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    error_cache[error_hash] = (now, 1)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞
    cleanup_error_cache()
    
    return True


def cleanup_error_cache():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –æ—à–∏–±–æ–∫"""
    now = datetime.now()
    expired_keys = []
    
    for error_hash, (last_sent, count) in error_cache.items():
        if now - last_sent > timedelta(seconds=ERROR_CACHE_TTL):
            expired_keys.append(error_hash)
    
    for key in expired_keys:
        del error_cache[key]


class ErrorLoggingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –≥—Ä—É–ø–ø—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ FOR_LOGS.
    """

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any],
    ) -> Any:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            return await handler(event, data)
        except Exception as e:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            bot = data.get("bot") or get_bot()
            event_type = "unknown"
            user_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            event_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            if isinstance(event, Message):
                event_type = "message"
                user_id = str(event.from_user.id)
                username = (
                    event.from_user.username
                    or event.from_user.full_name
                    or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                )
                event_text = event.text or event.caption or "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif isinstance(event, CallbackQuery):
                event_type = "callback_query"
                user_id = str(event.from_user.id)
                username = (
                    event.from_user.username
                    or event.from_user.full_name
                    or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                )
                event_text = event.data or "–ü—É—Å—Ç–æ–π callback"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
            stack_trace = "".join(
                traceback.format_exception(type(e), e, e.__traceback__)
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            moscow_tz = pytz.timezone("Europe/Moscow")
            error_time = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")
            error_message = (
                f"‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –í –ë–û–¢–ï</b>\n\n"
                f"üìå <b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b> {event_type}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ID {user_id} (@{username})\n"
                f"üìù <b>–°–æ–±—ã—Ç–∏–µ:</b> <code>{event_text}</code>\n"
                f"üî¥ <b>–û—à–∏–±–∫–∞:</b> {type(e).__name__}: {str(e)}\n"
                f"üìú <b>–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:</b>\n<code>{stack_trace}</code>\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {error_time}"
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {event_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {type(e).__name__}: {str(e)}",
                exc_info=True,
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
            is_network_error = isinstance(e, (TelegramNetworkError, TelegramServerError, ConnectionError))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            error_type = type(e).__name__
            error_msg = str(e)
            
            if should_send_error(error_type, error_msg, is_network_error):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                error_hash = hashlib.md5(f"{error_type}:{error_msg}".encode()).hexdigest()
                repeat_count = error_cache.get(error_hash, (None, 1))[1]
                
                if repeat_count > 1:
                    error_message += f"\nüîÑ <b>–ü–æ–≤—Ç–æ—Ä–æ–≤:</b> {repeat_count}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ FOR_LOGS –∑–∞–¥–∞–Ω
                if LOGS_CHAT_ID:
                    try:
                        await bot.send_message(
                            chat_id=LOGS_CHAT_ID, text=error_message, parse_mode="HTML"
                        )
                    except Exception as send_error:
                        logger.error(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –≥—Ä—É–ø–ø—É {LOGS_CHAT_ID}: {str(send_error)}"
                        )
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∞
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ {error_type} –ø–æ–¥–∞–≤–ª–µ–Ω–æ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            raise


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç–∞
    api_client = await get_api_client()
    logger.info("API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        test_result = await api_client._make_request("GET", "/")
        if "error" not in test_result:
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
            return
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
    bot = get_bot()

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
    dp = Dispatcher(storage=MemoryStorage())

    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    dp.message.middleware(ErrorLoggingMiddleware())
    dp.callback_query.middleware(ErrorLoggingMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_reg_handlers(dp)
    register_book_handlers(dp)
    register_ticket_handlers(dp)

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è healthcheck
    try:
        with open("/app/data/bot_initialized", "w") as f:
            f.write("1")
        logger.info("–§–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    try:
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while True:
            try:
                await dp.start_polling(bot)
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            except (TelegramNetworkError, TelegramServerError, ConnectionError) as net_error:
                error_type = type(net_error).__name__
                error_msg = str(net_error)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
                if should_send_error(error_type, error_msg, is_network_error=True):
                    moscow_tz = pytz.timezone("Europe/Moscow")
                    error_time = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")
                    
                    network_error_message = (
                        f"üî¥ üß™ <b>DEV ERROR</b>\n\n"
                        f"üìç <b>–ú–æ–¥—É–ª—å:</b> dispatcher\n"
                        f"‚öôÔ∏è <b>–§—É–Ω–∫—Ü–∏—è:</b> start_polling\n"
                        f"üìÑ <b>–°—Ç—Ä–æ–∫–∞:</b> polling loop\n"
                        f"üïê <b>–í—Ä–µ–º—è:</b> {error_time}\n\n"
                        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{error_msg}\n\n"
                        f"üîÑ <b>–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...</b>"
                    )
                    
                    if LOGS_CHAT_ID:
                        try:
                            await bot.send_message(
                                chat_id=LOGS_CHAT_ID,
                                text=network_error_message,
                                parse_mode="HTML"
                            )
                        except Exception:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                
                logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ polling: {error_type}: {error_msg}")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                await asyncio.sleep(30)
                logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                
            except Exception as e:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {type(e).__name__}: {str(e)}", exc_info=True)
                break
                
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await close_api_client()
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
